
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "Robyn"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('Robyn')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("adstocks")
> ### * adstocks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: adstock_geometric
> ### Title: Adstocking Transformation (Geometric and Weibull)
> ### Aliases: adstock_geometric adstock_weibull transform_adstock
> ###   plot_adstock
> 
> ### ** Examples
> 
> adstock_geometric(rep(100, 5), theta = 0.5)
$x
[1] 100 100 100 100 100

$x_decayed
[1] 100.00 150.00 175.00 187.50 193.75

$thetaVecCum
[1] 0.50000 0.25000 0.12500 0.06250 0.03125

$inflation_total
[1] 1.6125

> adstock_weibull(rep(100, 5), shape = 0.5, scale = 0.5, type = "CDF")
$x
[1] 100 100 100 100 100

$x_decayed
[1] 100.0000 156.1384 180.9503 190.0781 192.9547

$thetaVecCum
[1] 1.00000000 0.56138391 0.24811899 0.09127788 0.02876640

$inflation_total
[1] 1.640243

$x_imme
[1] 100 100 100 100 100

> adstock_weibull(rep(100, 5), shape = 0.5, scale = 0.5, type = "PDF")
$x
[1] 100 100 100 100 100

$x_decayed
[1] 100.0000 143.2350 163.6302 171.5210 171.5210

$thetaVecCum
[1] 1.00000000 0.43234969 0.20395193 0.07890821 0.00000000

$inflation_total
[1] 1.499814

$x_imme
[1] 100 100 100 100 100

> 
> # Wrapped function for either adstock
> transform_adstock(rep(100, 10), "weibull_pdf", shape = 1, scale = 0.5)
$x
 [1] 100 100 100 100 100 100 100 100 100 100

$x_decayed
 [1] 100.0000 180.2389 243.7503 293.1023 330.4685 357.6890 376.3214 387.6840
 [9] 392.8930 392.8930

$thetaVecCum
 [1] 1.00000000 0.80238868 0.63511431 0.49351961 0.37366228 0.27220525
 [7] 0.18632372 0.11362658 0.05208978 0.00000000

$inflation_total
[1] 3.05504

$x_imme
 [1] 100 100 100 100 100 100 100 100 100 100

> 
> 
> 
> cleanEx()
> nameEx("dt_prophet_holidays")
> ### * dt_prophet_holidays
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dt_prophet_holidays
> ### Title: Robyn Dataset: Time series
> ### Aliases: dt_prophet_holidays
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(dt_prophet_holidays)
> head(dt_prophet_holidays)
# A tibble: 6 Ã— 4
  ds         holiday                                               country  year
  <date>     <chr>                                                 <chr>   <int>
1 1995-01-01 Ano Nuevo [New Year's Day]                            AR       1995
2 1995-02-27 Dia de Carnaval [Carnival's Day]                      AR       1995
3 1995-02-28 Dia de Carnaval [Carnival's Day]                      AR       1995
4 1995-03-24 Dia Nacional de la Memoria por la Verdad y la Justicâ€¦ AR       1995
5 1995-04-02 Dia del Veterano y de los Caidos en la Guerra de Malâ€¦ AR       1995
6 1995-04-13 Semana Santa (Jueves Santo)  [Holy day (Holy Thursdaâ€¦ AR       1995
> 
> 
> 
> cleanEx()
> nameEx("dt_simulated_weekly")
> ### * dt_simulated_weekly
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dt_simulated_weekly
> ### Title: Robyn Dataset: Time series
> ### Aliases: dt_simulated_weekly
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(dt_simulated_weekly)
> head(dt_simulated_weekly)
# A tibble: 6 Ã— 12
  DATE        revenue    tv_S  ooh_S print_S facebook_I search_clicks_P search_S
  <date>        <dbl>   <dbl>  <dbl>   <dbl>      <dbl>           <dbl>    <dbl>
1 2015-11-23 2754372.  67075. 0       38185.  72903853.              0         0
2 2015-11-30 2584277.  85840. 0           0   16581100.          29512.    12400
3 2015-12-07 2547387.      0  3.97e5   1362.  49954774.          36132.    11360
4 2015-12-14 2875220  250351. 0       53040   31649297.          36804.    12760
5 2015-12-21 2215953.      0  8.32e5      0    8802269.          28402.    10840
6 2015-12-28 2569922.  99676. 0       95767.  49902081.          38062.    11320
# â„¹ 4 more variables: competitor_sales_B <int>, facebook_S <dbl>, events <chr>,
#   newsletter <dbl>
> 
> 
> 
> cleanEx()
> nameEx("hyper_limits")
> ### * hyper_limits
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hyper_limits
> ### Title: Check hyperparameter limits
> ### Aliases: hyper_limits
> 
> ### ** Examples
> 
> hyper_limits()
  thetas alphas gammas shapes scales
1    >=0     >0     >0    >=0    >=0
2     <1    <10    <=1    <20    <=1
> 
> 
> 
> cleanEx()
> nameEx("hyper_names")
> ### * hyper_names
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hyper_names
> ### Title: Get correct hyperparameter names
> ### Aliases: hyper_names
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("mic_men")
> ### * mic_men
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mic_men
> ### Title: Michaelis-Menten Transformation
> ### Aliases: mic_men
> 
> ### ** Examples
> 
> mic_men(x = 5:10, Vmax = 5, Km = 0.5)
[1] 4.545455 4.615385 4.666667 4.705882 4.736842 4.761905
> 
> 
> 
> cleanEx()
> nameEx("robyn_allocator")
> ### * robyn_allocator
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: robyn_allocator
> ### Title: Budget Allocator
> ### Aliases: robyn_allocator print.robyn_allocator plot.robyn_allocator
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Having InputCollect and OutputCollect results
> ##D AllocatorCollect <- robyn_allocator(
> ##D   InputCollect = InputCollect,
> ##D   OutputCollect = OutputCollect,
> ##D   select_model = "1_2_3",
> ##D   scenario = "max_response",
> ##D   channel_constr_low = 0.7,
> ##D   channel_constr_up = c(1.2, 1.5, 1.5, 1.5, 1.5),
> ##D   channel_constr_multiplier = 4,
> ##D   date_range = "last_26",
> ##D   export = FALSE
> ##D )
> ##D # Print a summary
> ##D print(AllocatorCollect)
> ##D # Plot the allocator one-pager
> ##D plot(AllocatorCollect)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("robyn_clusters")
> ### * robyn_clusters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: robyn_clusters
> ### Title: Clustering to Reduce Number of Models based on ROI and Errors
> ### Aliases: robyn_clusters
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Having InputCollect and OutputCollect results
> ##D cls <- robyn_clusters(
> ##D   input = OutputCollect,
> ##D   all_media = InputCollect$all_media,
> ##D   k = 3, limit = 2,
> ##D   weights = c(1, 1, 1.5)
> ##D )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("robyn_converge")
> ### * robyn_converge
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: robyn_converge
> ### Title: Check Models Convergence
> ### Aliases: robyn_converge
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Having OutputModels results
> ##D MOO <- robyn_converge(
> ##D   OutputModels,
> ##D   n_cuts = 10,
> ##D   sd_qtref = 3,
> ##D   med_lowb = 3
> ##D )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("robyn_inputs")
> ### * robyn_inputs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: robyn_inputs
> ### Title: Input Data Check & Transformation
> ### Aliases: robyn_inputs print.robyn_inputs
> 
> ### ** Examples
> 
> # Using dummy simulated data
> InputCollect <- robyn_inputs(
+   dt_input = Robyn::dt_simulated_weekly,
+   dt_holidays = Robyn::dt_prophet_holidays,
+   date_var = "DATE",
+   dep_var = "revenue",
+   dep_var_type = "revenue",
+   prophet_vars = c("trend", "season", "holiday"),
+   prophet_country = "DE",
+   context_vars = c("competitor_sales_B", "events"),
+   paid_media_spends = c("tv_S", "ooh_S", "print_S", "facebook_S", "search_S"),
+   paid_media_vars = c("tv_S", "ooh_S", "print_S", "facebook_I", "search_clicks_P"),
+   organic_vars = "newsletter",
+   factor_vars = "events",
+   window_start = "2016-11-23",
+   window_end = "2018-08-22",
+   adstock = "geometric",
+   # To be defined separately
+   hyperparameters = NULL,
+   calibration_input = NULL
+ )
Input 'window_start' is adapted to the closest date contained in input data: 2016-11-21
Input 'window_end' is adapted to the closest date contained in input data: 2018-08-20
> print(InputCollect)
Total Observations: 208 (weeks)
Input Table Columns (12):
  Date: DATE
  Dependent: revenue [revenue]
  Paid Media: tv_S, ooh_S, print_S, facebook_I, search_clicks_P
  Paid Media Spend: tv_S, ooh_S, print_S, facebook_S, search_S
  Context: competitor_sales_B, events
  Organic: newsletter
  Prophet (Auto-generated): trend, season, holiday on DE
  Unused variables: None

Date Range: 2015-11-23:2019-11-11
Model Window: 2016-11-21:2018-08-20 (92 weeks)
With Calibration: FALSE
Custom parameters: None

Adstock: geometric
Hyper-parameters: [0;31mNot set yet[0m
> 
> 
> 
> cleanEx()
> nameEx("robyn_refresh")
> ### * robyn_refresh
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: robyn_refresh
> ### Title: Build Refresh Model
> ### Aliases: robyn_refresh print.robyn_refresh plot.robyn_refresh
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Loading dummy data
> ##D data("dt_simulated_weekly")
> ##D data("dt_prophet_holidays")
> ##D # Set the (pre-trained and exported) Robyn model JSON file
> ##D json_file <- "~/Robyn_202208081444_init/RobynModel-2_55_4.json"
> ##D 
> ##D # Run \code{robyn_refresh()} with 13 weeks cadence in auto mode
> ##D Robyn <- robyn_refresh(
> ##D   json_file = json_file,
> ##D   dt_input = dt_simulated_weekly,
> ##D   dt_holidays = Robyn::dt_prophet_holidays,
> ##D   refresh_steps = 13,
> ##D   refresh_mode = "auto",
> ##D   refresh_iters = 200,
> ##D   refresh_trials = 5
> ##D )
> ##D 
> ##D # Run \code{robyn_refresh()} with 4 weeks cadence in manual mode
> ##D json_file2 <- "~/Robyn_202208081444_init/Robyn_202208090847_rf/RobynModel-1_2_3.json"
> ##D Robyn <- robyn_refresh(
> ##D   json_file = json_file2,
> ##D   dt_input = dt_simulated_weekly,
> ##D   dt_holidays = Robyn::dt_prophet_holidays,
> ##D   refresh_steps = 4,
> ##D   refresh_mode = "manual",
> ##D   refresh_iters = 200,
> ##D   refresh_trials = 5
> ##D )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("robyn_response")
> ### * robyn_response
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: robyn_response
> ### Title: Response and Saturation Curves
> ### Aliases: robyn_response
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Having InputCollect and OutputCollect objects
> ##D 
> ##D # Get marginal response (mResponse) and marginal ROI (mROI) for
> ##D # the next 1k on 80k for search_S
> ##D spend1 <- 80000
> ##D Response1 <- robyn_response(
> ##D   InputCollect = InputCollect,
> ##D   OutputCollect = OutputCollect,
> ##D   metric_name = "search_S",
> ##D   metric_value = spend1
> ##D )$response
> ##D # Get ROI for 80k
> ##D Response1 / spend1 # ROI for search 80k
> ##D 
> ##D # Get response for 81k
> ##D spend2 <- spend1 + 1000
> ##D Response2 <- robyn_response(
> ##D   InputCollect = InputCollect,
> ##D   OutputCollect = OutputCollect,
> ##D   metric_name = "search_S",
> ##D   metric_value = spend2
> ##D )$response
> ##D 
> ##D # Get ROI for 81k
> ##D Response2 / spend2 # ROI for search 81k
> ##D # Get marginal response (mResponse) for the next 1k on 80k
> ##D Response2 - Response1
> ##D # Get marginal ROI (mROI) for the next 1k on 80k
> ##D (Response2 - Response1) / (spend2 - spend1)
> ##D 
> ##D # Example of getting paid media exposure response curves
> ##D imps <- 1000000
> ##D response_imps <- robyn_response(
> ##D   InputCollect = InputCollect,
> ##D   OutputCollect = OutputCollect,
> ##D   metric_name = "facebook_I",
> ##D   metric_value = imps
> ##D )$response
> ##D response_per_1k_imps <- response_imps / imps * 1000
> ##D response_per_1k_imps
> ##D 
> ##D # Get response for 80k for search_S from the a certain model SolID
> ##D # in the current model output in the global environment
> ##D robyn_response(
> ##D   InputCollect = InputCollect,
> ##D   OutputCollect = OutputCollect,
> ##D   metric_name = "search_S",
> ##D   metric_value = 80000,
> ##D   dt_hyppar = OutputCollect$resultHypParam,
> ##D   dt_coef = OutputCollect$xDecompAgg
> ##D )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("robyn_run")
> ### * robyn_run
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: robyn_run
> ### Title: Robyn Modelling Function
> ### Aliases: robyn_run print.robyn_models
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Having InputCollect results
> ##D OutputCollect <- robyn_run(
> ##D   InputCollect = InputCollect,
> ##D   cores = 2,
> ##D   iterations = 200,
> ##D   trials = 1,
> ##D   outputs = FALSE
> ##D )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("robyn_write")
> ### * robyn_write
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: robyn_write
> ### Title: Import and Export Robyn JSON files
> ### Aliases: robyn_write print.robyn_write robyn_read print.robyn_read
> ###   robyn_recreate
> 
> ### ** Examples
> 
> ## Not run: 
> ##D InputCollectJSON <- robyn_inputs(
> ##D   dt_input = Robyn::dt_simulated_weekly,
> ##D   dt_holidays = Robyn::dt_prophet_holidays,
> ##D   json_file = "~/Desktop/RobynModel-1_29_12.json"
> ##D )
> ##D print(InputCollectJSON)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("saturation_hill")
> ### * saturation_hill
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: saturation_hill
> ### Title: Hill Saturation Transformation
> ### Aliases: saturation_hill plot_saturation
> 
> ### ** Examples
> 
> saturation_hill(c(100, 150, 170, 190, 200), alpha = 3, gamma = 0.5)
[1] 0.2285714 0.5000000 0.5927847 0.6702169 0.7032967
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.428 0.08 1.536 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
