
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "jmv"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('jmv')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("ANOVA")
> ### * ANOVA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ANOVA
> ### Title: ANOVA
> ### Aliases: ANOVA
> 
> ### ** Examples
> 
> data('ToothGrowth')
> 
> ANOVA(formula = len ~ dose * supp, data = ToothGrowth)

 ANOVA

 ANOVA - len                                                                     
 ─────────────────────────────────────────────────────────────────────────────── 
                Sum of Squares    df    Mean Square    F            p            
 ─────────────────────────────────────────────────────────────────────────────── 
   dose              2426.4343     2     1213.21717    91.999965    < .0000001   
   supp               205.3500     1      205.35000    15.571979     0.0002312   
   dose:supp          108.3190     2       54.15950     4.106991     0.0218603   
   Residuals          712.1060    54       13.18715                              
 ─────────────────────────────────────────────────────────────────────────────── 

> 
> #
> #  ANOVA
> #
> #  ANOVA
> #  -----------------------------------------------------------------------
> #                 Sum of Squares    df    Mean Square    F        p
> #  -----------------------------------------------------------------------
> #    dose                   2426     2         1213.2    92.00    < .001
> #    supp                    205     1          205.4    15.57    < .001
> #    dose:supp               108     2           54.2     4.11     0.022
> #    Residuals               712    54           13.2
> #  -----------------------------------------------------------------------
> #
> 
> ANOVA(
+     formula = len ~ dose * supp,
+     data = ToothGrowth,
+     emMeans = ~ supp + dose:supp, # est. marginal means for supp and dose:supp
+     emmPlots = TRUE,              # produce plots of those marginal means
+     emmTables = TRUE)             # produce tables of those marginal means

 ANOVA

 ANOVA - len                                                                     
 ─────────────────────────────────────────────────────────────────────────────── 
                Sum of Squares    df    Mean Square    F            p            
 ─────────────────────────────────────────────────────────────────────────────── 
   dose              2426.4343     2     1213.21717    91.999965    < .0000001   
   supp               205.3500     1      205.35000    15.571979     0.0002312   
   dose:supp          108.3190     2       54.15950     4.106991     0.0218603   
   Residuals          712.1060    54       13.18715                              
 ─────────────────────────────────────────────────────────────────────────────── 


 ESTIMATED MARGINAL MEANS

 SUPP

 Estimated Marginal Means - supp                           
 ───────────────────────────────────────────────────────── 
   supp    Mean        SE           Lower       Upper      
 ───────────────────────────────────────────────────────── 
   OJ      20.66333    0.6630020    19.33409    21.99257   
   VC      16.96333    0.6630020    15.63409    18.29257   
 ───────────────────────────────────────────────────────── 


 DOSE:SUPP

 Estimated Marginal Means - dose:supp                               
 ────────────────────────────────────────────────────────────────── 
   supp    dose    Mean         SE          Lower        Upper      
 ────────────────────────────────────────────────────────────────── 
   OJ      500     13.230000    1.148353    10.927691    15.53231   
           1000    22.700000    1.148353    20.397691    25.00231   
           2000    26.060000    1.148353    23.757691    28.36231   
   VC      500      7.980000    1.148353     5.677691    10.28231   
           1000    16.770000    1.148353    14.467691    19.07231   
           2000    26.140000    1.148353    23.837691    28.44231   
 ────────────────────────────────────────────────────────────────── 

> 
> 
> 
> 
> cleanEx()
> nameEx("ancova")
> ### * ancova
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ancova
> ### Title: ANCOVA
> ### Aliases: ancova
> 
> ### ** Examples
> 
> data('ToothGrowth')
> 
> ancova(formula = len ~ supp + dose, data = ToothGrowth)

 ANCOVA

 ANCOVA - len                                                                    
 ─────────────────────────────────────────────────────────────────────────────── 
                Sum of Squares    df    Mean Square    F            p            
 ─────────────────────────────────────────────────────────────────────────────── 
   supp               205.3500     1      205.35000     11.44677     0.0013007   
   dose              2224.3043     1     2224.30430    123.98877    < .0000001   
   Residuals         1022.5550    57       17.93956                              
 ─────────────────────────────────────────────────────────────────────────────── 

> 
> #
> #  ANCOVA
> #
> #  ANCOVA
> #  -----------------------------------------------------------------------
> #                 Sum of Squares    df    Mean Square    F        p
> #  -----------------------------------------------------------------------
> #    supp                    205     1          205.4     11.4     0.001
> #    dose                   2224     1         2224.3    124.0    < .001
> #    Residuals              1023    57           17.9
> #  -----------------------------------------------------------------------
> #
> 
> ancova(
+     formula = len ~ supp + dose,
+     data = ToothGrowth,
+     postHoc = ~ supp,
+     emMeans = ~ supp)

 ANCOVA

 ANCOVA - len                                                                    
 ─────────────────────────────────────────────────────────────────────────────── 
                Sum of Squares    df    Mean Square    F            p            
 ─────────────────────────────────────────────────────────────────────────────── 
   supp               205.3500     1      205.35000     11.44677     0.0013007   
   dose              2224.3043     1     2224.30430    123.98877    < .0000001   
   Residuals         1022.5550    57       17.93956                              
 ─────────────────────────────────────────────────────────────────────────────── 


 POST HOC TESTS

 Post Hoc Comparisons - supp                                                               
 ───────────────────────────────────────────────────────────────────────────────────────── 
   supp         supp    Mean Difference    SE          df          t           p-tukey     
 ───────────────────────────────────────────────────────────────────────────────────────── 
   OJ      -    VC             3.700000    1.093604    57.00000    3.383307    0.0013007   
 ───────────────────────────────────────────────────────────────────────────────────────── 
   Note. Comparisons are based on estimated marginal means

> 
> 
> 
> 
> cleanEx()
> nameEx("anovaNP")
> ### * anovaNP
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: anovaNP
> ### Title: One-Way ANOVA (Non-parametric)
> ### Aliases: anovaNP
> 
> ### ** Examples
> 
> data('ToothGrowth')
> 
> anovaNP(formula = len ~ dose, data=ToothGrowth)

 ONE-WAY ANOVA (NON-PARAMETRIC)

 Kruskal-Wallis                          
 ─────────────────────────────────────── 
          χ²          df    p            
 ─────────────────────────────────────── 
   len    40.66894     2    < .0000001   
 ─────────────────────────────────────── 

> 
> #
> #  ONE-WAY ANOVA (NON-PARAMETRIC)
> #
> #  Kruskal-Wallis
> #  -------------------------------
> #           X²      df    p
> #  -------------------------------
> #    len    40.7     2    < .001
> #  -------------------------------
> #
> 
> 
> 
> 
> cleanEx()
> nameEx("anovaOneW")
> ### * anovaOneW
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: anovaOneW
> ### Title: One-Way ANOVA
> ### Aliases: anovaOneW
> 
> ### ** Examples
> 
> data('ToothGrowth')
> dat <- ToothGrowth
> dat$dose <- factor(dat$dose)
> 
> anovaOneW(formula = len ~ dose, data = dat)

 ONE-WAY ANOVA

 One-Way ANOVA (Welch's)                              
 ──────────────────────────────────────────────────── 
          F           df1    df2         p            
 ──────────────────────────────────────────────────── 
   len    68.40098      2    37.74325    < .0000001   
 ──────────────────────────────────────────────────── 

> 
> #
> #  ONE-WAY ANOVA
> #
> #  One-Way ANOVA (Welch's)
> #  ----------------------------------------
> #           F       df1    df2     p
> #  ----------------------------------------
> #    len    68.4      2    37.7    < .001
> #  ----------------------------------------
> #
> 
> 
> 
> 
> cleanEx()
> nameEx("anovaRM")
> ### * anovaRM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: anovaRM
> ### Title: Repeated Measures ANOVA
> ### Aliases: anovaRM
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("anovaRMNP")
> ### * anovaRMNP
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: anovaRMNP
> ### Title: Repeated Measures ANOVA (Non-parametric)
> ### Aliases: anovaRMNP
> 
> ### ** Examples
> 
> data('bugs', package = 'jmv')
> 
> anovaRMNP(bugs, measures = vars(LDLF, LDHF, HDLF, HDHF))

 REPEATED MEASURES ANOVA (NON-PARAMETRIC)

 Friedman                         
 ──────────────────────────────── 
   χ²          df    p            
 ──────────────────────────────── 
   55.83379     3    < .0000001   
 ──────────────────────────────── 

> 
> #
> #  REPEATED MEASURES ANOVA (NON-PARAMETRIC)
> #
> #  Friedman
> #  ------------------------
> #    X²      df    p
> #  ------------------------
> #    55.8     3    < .001
> #  ------------------------
> #
> 
> 
> 
> 
> cleanEx()
> nameEx("cfa")
> ### * cfa
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cfa
> ### Title: Confirmatory Factor Analysis
> ### Aliases: cfa
> 
> ### ** Examples
> 
> data <- lavaan::HolzingerSwineford1939
> 
> jmv::cfa(
+     data = data,
+     factors = list(
+         list(label="Visual", vars=c("x1", "x2", "x3")),
+         list(label="Textual", vars=c("x4", "x5", "x6")),
+         list(label="Speed", vars=c("x7", "x8", "x9"))),
+     resCov = NULL)

 CONFIRMATORY FACTOR ANALYSIS

 Factor Loadings                                                                
 ────────────────────────────────────────────────────────────────────────────── 
   Factor     Indicator    Estimate     SE            Z            p            
 ────────────────────────────────────────────────────────────────────────────── 
   Visual     x1           0.8996203    0.08323280    10.808483    < .0000001   
              x2           0.4979405    0.08078722     6.163605    < .0000001   
              x3           0.6561561    0.07757905     8.457903    < .0000001   
   Textual    x4           0.9896934    0.05668959    17.458117    < .0000001   
              x5           1.1016047    0.06258794    17.600910    < .0000001   
              x6           0.9166010    0.05375570    17.051232    < .0000001   
   Speed      x7           0.6194754    0.07430806     8.336585    < .0000001   
              x8           0.7309488    0.07549434     9.682167    < .0000001   
              x9           0.6699801    0.07752346     8.642289    < .0000001   
 ────────────────────────────────────────────────────────────────────────────── 


 FACTOR ESTIMATES

 Factor Covariances                                                            
 ───────────────────────────────────────────────────────────────────────────── 
                         Estimate       SE            Z           p            
 ───────────────────────────────────────────────────────────────────────────── 
   Visual     Visual     1.0000000 ᵃ                                           
              Textual    0.4585098      0.06346381    7.224744    < .0000001   
              Speed      0.4705347      0.08623061    5.456702    < .0000001   
   Textual    Textual    1.0000000 ᵃ                                           
              Speed      0.2829856      0.07147087    3.959453     0.0000751   
   Speed      Speed      1.0000000 ᵃ                                           
 ───────────────────────────────────────────────────────────────────────────── 
   ᵃ fixed parameter


 MODEL FIT

 Test for Exact Fit               
 ──────────────────────────────── 
   χ²          df    p            
 ──────────────────────────────── 
   85.30552    24    < .0000001   
 ──────────────────────────────── 


 Fit Measures                                                        
 ─────────────────────────────────────────────────────────────────── 
   CFI          TLI          RMSEA         Lower         Upper       
 ─────────────────────────────────────────────────────────────────── 
   0.9305597    0.8958395    0.09212148    0.07141849    0.1136780   
 ─────────────────────────────────────────────────────────────────── 

> 
> #
> #  CONFIRMATORY FACTOR ANALYSIS
> #
> #  Factor Loadings
> #  -----------------------------------------------------------------
> #    Factor     Indicator    Estimate    SE        Z        p
> #  -----------------------------------------------------------------
> #    Visual     x1              0.900    0.0832    10.81    < .001
> #               x2              0.498    0.0808     6.16    < .001
> #               x3              0.656    0.0776     8.46    < .001
> #    Textual    x4              0.990    0.0567    17.46    < .001
> #               x5              1.102    0.0626    17.60    < .001
> #               x6              0.917    0.0538    17.05    < .001
> #    Speed      x7              0.619    0.0743     8.34    < .001
> #               x8              0.731    0.0755     9.68    < .001
> #               x9              0.670    0.0775     8.64    < .001
> #  -----------------------------------------------------------------
> #
> #
> #  FACTOR ESTIMATES
> #
> #  Factor Covariances
> #  --------------------------------------------------------------
> #                          Estimate    SE        Z       p
> #  --------------------------------------------------------------
> #    Visual     Visual      1.000 a
> #               Textual     0.459      0.0635    7.22    < .001
> #               Speed       0.471      0.0862    5.46    < .001
> #    Textual    Textual     1.000 a
> #               Speed       0.283      0.0715    3.96    < .001
> #    Speed      Speed       1.000 a
> #  --------------------------------------------------------------
> #    a fixed parameter
> #
> #
> #  MODEL FIT
> #
> #  Test for Exact Fit
> #  ------------------------
> #    X²      df    p
> #  ------------------------
> #    85.3    24    < .001
> #  ------------------------
> #
> #
> #  Fit Measures
> #  -----------------------------------------------
> #    CFI      TLI      RMSEA     Lower     Upper
> #  -----------------------------------------------
> #    0.931    0.896    0.0921    0.0714    0.114
> #  -----------------------------------------------
> #
> 
> 
> 
> 
> cleanEx()
> nameEx("contTables")
> ### * contTables
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: contTables
> ### Title: Contingency Tables
> ### Aliases: contTables
> 
> ### ** Examples
> 
> data('HairEyeColor')
> dat <- as.data.frame(HairEyeColor)
> 
> contTables(formula = Freq ~ Hair:Eye, dat)

 CONTINGENCY TABLES

 Contingency Tables                                    
 ───────────────────────────────────────────────────── 
   Hair     Brown    Blue    Hazel    Green    Total   
 ───────────────────────────────────────────────────── 
   Black       68      20       15        5      108   
   Brown      119      84       54       29      286   
   Red         26      17       14       14       71   
   Blond        7      94       10       16      127   
   Total      220     215       93       64      592   
 ───────────────────────────────────────────────────── 


 χ² Tests                               
 ────────────────────────────────────── 
         Value       df    p            
 ────────────────────────────────────── 
   χ²    138.2898     9    < .0000001   
   N          592                       
 ────────────────────────────────────── 

> 
> #
> #  CONTINGENCY TABLES
> #
> #  Contingency Tables
> #  -----------------------------------------------------
> #    Hair     Brown    Blue    Hazel    Green    Total
> #  -----------------------------------------------------
> #    Black       68      20       15        5      108
> #    Brown      119      84       54       29      286
> #    Red         26      17       14       14       71
> #    Blond        7      94       10       16      127
> #    Total      220     215       93       64      592
> #  -----------------------------------------------------
> #
> #
> #  X² Tests
> #  -------------------------------
> #          Value    df    p
> #  -------------------------------
> #    X²      138     9    < .001
> #    N       592
> #  -------------------------------
> #
> 
> # Alternatively, omit the left of the formula (`Freq`) if each row
> # represents a single observation:
> 
> contTables(formula = ~ Hair:Eye, dat)

 CONTINGENCY TABLES

 Contingency Tables                                    
 ───────────────────────────────────────────────────── 
   Hair     Brown    Blue    Hazel    Green    Total   
 ───────────────────────────────────────────────────── 
   Black        2       2        2        2        8   
   Brown        2       2        2        2        8   
   Red          2       2        2        2        8   
   Blond        2       2        2        2        8   
   Total        8       8        8        8       32   
 ───────────────────────────────────────────────────── 


 χ² Tests                              
 ───────────────────────────────────── 
         Value       df    p           
 ───────────────────────────────────── 
   χ²    0.000000     9    1.0000000   
   N           32                      
 ───────────────────────────────────── 

> 
> 
> 
> 
> cleanEx()
> nameEx("contTablesPaired")
> ### * contTablesPaired
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: contTablesPaired
> ### Title: Paired Samples Contingency Tables
> ### Aliases: contTablesPaired
> 
> ### ** Examples
> 
> dat <- data.frame(
+     `1st survey` = c('Approve', 'Approve', 'Disapprove', 'Disapprove'),
+     `2nd survey` = c('Approve', 'Disapprove', 'Approve', 'Disapprove'),
+     `Counts` = c(794, 150, 86, 570),
+     check.names=FALSE)
> 
> contTablesPaired(formula = Counts ~ `1st survey`:`2nd survey`, data = dat)

 PAIRED SAMPLES CONTINGENCY TABLES

 Contingency Tables                               
 ──────────────────────────────────────────────── 
   1st survey    Approve    Disapprove    Total   
 ──────────────────────────────────────────────── 
   Approve           794           150      944   
   Disapprove         86           570      656   
   Total             880           720     1600   
 ──────────────────────────────────────────────── 


 McNemar Test                          
 ───────────────────────────────────── 
         Value       df    p           
 ───────────────────────────────────── 
   χ²    17.35593     1    0.0000310   
   N     1600.000                      
 ───────────────────────────────────── 

> 
> #
> #  PAIRED SAMPLES CONTINGENCY TABLES
> #
> #  Contingency Tables
> #  ------------------------------------------------
> #    1st survey    Approve    Disapprove    Total
> #  ------------------------------------------------
> #    Approve           794           150      944
> #    Disapprove         86           570      656
> #    Total             880           720     1600
> #  ------------------------------------------------
> #
> #
> #  McNemar Test
> #  -----------------------------------------------------
> #                                Value    df    p
> #  -----------------------------------------------------
> #    X²                           17.4     1    < .001
> #    X² continuity correction     16.8     1    < .001
> #  -----------------------------------------------------
> #
> 
> 
> # Alternatively, omit the left of the formula (`Counts`) from the
> # formula if each row represents a single observation:
> 
> contTablesPaired(formula = ~ `1st survey`:`2nd survey`, data = dat)

 PAIRED SAMPLES CONTINGENCY TABLES

 Contingency Tables                               
 ──────────────────────────────────────────────── 
   1st survey    Approve    Disapprove    Total   
 ──────────────────────────────────────────────── 
   Approve             1             1        2   
   Disapprove          1             1        2   
   Total               2             2        4   
 ──────────────────────────────────────────────── 


 McNemar Test                          
 ───────────────────────────────────── 
         Value       df    p           
 ───────────────────────────────────── 
   χ²    0.000000     1    1.0000000   
   N            4                      
 ───────────────────────────────────── 

> 
> 
> 
> 
> cleanEx()
> nameEx("corrMatrix")
> ### * corrMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: corrMatrix
> ### Title: Correlation Matrix
> ### Aliases: corrMatrix
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("corrPart")
> ### * corrPart
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: corrPart
> ### Title: Partial Correlation
> ### Aliases: corrPart
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("descriptives")
> ### * descriptives
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: descriptives
> ### Title: Descriptives
> ### Aliases: descriptives
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("efa")
> ### * efa
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: efa
> ### Title: Exploratory Factor Analysis
> ### Aliases: efa
> 
> ### ** Examples
> 
> data('iris')
> 
> efa(iris, vars = vars(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width))
Loading required namespace: GPArotation

 EXPLORATORY FACTOR ANALYSIS

 Factor Loadings                                                
 ────────────────────────────────────────────────────────────── 
                   1            2            3    Uniqueness    
 ────────────────────────────────────────────────────────────── 
   Sepal.Length    0.9961179                      0.005469870   
   Sepal.Width                  0.7725248         0.409316034   
   Petal.Length    0.9039649                      0.004999999   
   Petal.Width     0.9331941                      0.015024795   
 ────────────────────────────────────────────────────────────── 
   Note. 'Minimum residual' extraction method was used in
   combination with a 'oblimin' rotation

> 
> #
> #  EXPLORATORY FACTOR ANALYSIS
> #
> #  Factor Loadings
> #  ------------------------------------------------
> #                    1        2        Uniqueness
> #  ------------------------------------------------
> #    Sepal.Length    0.993                0.10181
> #    Sepal.Width              0.725       0.42199
> #    Petal.Length    0.933                0.00483
> #    Petal.Width     0.897                0.07088
> #  ------------------------------------------------
> #    Note. 'oblimin' rotation was used
> #
> 
> 
> 
> 
> cleanEx()
> nameEx("linReg")
> ### * linReg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: linReg
> ### Title: Linear Regression
> ### Aliases: linReg
> 
> ### ** Examples
> 
> data('Prestige', package='carData')
> 
> linReg(data = Prestige, dep = income,
+        covs = vars(education, prestige, women),
+        blocks = list(list('education', 'prestige', 'women')))

 LINEAR REGRESSION

 Model Fit Measures                  
 ─────────────────────────────────── 
   Model    R            R²          
 ─────────────────────────────────── 
       1    0.8020016    0.6432066   
 ─────────────────────────────────── 


 MODEL SPECIFIC RESULTS

 MODEL 1

 Model Coefficients - income                                            
 ────────────────────────────────────────────────────────────────────── 
   Predictor    Estimate      SE             t             p            
 ────────────────────────────────────────────────────────────────────── 
   Intercept    -253.84973    1086.157091    -0.2337136     0.8156948   
   education     177.19903     187.632269     0.9443953     0.3472902   
   prestige      141.43535      29.909611     4.7287593     0.0000076   
   women         -50.89570       8.556185    -5.9484105    < .0000001   
 ────────────────────────────────────────────────────────────────────── 

> 
> #
> #  LINEAR REGRESSION
> #
> #  Model Fit Measures
> #  ---------------------------
> #    Model    R        R²
> #  ---------------------------
> #        1    0.802    0.643
> #  ---------------------------
> #
> #
> #  MODEL SPECIFIC RESULTS
> #
> #  MODEL 1
> #
> #
> #  Model Coefficients
> #  --------------------------------------------------------
> #    Predictor    Estimate    SE         t         p
> #  --------------------------------------------------------
> #    Intercept      -253.8    1086.16    -0.234     0.816
> #    women           -50.9       8.56    -5.948    < .001
> #    prestige        141.4      29.91     4.729    < .001
> #    education       177.2     187.63     0.944     0.347
> #  --------------------------------------------------------
> #
> 
> 
> 
> 
> cleanEx()
> nameEx("logLinear")
> ### * logLinear
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: logLinear
> ### Title: Log-Linear Regression
> ### Aliases: logLinear
> 
> ### ** Examples
> 
> data('mtcars')
> 
> tab <- table('gear'=mtcars$gear, 'cyl'=mtcars$cyl)
> dat <- as.data.frame(tab)
> 
> logLinear(data = dat, factors = vars(gear, cyl),  counts = Freq,
+           blocks = list(list("gear", "cyl", c("gear", "cyl"))),
+           refLevels = list(
+               list(var="gear", ref="3"),
+               list(var="cyl", ref="4")))

 LOG-LINEAR REGRESSION

 Model Fit Measures                                 
 ────────────────────────────────────────────────── 
   Model    Deviance        AIC         R²-McF      
 ────────────────────────────────────────────────── 
       1    4.122321e-10    41.38168    1.0000000   
 ────────────────────────────────────────────────── 


 MODEL SPECIFIC RESULTS

 MODEL 1

 Model Coefficients                                                                  
 ─────────────────────────────────────────────────────────────────────────────────── 
   Predictor          Estimate         SE               Z                p           
 ─────────────────────────────────────────────────────────────────────────────────── 
   Intercept          -4.691218e-16        1.0000000    -4.691218e-16    1.0000000   
   gear:                                                                             
   4 – 3                  2.0794415        1.0606602        1.9605163    0.0499355   
   5 – 3                  0.6931472        1.2247449        0.5659523    0.5714262   
   cyl:                                                                              
   6 – 4                  0.6931472        1.2247449        0.5659523    0.5714262   
   8 – 4                  2.4849066        1.0408330        2.3874211    0.0169670   
   gear:cyl:                                                                         
   (4 – 3):(6 – 4)       -1.3862944        1.3693064       -1.0124063    0.3113438   
   (5 – 3):(6 – 4)       -1.3862944        1.7320508       -0.8003774    0.4234922   
   (4 – 3):(8 – 4)      -26.8669333    42247.1657137    -6.359464e -4    0.9994926   
   (5 – 3):(8 – 4)       -2.4849066        1.4433757       -1.7215938    0.0851431   
 ─────────────────────────────────────────────────────────────────────────────────── 

> 
> #
> #  LOG-LINEAR REGRESSION
> #
> #  Model Fit Measures
> #  ---------------------------------------
> #    Model    Deviance    AIC     R²-McF
> #  ---------------------------------------
> #        1    4.12e-10    41.4     1.000
> #  ---------------------------------------
> #
> #
> #  MODEL SPECIFIC RESULTS
> #
> #  MODEL 1
> #
> #  Model Coefficients
> #  ------------------------------------------------------------------
> #    Predictor          Estimate     SE          Z            p
> #  ------------------------------------------------------------------
> #    Intercept          -4.71e-16        1.00    -4.71e-16    1.000
> #    gear:
> #    4 – 3                  2.079        1.06        1.961    0.050
> #    5 – 3                  0.693        1.22        0.566    0.571
> #    cyl:
> #    6 – 4                  0.693        1.22        0.566    0.571
> #    8 – 4                  2.485        1.04        2.387    0.017
> #    gear:cyl:
> #    (4 – 3):(6 – 4)       -1.386        1.37       -1.012    0.311
> #    (5 – 3):(6 – 4)       -1.386        1.73       -0.800    0.423
> #    (4 – 3):(8 – 4)      -26.867    42247.17    -6.36e -4    0.999
> #    (5 – 3):(8 – 4)       -2.485        1.44       -1.722    0.085
> #  ------------------------------------------------------------------
> #
> #
> 
> 
> 
> 
> cleanEx()
> nameEx("logRegBin")
> ### * logRegBin
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: logRegBin
> ### Title: Binomial Logistic Regression
> ### Aliases: logRegBin
> 
> ### ** Examples
> 
> data('birthwt', package='MASS')
> 
> dat <- data.frame(
+             low = factor(birthwt$low),
+             age = birthwt$age,
+             bwt = birthwt$bwt)
> 
> logRegBin(data = dat, dep = low,
+           covs = vars(age, bwt),
+           blocks = list(list("age", "bwt")),
+           refLevels = list(list(var="low", ref="0")))
Warning: glm.fit: algorithm did not converge
Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred

 BINOMIAL LOGISTIC REGRESSION

 Model Fit Measures                                
 ───────────────────────────────────────────────── 
   Model    Deviance       AIC         R²-McF      
 ───────────────────────────────────────────────── 
       1    4.970391e-7    6.000000    1.0000000   
 ───────────────────────────────────────────────── 


 MODEL SPECIFIC RESULTS

 MODEL 1

 Model Coefficients - low                                                     
 ──────────────────────────────────────────────────────────────────────────── 
   Predictor    Estimate          SE              Z               p           
 ──────────────────────────────────────────────────────────────────────────── 
   Intercept    2974.732246510    218237.17905      0.01363073    0.9891246   
   age            -0.006529878       482.65067    -1.352920e-5    0.9999892   
   bwt            -1.185317892        87.04998     -0.01361652    0.9891359   
 ──────────────────────────────────────────────────────────────────────────── 
   Note. Estimates represent the log odds of "low = 1" vs. "low = 0"

> 
> #
> #  BINOMIAL LOGISTIC REGRESSION
> #
> #  Model Fit Measures
> #  ---------------------------------------
> #    Model    Deviance    AIC     R²-McF
> #  ---------------------------------------
> #        1     4.97e-7    6.00     1.000
> #  ---------------------------------------
> #
> #
> #  MODEL SPECIFIC RESULTS
> #
> #  MODEL 1
> #
> #  Model Coefficients
> #  ------------------------------------------------------------
> #    Predictor    Estimate      SE          Z           p
> #  ------------------------------------------------------------
> #    Intercept    2974.73225    218237.2      0.0136    0.989
> #    age            -0.00653       482.7    -1.35e-5    1.000
> #    bwt            -1.18532        87.0     -0.0136    0.989
> #  ------------------------------------------------------------
> #    Note. Estimates represent the log odds of "low = 1"
> #    vs. "low = 0"
> #
> #
> 
> 
> 
> 
> cleanEx()
> nameEx("logRegMulti")
> ### * logRegMulti
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: logRegMulti
> ### Title: Multinomial Logistic Regression
> ### Aliases: logRegMulti
> 
> ### ** Examples
> 
> data('birthwt', package='MASS')
> 
> dat <- data.frame(
+             race = factor(birthwt$race),
+             age = birthwt$age,
+             low = factor(birthwt$low))
> 
> logRegMulti(data = dat, dep = race,
+             covs = age, factors = low,
+             blocks = list(list("age", "low")),
+             refLevels = list(
+                 list(var="race", ref="1"),
+                 list(var="low", ref="0")))

 MULTINOMIAL LOGISTIC REGRESSION

 Model Fit Measures                              
 ─────────────────────────────────────────────── 
   Model    Deviance    AIC         R²-McF       
 ─────────────────────────────────────────────── 
       1    359.7993    371.7993    0.03325426   
 ─────────────────────────────────────────────── 


 MODEL SPECIFIC RESULTS

 MODEL 1

 Model Coefficients - race                                                      
 ────────────────────────────────────────────────────────────────────────────── 
   race     Predictor    Estimate       SE            Z             p           
 ────────────────────────────────────────────────────────────────────────────── 
   2 - 1    Intercept     0.81550105    1.11864701     0.7290066    0.4659976   
            age          -0.10381700    0.04872007    -2.1308877    0.0330984   
            low:                                                                
            1 – 0         0.75268552    0.47002014     1.6013899    0.1092906   
   3 - 1    Intercept     1.01231779    0.77978831     1.2981957    0.1942201   
            age          -0.06630919    0.03239427    -2.0469418    0.0406638   
            low:                                                                
            1 – 0         0.56769385    0.35224546     1.6116428    0.1070397   
 ────────────────────────────────────────────────────────────────────────────── 

> 
> #
> #  MULTINOMIAL LOGISTIC REGRESSION
> #
> #  Model Fit Measures
> #  --------------------------------------
> #    Model    Deviance    AIC    R²-McF
> #  --------------------------------------
> #        1         360    372    0.0333
> #  --------------------------------------
> #
> #
> #  MODEL SPECIFIC RESULTS
> #
> #  MODEL 1
> #
> #  Model Coefficients
> #  ---------------------------------------------------------------
> #    race     Predictor    Estimate    SE        Z         p
> #  ---------------------------------------------------------------
> #    2 - 1    Intercept      0.8155    1.1186     0.729    0.466
> #             age           -0.1038    0.0487    -2.131    0.033
> #             low:
> #             1 – 0          0.7527    0.4700     1.601    0.109
> #    3 - 1    Intercept      1.0123    0.7798     1.298    0.194
> #             age           -0.0663    0.0324    -2.047    0.041
> #             low:
> #             1 – 0          0.5677    0.3522     1.612    0.107
> #  ---------------------------------------------------------------
> #
> #
> 
> 
> 
> 
> cleanEx()
> nameEx("logRegOrd")
> ### * logRegOrd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: logRegOrd
> ### Title: Ordinal Logistic Regression
> ### Aliases: logRegOrd
> 
> ### ** Examples
> 
> set.seed(1337)
> 
> y <- factor(sample(1:3, 100, replace = TRUE))
> x1 <- rnorm(100)
> x2 <- rnorm(100)
> 
> df <- data.frame(y=y, x1=x1, x2=x2)
> 
> logRegOrd(data = df, dep = y,
+           covs = vars(x1, x2),
+           blocks = list(list("x1", "x2")))
Waiting for profiling to be done...
Waiting for profiling to be done...

 ORDINAL LOGISTIC REGRESSION

 Model Fit Measures                               
 ──────────────────────────────────────────────── 
   Model    Deviance    AIC         R²-McF        
 ──────────────────────────────────────────────── 
       1    215.4578    223.4578    0.009428048   
 ──────────────────────────────────────────────── 
   Note. The dependent variable 'y' has the
   following order: 1 | 2 | 3


 MODEL SPECIFIC RESULTS

 MODEL 1

 Model Coefficients - y                                              
 ─────────────────────────────────────────────────────────────────── 
   Predictor    Estimate      SE           Z             p           
 ─────────────────────────────────────────────────────────────────── 
   x1           -0.1806580    0.1784144    -1.0125751    0.3112632   
   x2           -0.1631438    0.1853701    -0.8800980    0.3788062   
 ─────────────────────────────────────────────────────────────────── 

> 
> #
> #  ORDINAL LOGISTIC REGRESSION
> #
> #  Model Fit Measures
> #  ---------------------------------------
> #    Model    Deviance    AIC    R²-McF
> #  ---------------------------------------
> #        1         218    226    5.68e-4
> #  ---------------------------------------
> #
> #
> #  MODEL SPECIFIC RESULTS
> #
> #  MODEL 1
> #
> #  Model Coefficients
> #  ----------------------------------------------------
> #    Predictor    Estimate    SE       Z        p
> #  ----------------------------------------------------
> #    x1             0.0579    0.193    0.300    0.764
> #    x2             0.0330    0.172    0.192    0.848
> #  ----------------------------------------------------
> #
> #
> 
> 
> 
> 
> cleanEx()
> nameEx("mancova")
> ### * mancova
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mancova
> ### Title: MANCOVA
> ### Aliases: mancova
> 
> ### ** Examples
> 
> data('iris')
> 
> mancova(data = iris,
+     deps = vars(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width),
+     factors = Species)

 MANCOVA

 Multivariate Tests                                                                      
 ─────────────────────────────────────────────────────────────────────────────────────── 
                                    value         F           df1    df2    p            
 ─────────────────────────────────────────────────────────────────────────────────────── 
   Species    Pillai's Trace          1.191899    53.46649      8    290    < .0000001   
              Wilks' Lambda         0.02343863    199.1453      8    288    < .0000001   
              Hotelling's Trace       32.47732    580.5321      8    286    < .0000001   
              Roy's Largest Root      32.19193    1166.957      4    145    < .0000001   
 ─────────────────────────────────────────────────────────────────────────────────────── 


 Univariate Tests                                                                                         
 ──────────────────────────────────────────────────────────────────────────────────────────────────────── 
                Dependent Variable    Sum of Squares    df     Mean Square     F             p            
 ──────────────────────────────────────────────────────────────────────────────────────────────────────── 
   Species      Sepal.Length               63.212133      2     31.60606667     119.26450    < .0000001   
                Sepal.Width                11.344933      2      5.67246667      49.16004    < .0000001   
                Petal.Length              437.102800      2    218.55140000    1180.16118    < .0000001   
                Petal.Width                80.413333      2     40.20666667     960.00715    < .0000001   
   Residuals    Sepal.Length               38.956200    147      0.26500816                               
                Sepal.Width                16.962000    147      0.11538776                               
                Petal.Length               27.222600    147      0.18518776                               
                Petal.Width                 6.156600    147      0.04188163                               
 ──────────────────────────────────────────────────────────────────────────────────────────────────────── 

> 
> #
> #  MANCOVA
> #
> #  Multivariate Tests
> #  ---------------------------------------------------------------------------
> #                                     value     F       df1    df2    p
> #  ---------------------------------------------------------------------------
> #    Species    Pillai's Trace          1.19    53.5      8    290    < .001
> #               Wilks' Lambda         0.0234     199      8    288    < .001
> #               Hotelling's Trace       32.5     581      8    286    < .001
> #               Roy's Largest Root      32.2    1167      4    145    < .001
> #  ---------------------------------------------------------------------------
> #
> #
> #  Univariate Tests
> #  -----------------------------------------------------------------------------------------------
> #                 Dependent Variable    Sum of Squares    df     Mean Square    F         p
> #  -----------------------------------------------------------------------------------------------
> #    Species      Sepal.Length                   63.21      2        31.6061     119.3    < .001
> #                 Sepal.Width                    11.34      2         5.6725      49.2    < .001
> #                 Petal.Length                  437.10      2       218.5514    1180.2    < .001
> #                 Petal.Width                    80.41      2        40.2067     960.0    < .001
> #    Residuals    Sepal.Length                   38.96    147         0.2650
> #                 Sepal.Width                    16.96    147         0.1154
> #                 Petal.Length                   27.22    147         0.1852
> #                 Petal.Width                     6.16    147         0.0419
> #  -----------------------------------------------------------------------------------------------
> #
> 
> 
> 
> 
> cleanEx()
> nameEx("pca")
> ### * pca
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pca
> ### Title: Principal Component Analysis
> ### Aliases: pca
> 
> ### ** Examples
> 
> data('iris')
> 
> pca(iris, vars = vars(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width))

 PRINCIPAL COMPONENT ANALYSIS

 Component Loadings                           
 ──────────────────────────────────────────── 
                   1             Uniqueness   
 ──────────────────────────────────────────── 
   Sepal.Length     0.8901688    0.20759957   
   Sepal.Width     -0.4601427    0.78826869   
   Petal.Length     0.9915552    0.01681832   
   Petal.Width      0.9649790    0.06881561   
 ──────────────────────────────────────────── 
   Note. 'varimax' rotation was used

> 
> #
> #  PRINCIPAL COMPONENT ANALYSIS
> #
> #  Component Loadings
> #  ----------------------------------------
> #                    1         Uniqueness
> #  ----------------------------------------
> #    Sepal.Length     0.890        0.2076
> #    Sepal.Width     -0.460        0.7883
> #    Petal.Length     0.992        0.0168
> #    Petal.Width      0.965        0.0688
> #  ----------------------------------------
> #    Note. 'varimax' rotation was used
> #
> 
> 
> 
> 
> cleanEx()
> nameEx("propTest2")
> ### * propTest2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: propTest2
> ### Title: Proportion Test (2 Outcomes)
> ### Aliases: propTest2
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("propTestN")
> ### * propTestN
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: propTestN
> ### Title: Proportion Test (N Outcomes)
> ### Aliases: propTestN
> 
> ### ** Examples
> 
> data('HairEyeColor')
> dat <- as.data.frame(HairEyeColor)
> 
> propTestN(formula = Freq ~ Eye, data = dat, ratio = c(1,1,1,1))

 PROPORTION TEST (N OUTCOMES)

 Proportions - Eye                
 ──────────────────────────────── 
   Level    Count    Proportion   
 ──────────────────────────────── 
   Brown      220     0.3716216   
   Blue       215     0.3631757   
   Hazel       93     0.1570946   
   Green       64     0.1081081   
 ──────────────────────────────── 


 χ² Goodness of Fit               
 ──────────────────────────────── 
   χ²          df    p            
 ──────────────────────────────── 
   133.4730     3    < .0000001   
 ──────────────────────────────── 

> 
> #
> #  PROPORTION TEST (N OUTCOMES)
> #
> #  Proportions
> #  --------------------------------
> #    Level    Count    Proportion
> #  --------------------------------
> #    Brown      220         0.372
> #    Blue       215         0.363
> #    Hazel       93         0.157
> #    Green       64         0.108
> #  --------------------------------
> #
> #
> #  X² Goodness of Fit
> #  -----------------------
> #    X²     df    p
> #  -----------------------
> #    133     3    < .001
> #  -----------------------
> #
> 
> 
> 
> 
> cleanEx()
> nameEx("reliability")
> ### * reliability
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reliability
> ### Title: Reliability Analysis
> ### Aliases: reliability
> 
> ### ** Examples
> 
> data('iris')
> 
> reliability(iris, vars = c('Sepal.Length', 'Sepal.Width', 'Petal.Length', 'Petal.Width'),
+             omegaScale = TRUE)

 RELIABILITY ANALYSIS

 Scale Reliability Statistics              
 ───────────────────────────────────────── 
            Cronbach's α    McDonald's ω   
 ───────────────────────────────────────── 
   scale       0.7084772       0.8352537   
 ───────────────────────────────────────── 
   Note. item 'Sepal.Width' correlates
   negatively with the total scale and
   probably should be reversed

> 
> #
> #  RELIABILITY ANALYSIS
> #
> #  Scale Reliability Statistics
> #  -----------------------------------------
> #             Cronbach's alpha    McDonald's omega
> #  -----------------------------------------
> #    scale           0.708           0.848
> #  -----------------------------------------
> #
> 
> 
> 
> 
> cleanEx()
> nameEx("ttestIS")
> ### * ttestIS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ttestIS
> ### Title: Independent Samples T-Test
> ### Aliases: ttestIS
> 
> ### ** Examples
> 
> data('ToothGrowth')
> 
> ttestIS(formula = len ~ supp, data = ToothGrowth)

 INDEPENDENT SAMPLES T-TEST

 Independent Samples T-Test                                   
 ──────────────────────────────────────────────────────────── 
                         Statistic    df          p           
 ──────────────────────────────────────────────────────────── 
   len    Student's t     1.915268    58.00000    0.0603934   
 ──────────────────────────────────────────────────────────── 
   Note. Hₐ μ <sub>OJ</sub> ≠ μ <sub>VC</sub>

> 
> #
> #  INDEPENDENT SAMPLES T-TEST
> #
> #  Independent Samples T-Test
> #  ----------------------------------------------------
> #                          statistic    df      p
> #  ----------------------------------------------------
> #    len    Student's t         1.92    58.0    0.060
> #  ----------------------------------------------------
> #
> 
> 
> 
> 
> cleanEx()
> nameEx("ttestOneS")
> ### * ttestOneS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ttestOneS
> ### Title: One Sample T-Test
> ### Aliases: ttestOneS
> 
> ### ** Examples
> 
> data('ToothGrowth')
> 
> ttestOneS(ToothGrowth, vars = vars(len, dose))

 ONE SAMPLE T-TEST

 One Sample T-Test                                              
 ────────────────────────────────────────────────────────────── 
                          Statistic    df          p            
 ────────────────────────────────────────────────────────────── 
   len     Student's t     19.05105    59.00000    < .0000001   
   dose    Student's t     14.37011    59.00000    < .0000001   
 ────────────────────────────────────────────────────────────── 
   Note. Hₐ μ ≠ 0

> 
> #
> #  ONE SAMPLE T-TEST
> #
> #  One Sample T-Test
> #  ------------------------------------------------------
> #                           statistic    df      p
> #  ------------------------------------------------------
> #    len     Student's t         19.1    59.0    < .001
> #    dose    Student's t         14.4    59.0    < .001
> #  ------------------------------------------------------
> #
> 
> 
> 
> 
> cleanEx()
> nameEx("ttestPS")
> ### * ttestPS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ttestPS
> ### Title: Paired Samples T-Test
> ### Aliases: ttestPS
> 
> ### ** Examples
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  4.336 0.249 4.868 0.227 0.148 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
