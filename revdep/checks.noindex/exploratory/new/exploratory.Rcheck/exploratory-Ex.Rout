
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "exploratory"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('exploratory')
Package attached: exploratory v0.3.31 (same as the most recent version available through GitHub).
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("cohen_d_from_cohen_textbook")
> ### * cohen_d_from_cohen_textbook
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cohen_d_from_cohen_textbook
> ### Title: Cohen's d from Jacob Cohen's textbook (1988)
> ### Aliases: cohen_d_from_cohen_textbook
> 
> ### ** Examples
> 
> cohen_d_from_cohen_textbook(1:10, 3:12)
[1] -0.6605783
> cohen_d_from_cohen_textbook(
+   data = mtcars, iv_name = "vs", dv_name = "mpg"
+ )
[1] -1.733415
> 
> 
> 
> cleanEx()
> nameEx("compare_groups")
> ### * compare_groups
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compare_groups
> ### Title: Compare groups
> ### Aliases: compare_groups
> 
> ### ** Examples
> 
> compare_groups(data = iris, iv_name = "Species", dv_name = "Sepal.Length")
$histogram

$desc_stats
      Species  n mean    sd median min max     se ci_95_ll ci_95_ul pi_95_ll
1:     setosa 50 5.01 0.352    5.0 4.3 5.8 0.0498     4.91     5.11     4.30
2: versicolor 50 5.94 0.516    5.9 4.9 7.0 0.0730     5.79     6.08     4.90
3:  virginica 50 6.59 0.636    6.5 4.9 7.9 0.0899     6.41     6.77     5.31
   pi_95_ul skewness kurtosis
1:     5.71    0.120  -0.2530
2:     6.97    0.105  -0.5330
3:     7.87    0.118   0.0329

$pairwise
      group_1    group_2 group_1_n group_2_n group_1_mean group_2_mean cohen_d
1:     setosa versicolor        50        50         5.01         5.94   -2.10
2:     setosa  virginica        50        50         5.01         6.59   -3.08
3: versicolor  virginica        50        50         5.94         6.59   -1.13
   t_test_p_value bonferroni_signif_for_t_test mann_whitney_p_value
1:         < .001                          Yes               < .001
2:         < .001                          Yes               < .001
3:         < .001                          Yes               < .001
   bonferroni_signif_for_mann_whitney
1:                                Yes
2:                                Yes
3:                                Yes

> 
> 
> 
> cleanEx()
> nameEx("desc_stats")
> ### * desc_stats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: desc_stats
> ### Title: Descriptive statistics
> ### Aliases: desc_stats
> 
> ### ** Examples
> 
> desc_stats(1:100)
     n mean sd median min max se_of_mean ci_95_ll ci_95_ul pi_95_ll pi_95_ul
1: 100 50.5 29   50.5   1 100        2.9     44.7     56.3    -7.07      108
   skewness kurtosis
1: 4.58e-17     -1.2

         n       mean         sd     median        min        max se_of_mean 
  1.00e+02   5.05e+01   2.90e+01   5.05e+01   1.00e+00   1.00e+02   2.90e+00 
  ci_95_ll   ci_95_ul   pi_95_ll   pi_95_ul   skewness   kurtosis 
  4.47e+01   5.63e+01  -7.07e+00   1.08e+02   4.58e-17  -1.20e+00 
> desc_stats(1:100, ci = TRUE, pi = TRUE, sigfigs = 2)
     n mean sd median min max se_of_mean ci_95_ll ci_95_ul pi_95_ll pi_95_ul
1: 100   50 29     50   1 100        2.9       45       56     -7.1      110
   skewness kurtosis
1:  4.6e-17     -1.2

         n       mean         sd     median        min        max se_of_mean 
   1.0e+02    5.0e+01    2.9e+01    5.0e+01    1.0e+00    1.0e+02    2.9e+00 
  ci_95_ll   ci_95_ul   pi_95_ll   pi_95_ul   skewness   kurtosis 
   4.5e+01    5.6e+01   -7.1e+00    1.1e+02    4.6e-17   -1.2e+00 
> desc_stats(c(1:100, NA))

1 observation(s) were removed due to missing values.

     n mean sd median min max se_of_mean ci_95_ll ci_95_ul pi_95_ll pi_95_ul
1: 100 50.5 29   50.5   1 100        2.9     44.7     56.3    -7.07      108
   skewness kurtosis
1: 4.58e-17     -1.2

         n       mean         sd     median        min        max se_of_mean 
  1.00e+02   5.05e+01   2.90e+01   5.05e+01   1.00e+00   1.00e+02   2.90e+00 
  ci_95_ll   ci_95_ul   pi_95_ll   pi_95_ul   skewness   kurtosis 
  4.47e+01   5.63e+01  -7.07e+00   1.08e+02   4.58e-17  -1.20e+00 
> desc_stats(vector = c(1:100, NA), output_type = "dt")

1 observation(s) were removed due to missing values.

     n mean sd median min max se_of_mean ci_95_ll ci_95_ul pi_95_ll pi_95_ul
1: 100 50.5 29   50.5   1 100        2.9     44.7     56.3    -7.07      108
   skewness kurtosis
1: 4.58e-17     -1.2

> 
> 
> 
> cleanEx()
> nameEx("desc_stats_by_group")
> ### * desc_stats_by_group
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: desc_stats_by_group
> ### Title: Descriptive statistics by group
> ### Aliases: desc_stats_by_group
> 
> ### ** Examples
> 
> desc_stats_by_group(data = mtcars, var_for_stats = "mpg",
+ grouping_vars = c("vs", "am"))
   vs am  n     mean       sd median  min  max        se ci_95_ll ci_95_ul
1:  0  0 12 15.05000 2.774396  15.20 10.4 19.2 0.8008991 13.28723 16.81277
2:  0  1  6 19.75000 4.008865  20.35 15.0 26.0 1.6366124 15.54295 23.95705
3:  1  0  7 20.74286 2.471071  21.40 17.8 24.4 0.9339769 18.45750 23.02822
4:  1  1  7 28.37143 4.757701  30.40 21.4 33.9 1.7982418 23.97129 32.77157
    pi_95_ll pi_95_ul   skewness    kurtosis
1:  8.943596 21.15640 -0.3722170 -0.18258083
2:  9.444884 30.05512  0.3690020 -0.06173685
3: 14.696365 26.78935  0.1657423 -1.31025487
4: 16.729755 40.01310 -0.5675077 -1.24827552
> 
> 
> 
> cleanEx()
> nameEx("exploratory")
> ### * exploratory
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: exploratory
> ### Title: Launch the exploratory analysis tool
> ### Aliases: exploratory
> 
> ### ** Examples
> 
> if (interactive()) {exploratory(data = mtcars)}
> 
> 
> 
> cleanEx()
> nameEx("histogram")
> ### * histogram
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: histogram
> ### Title: Histogram
> ### Aliases: histogram
> 
> ### ** Examples
> 
> histogram(1:100)
> histogram(c(1:100, NA))

1 observation(s) were removed due to missing values.

> histogram(vector = mtcars[["mpg"]])
> histogram(vector = mtcars[["mpg"]], x_tick_marks = seq(10, 36, 2))
Manually setting tick marks will ignore the argument for number of bins.
> histogram(vector = mtcars[["mpg"]], x_tick_marks = seq(10, 36, 2),
+ y_tick_marks = seq(0, 8, 2), y_axis_title_vjust = 0.5,
+ y_axis_title = "Freq", x_axis_title = "Values of mpg")
Manually setting tick marks will ignore the argument for number of bins.
> 
> 
> 
> cleanEx()
> nameEx("histogram_by_group")
> ### * histogram_by_group
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: histogram_by_group
> ### Title: Histogram by group
> ### Aliases: histogram_by_group
> 
> ### ** Examples
> 
> histogram_by_group(data = mtcars, iv_name = "cyl", dv_name = "mpg")
> histogram_by_group(
+   data = mtcars, iv_name = "cyl", dv_name = "mpg",
+   order_of_groups_top_to_bot = c("8", "4"), number_of_bins = 10,
+   space_between_histograms = 0.5
+ )
> histogram_by_group(
+ data = iris, iv_name = "Species", dv_name = "Sepal.Length")
> 
> 
> 
> cleanEx()
> nameEx("id_across_datasets")
> ### * id_across_datasets
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: id_across_datasets
> ### Title: ID across datasets
> ### Aliases: id_across_datasets
> 
> ### ** Examples
> 
> # running the examples below requires importing the data.table package.
> prep(data.table)
The following package(s) were successfully loaded: data.table
> id_across_datasets(
+ dt_list = list(setDT(copy(mtcars)), setDT(copy(iris))))
The ID column with the name "id" was created in each of the 2 data sets.
   data_set start_id end_id
1:        1        1     32
2:        2       33    182
> id_across_datasets(
+ dt_list = list(setDT(copy(mtcars)), setDT(copy(iris)), setDT(copy(women))),
+ id_col_name = "newly_created_id_col",
+ id_col_position = "last")
The ID column with the name "newly_created_id_col" was created in each of the 3 data sets.
   data_set start_id end_id
1:        1        1     32
2:        2       33    182
3:        3      183    197
> 
> 
> 
> cleanEx()

detaching ‘package:data.table’

> nameEx("kurtosis")
> ### * kurtosis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: kurtosis
> ### Title: Kurtosis
> ### Aliases: kurtosis
> 
> ### ** Examples
> 
> # calculate the unbiased estimator (e.g., kurtosis value that
> # Excel 2016 will produce)
> exploratory::kurtosis(c(1, 2, 3, 4, 5, 10))
[1] 2.437732
> # calculate the biased estimator (e.g., kurtosis value that
> # R Package 'moments' will produce)
> exploratory::kurtosis(c(1, 2, 3, 4, 5, 10), unbiased = FALSE)
[1] 2.978651
> # compare with kurtosis from 'moments' package
> moments::kurtosis(c(1, 2, 3, 4, 5, 10))
[1] 2.978651
> 
> 
> 
> cleanEx()
> nameEx("mann_whitney")
> ### * mann_whitney
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mann_whitney
> ### Title: Mann-Whitney U Test (Also called Wilcoxon Rank-Sum Test)
> ### Aliases: mann_whitney
> 
> ### ** Examples
> 
> mann_whitney(data = iris, iv_name = "Species", dv_name = "Sepal.Length")
      group_1    group_2 group_1_median group_2_median
1:     setosa versicolor            5.0            5.9
2:     setosa  virginica            5.0            6.5
3: versicolor  virginica            5.9            6.5
   wilcoxon_rank_sum_p_value w_stat effect_size_r
1:                    < .001  168.5        -0.746
2:                    < .001   38.5        -0.836
3:                    < .001  526.0        -0.500
> 
> 
> 
> cleanEx()
> nameEx("mediation_analysis")
> ### * mediation_analysis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mediation_analysis
> ### Title: Mediation analysis
> ### Aliases: mediation_analysis
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("merge_data_table_list")
> ### * merge_data_table_list
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: merge_data_table_list
> ### Title: Merge a list of data tables
> ### Aliases: merge_data_table_list
> 
> ### ** Examples
> 
> data_1 <- data.table::data.table(
+ id_col = c(4, 2, 1, 3),
+ a = 3:6,
+ b = 5:8,
+ c = c("w", "x", "y", "z"))
> data_2 <- data.table::data.table(
+ id_col = c(1, 4, 99),
+ d = 6:8,
+ b = c("p", "q", "r"),
+ e = c(TRUE, FALSE, FALSE))
> data_3 <- data.table::data.table(
+ id_col = c(200, 3),
+ f = 11:12,
+ b = c(300, "abc"))
> merge_data_table_list(
+ dt_list = list(data_1, data_2, data_3), id = "id_col")
   id_col  a   b    c  d     e  f
1:      4  3   5    w  7 FALSE NA
2:      2  4   6    x NA    NA NA
3:      1  5   7    y  6  TRUE NA
4:      3  6   8    z NA    NA 12
5:     99 NA   r <NA>  8 FALSE NA
6:    200 NA 300 <NA> NA    NA 11
> 
> 
> 
> cleanEx()
> nameEx("merge_data_tables")
> ### * merge_data_tables
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: merge_data_tables
> ### Title: Merge data tables
> ### Aliases: merge_data_tables
> 
> ### ** Examples
> 
> data_1 <- data.table::data.table(
+ id_col = c(4, 2, 1, 3),
+ a = 3:6,
+ b = 5:8,
+ c = c("w", "x", "y", "z"))
> data_2 <- data.table::data.table(
+ id_col = c(1, 4, 99),
+ d = 6:8,
+ b = c("p", "q", "r"),
+ e = c(TRUE, FALSE, FALSE))
> merge_data_tables(dt1 = data_1, dt2 = data_2, id = "id_col")
   id_col  a b    c  d     e
1:      4  3 5    w  7 FALSE
2:      2  4 6    x NA    NA
3:      1  5 7    y  6  TRUE
4:      3  6 8    z NA    NA
5:     99 NA r <NA>  8 FALSE
> 
> 
> 
> cleanEx()
> nameEx("multiple_regression")
> ### * multiple_regression
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: multiple_regression
> ### Title: Summarize multiple regression results in a data.table
> ### Aliases: multiple_regression
> 
> ### ** Examples
> 
> multiple_regression(data = mtcars, formula = mpg ~ gear * cyl)
                 variable estimate    se std_beta  t_stat p_value
 1:           (Intercept)     17.2  14.6     <NA>    1.18    .249
 2:                  gear     5.14  3.63    0.629    1.41    .168
 3:                   cyl   -0.179  2.05  -0.0531 -0.0877    .931
 4:              gear:cyl   -0.672 0.527   -0.695   -1.27    .213
 5:                                                              
 6:      R-squared: 0.746                                        
 7: Adj. R-squared: 0.719                                        
 8:       F(3, 28) = 27.4                                        
 9:        Model p < .001                                        
10:                N = 32                                        
11:               DV: mpg                                        
> 
> 
> 
> cleanEx()
> nameEx("order_rows_specifically_in_dt")
> ### * order_rows_specifically_in_dt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: order_rows_specifically_in_dt
> ### Title: Order rows specifically in a data table
> ### Aliases: order_rows_specifically_in_dt
> 
> ### ** Examples
> 
> order_rows_specifically_in_dt(mtcars, "carb", c(3, 2, 1, 4, 8, 6))
     mpg cyl  disp  hp drat    wt  qsec vs am gear carb
 1: 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
 2: 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
 3: 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
 4: 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
 5: 24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
 6: 22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
 7: 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
 8: 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
 9: 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
10: 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
11: 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
12: 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
13: 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2
14: 22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
15: 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
16: 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
17: 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
18: 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
19: 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
20: 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
21: 21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
22: 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
23: 14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
24: 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
25: 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
26: 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
27: 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
28: 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
29: 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
30: 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
31: 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
32: 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
     mpg cyl  disp  hp drat    wt  qsec vs am gear carb
> 
> 
> 
> cleanEx()
> nameEx("prep")
> ### * prep
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: prep
> ### Title: Prepare package(s) for use
> ### Aliases: prep
> 
> ### ** Examples
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("pretty_round_p_value")
> ### * pretty_round_p_value
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pretty_round_p_value
> ### Title: Pretty round p-value
> ### Aliases: pretty_round_p_value
> 
> ### ** Examples
> 
> pretty_round_p_value(
+   p_value_vector = 0.049,
+   round_digits_after_decimal = 2, include_p_equals = FALSE
+ )
[1] ".05"
> pretty_round_p_value(c(0.0015, 0.0014), include_p_equals = TRUE)
[1] "p = .002" "p = .001"
> 
> 
> 
> cleanEx()
> nameEx("read_csv")
> ### * read_csv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read_csv
> ### Title: Read a csv file
> ### Aliases: read_csv
> 
> ### ** Examples
> 
> ## Not run: 
> ##D mydata <- read_csv("myfile")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("scatterplot")
> ### * scatterplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: scatterplot
> ### Title: Scatterplot
> ### Aliases: scatterplot
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("se_of_mean")
> ### * se_of_mean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: se_of_mean
> ### Title: Standard error of the mean
> ### Aliases: se_of_mean
> 
> ### ** Examples
> 
> se_of_mean(c(1:10, NA))
1 observations were removed due to missing values.
[1] 0.9574271
> 
> 
> 
> cleanEx()
> nameEx("skewness")
> ### * skewness
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: skewness
> ### Title: Skewness
> ### Aliases: skewness
> 
> ### ** Examples
> 
> # calculate the adjusted Fisher-Pearson standardized moment coefficient
> exploratory::skewness(c(1, 2, 3, 4, 5, 10))
[1] 1.43959
> # calculate the traditional Fisher-Pearson coefficient of skewness
> exploratory::skewness(c(1, 2, 3, 4, 5, 10), type = "traditional")
[1] 1.051328
> # compare with skewness from 'moments' package
> moments::skewness(c(1, 2, 3, 4, 5, 10))
[1] 1.051328
> # calculate the Pearson 2 skewness coefficient
> exploratory::skewness(c(1, 2, 3, 4, 5, 10), type = "pearson_2")
[1] 0.62725
> 
> 
> 
> cleanEx()
> nameEx("t_test_pairwise")
> ### * t_test_pairwise
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: t_test_pairwise
> ### Title: t test, pairwise
> ### Aliases: t_test_pairwise
> 
> ### ** Examples
> 
> t_test_pairwise(data = iris, iv_name = "Species", dv_name = "Sepal.Length")
      group_1    group_2 group_1_n group_2_n group_1_mean group_2_mean cohen_d
1:     setosa versicolor        50        50         5.01         5.94   -2.10
2:     setosa  virginica        50        50         5.01         6.59   -3.08
3: versicolor  virginica        50        50         5.94         6.59   -1.13
   t_test_p_value bonferroni_signif_for_t_test mann_whitney_p_value
1:         < .001                          Yes               < .001
2:         < .001                          Yes               < .001
3:         < .001                          Yes               < .001
   bonferroni_signif_for_mann_whitney
1:                                Yes
2:                                Yes
3:                                Yes
> t_test_pairwise(data = iris, iv_name = "Species",
+ dv_name = "Sepal.Length", t_test_stats = TRUE, sd = TRUE)
      group_1    group_2 group_1_n group_2_n group_1_mean group_2_mean
1:     setosa versicolor        50        50         5.01         5.94
2:     setosa  virginica        50        50         5.01         6.59
3: versicolor  virginica        50        50         5.94         6.59
   group_1_sd group_2_sd t_test_df t_test_stat t_test_p_value
1:      0.352      0.516      86.5      -10.50         < .001
2:      0.352      0.636      76.5      -15.40         < .001
3:      0.516      0.636      94.0       -5.63         < .001
   bonferroni_signif_for_t_test cohen_d t_test_p_value
1:                          Yes   -2.10         < .001
2:                          Yes   -3.08         < .001
3:                          Yes   -1.13         < .001
   bonferroni_signif_for_t_test mann_whitney_p_value
1:                          Yes               < .001
2:                          Yes               < .001
3:                          Yes               < .001
   bonferroni_signif_for_mann_whitney
1:                                Yes
2:                                Yes
3:                                Yes
> t_test_pairwise(data = iris, iv_name = "Species", dv_name = "Sepal.Length",
+ mann_whitney = FALSE)
      group_1    group_2 group_1_n group_2_n group_1_mean group_2_mean cohen_d
1:     setosa versicolor        50        50         5.01         5.94   -2.10
2:     setosa  virginica        50        50         5.01         6.59   -3.08
3: versicolor  virginica        50        50         5.94         6.59   -1.13
   t_test_p_value bonferroni_signif_for_t_test
1:         < .001                          Yes
2:         < .001                          Yes
3:         < .001                          Yes
> 
> 
> 
> cleanEx()
> nameEx("tabulate_vector")
> ### * tabulate_vector
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tabulate_vector
> ### Title: Tabulate vector
> ### Aliases: tabulate_vector
> 
> ### ** Examples
> 
> tabulate_vector(c("a", "b", "b", "c", "c", "c", NA))
      value count percent
1:        c     3      50
2:        b     2      33
3:        a     1      17
4: ..Total:     6     100
> tabulate_vector(c("a", "b", "b", "c", "c", "c", NA),
+   sort_by_increasing_count = TRUE
+ )
      value count percent
1:        a     1      17
2:        b     2      33
3:        c     3      50
4: ..Total:     6     100
> tabulate_vector(c("a", "b", "b", "c", "c", "c", NA),
+   sort_by_decreasing_value = TRUE
+ )
      value count percent
1:        c     3      50
2:        b     2      33
3:        a     1      17
4: ..Total:     6     100
> tabulate_vector(c("a", "b", "b", "c", "c", "c", NA),
+   sort_by_increasing_value = TRUE
+ )
      value count percent
1:        a     1      17
2:        b     2      33
3:        c     3      50
4: ..Total:     6     100
> tabulate_vector(c("a", "b", "b", "c", "c", "c", NA),
+   sigfigs = 4
+ )
      value count percent
1:        c     3   50.00
2:        b     2   33.33
3:        a     1   16.67
4: ..Total:     6  100.00
> tabulate_vector(c("a", "b", "b", "c", "c", "c", NA),
+   round_digits_after_decimal = 1
+ )
      value count percent
1:        c     3    50.0
2:        b     2    33.3
3:        a     1    16.7
4: ..Total:     6   100.0
> tabulate_vector(c("a", "b", "b", "c", "c", "c", NA),
+   output_type = "df"
+ )
     value count percent
1        c     3      50
2        b     2      33
3        a     1      17
4 ..Total:     6     100
> 
> 
> 
> cleanEx()
> nameEx("theme_kim")
> ### * theme_kim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: theme_kim
> ### Title: Theme Kim
> ### Aliases: theme_kim
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("update_exploratory")
> ### * update_exploratory
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: update_exploratory
> ### Title: Update the package 'exploratory'
> ### Aliases: update_exploratory
> 
> ### ** Examples
> 
> ## Not run: 
> ##D if (interactive()) {update_exploratory()}
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("wilcoxon_rank_sum_test")
> ### * wilcoxon_rank_sum_test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: wilcoxon_rank_sum_test
> ### Title: Wilcoxon Rank-Sum Test (Also called the Mann-Whitney U Test)
> ### Aliases: wilcoxon_rank_sum_test
> 
> ### ** Examples
> 
> wilcoxon_rank_sum_test(
+ data = iris, iv_name = "Species", dv_name = "Sepal.Length")
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.395 0.068 1.64 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
