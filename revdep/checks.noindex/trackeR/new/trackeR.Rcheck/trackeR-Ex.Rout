
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "trackeR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('trackeR')
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric


Attaching package: ‘trackeR’

The following object is masked from ‘package:base’:

    append

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Wprime")
> ### * Wprime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Wprime
> ### Title: W': work capacity above critical power/speed.
> ### Aliases: Wprime trackeRWprime Based on the critical power model for
> ###   cycling (Monod and Scherrer, 1965), W' (read W prime) describes
> ###   finite work capacity above (Skiba et al., 2012). While is depleted
> ###   during exercise power, it replenished below power. Thus, of interest
> ###   how much this has been not yet replinished again, named expended, or
> ###   still available, balance. This principal applied to runners by
> ###   subsituting with speed speed, respectively
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data('runs', package = 'trackeR')
> ##D wexp <- Wprime(runs, session = c(11,13), cp = 4, version = '2012')
> ##D plot(wexp)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("compute_breaks")
> ### * compute_breaks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compute_breaks
> ### Title: Compute a grid of breakpoints per variable from a 'trackeRdata'
> ###   object.
> ### Aliases: compute_breaks
> 
> ### ** Examples
> 
> data("runs")
> compute_breaks(runs, what = c("speed", "heart_rate", "altitude"))
$speed
 [1]  0.0  2.2  4.4  6.6  8.8 11.0 13.2 15.4 17.6 19.8

$heart_rate
 [1]  56.0  75.3  94.6 113.9 133.2 152.5 171.8 191.1 210.4 229.7

$altitude
 [1] -59.0 -30.2  -1.4  27.4  56.2  85.0 113.8 142.6 171.4 200.2

> 
> 
> 
> cleanEx()
> nameEx("concentration_profile")
> ### * concentration_profile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: concentration_profile
> ### Title: Generic method for concentration profiles
> ### Aliases: concentration_profile concentrationProfile
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## Compute conecntration profiles from distribution profiles
> ##D data('run', package = 'trackeR')
> ##D dProfile <- distributionProfile(run, what = 'speed', grid = seq(0, 12.5, by = 0.05))
> ##D cProfile <- concentrationProfile(dProfile)
> ##D plot(cProfile, smooth = FALSE)
> ##D plot(cProfile)
> ##D 
> ##D ## And now directly from the 'trackeRdata' object, which is a
> ##D ## considerably faster if all that is needed are the concentration
> ##D ## profiles
> ##D cProfile <- concentrationProfile(runs, what = 'speed',
> ##D                                  limits = list(speed = c(0, 12.5)))
> ##D plot(cProfile, smooth = FALSE)
> ##D ridges(cProfile)
> ##D plot(cProfile, smooth = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("distribution_profile")
> ### * distribution_profile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: distribution_profile
> ### Title: Generate training distribution profiles.
> ### Aliases: distribution_profile distrProfile distributionProfile
> 
> ### ** Examples
> 
> data('run', package = 'trackeR')
> dProfile <- distribution_profile(run, what = c("speed", "cadence_running"))
> ## Not run: 
> ##D plot(dProfile, smooth = FALSE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("funPCA")
> ### * funPCA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: funPCA
> ### Title: Functional principal components analysis of distribution or
> ###   concentration profiles.
> ### Aliases: funPCA funPCA.distrProfile funPCA.conProfile
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data('runs', package = 'trackeR')
> ##D dp <- distributionProfile(runs, what = 'speed')
> ##D dp.pca <- funPCA(dp, what = 'speed', nharm = 4)
> ##D ## 1st harmonic  captures vast majority of the variation
> ##D plot(dp.pca, harm = 1)
> ##D ## time spent above speed = 0 is the characteristic distinguishing the profiles
> ##D sumRuns <- summary(runs)
> ##D plot(sumRuns$durationMoving, dp.pca$scores[,1])
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("leaflet_route")
> ### * leaflet_route
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: leaflet_route
> ### Title: Plot routes for training sessions
> ### Aliases: leaflet_route leafletRoute
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data('runs', package = 'trackeR')
> ##D leafletRoute(runs, session = 23:24)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plot.conProfile")
> ### * plot.conProfile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.conProfile
> ### Title: Plot concentration profiles.
> ### Aliases: plot.conProfile
> 
> ### ** Examples
> 
> data('runs', package = 'trackeR')
> dProfile <- distributionProfile(runs, session = 1:3, what = 'speed',
+                                 grid = seq(0, 12.5, by = 0.05))
> cProfile <- concentrationProfile(dProfile)
> ## Not run: 
> ##D plot(cProfile, smooth = FALSE)
> ##D plot(cProfile)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plot.distrProfile")
> ### * plot.distrProfile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.distrProfile
> ### Title: Plot distribution profiles.
> ### Aliases: plot.distrProfile
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data('runs', package = 'trackeR')
> ##D dProfile <- distribution_profile(runs, session = 1:2,
> ##D     what = "speed", grid = seq(0, 12.5, by = 0.05))
> ##D plot(dProfile, smooth = FALSE)
> ##D plot(dProfile, smooth = FALSE, multiple = TRUE)
> ##D plot(dProfile, multiple = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plot.trackeRWprime")
> ### * plot.trackeRWprime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.trackeRWprime
> ### Title: Plot W'.
> ### Aliases: plot.trackeRWprime
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data('runs', package = 'trackeR')
> ##D wexp <- Wprime(runs, session = 1:3, cp = 4, version = '2012')
> ##D plot(wexp, session = 1:2)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plot.trackeRdata")
> ### * plot.trackeRdata
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.trackeRdata
> ### Title: Plot training sessions in form of trackeRdata objects
> ### Aliases: plot.trackeRdata
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data('runs', package = 'trackeR')
> ##D ## plot heart rate and pace for the first 3 sessions
> ##D plot(runs, session = 1:3)
> ##D ## plot raw speed data for session 4
> ##D plot(runs, session = 4, what = "speed", threshold = FALSE, smooth = FALSE)
> ##D ## threshold speed variable
> ##D plot(runs, session = 4, what = "speed", threshold = TRUE, smooth = FALSE,
> ##D     variable = "speed", lower = 0, upper = 10)
> ##D ## and smooth (thresholding with default values)
> ##D plot(runs, session = 4, what = "speed", threshold = TRUE,
> ##D     smooth = TRUE, width = 15, parallel = FALSE)
> ##D #'
> ##D ## Speed and elevation gain
> ##D plot(runs, session = 2:10, what = c("speed", "cumulative_elevation_gain"), trend = FALSE)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("plot.trackeRdataSummary")
> ### * plot.trackeRdataSummary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.trackeRdataSummary
> ### Title: Plot an object of class 'trackeRdataSummary'.
> ### Aliases: plot.trackeRdataSummary
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data('runs', package = 'trackeR')
> ##D runSummary <- summary(runs)
> ##D plot(runSummary)
> ##D plot(runSummary, date = FALSE, group = 'total',
> ##D     what = c('distance', 'duration', 'avgSpeed'))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plot.trackeRdataZones")
> ### * plot.trackeRdataZones
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.trackeRdataZones
> ### Title: Plot training zones.
> ### Aliases: plot.trackeRdataZones
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data('run', package = 'trackeR')
> ##D runZones <- zones(run, what = 'speed', breaks = c(0, 2:6, 12.5))
> ##D plot(runZones, percent = FALSE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plot.trackeRfpca")
> ### * plot.trackeRfpca
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.trackeRfpca
> ### Title: Plot function for functional principal components analysis of
> ###   distribution and concentration profiles.
> ### Aliases: plot.trackeRfpca
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data('runs', package = 'trackeR')
> ##D dp <- distributionProfile(runs, what = 'speed')
> ##D dp.pca <- funPCA(dp, what = 'speed', nharm = 4)
> ##D ## 1st harmonic  captures vast majority of the variation
> ##D plot(dp.pca)
> ##D plot(dp.pca, harm = 1, pointplot = FALSE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plot_route")
> ### * plot_route
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_route
> ### Title: Plot routes for training sessions
> ### Aliases: plot_route plotRoute
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data('runs', package = 'trackeR')
> ##D plot_route(runs, session = 4, zoom = 13)
> ##D plot_route(runs, session = 4, zoom = 13, maptype = "terrain")
> ##D ## multiple sessions
> ##D plot_route(runs, session = c(1:4, 8:11))
> ##D ## different zoom level per panel
> ##D plot_route(runs, session = 6:7, zoom = c(13, 14))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("prettifyUnit")
> ### * prettifyUnit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: prettifyUnit
> ### Title: Returns 'pretty' units for use for plotting or printing
> ### Aliases: prettifyUnit prettifyUnits
> 
> ### ** Examples
> 
> prettifyUnit("m_per_s")
[1] "m/s"
> prettifyUnit("rev_per_min")
[1] "revolutions/min"
> prettifyUnits(c("rev_per_min", "ft_per_min"))
      rev_per_min        ft_per_min 
"revolutions/min"          "ft/min" 
> 
> 
> 
> 
> cleanEx()
> nameEx("profile2fd")
> ### * profile2fd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: profile2fd
> ### Title: Transform distribution and concentration profiles to functional
> ###   data objects of class fd.
> ### Aliases: profile2fd
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library('fda')
> ##D data('runs', package = 'trackeR')
> ##D dp <- distributionProfile(runs, what = 'speed')
> ##D dpFun <- profile2fd(dp, what = 'speed',
> ##D     fdnames = list('speed', 'sessions', 'time above threshold'))
> ##D dp.pca <- pca.fd(dpFun, nharm = 4)
> ##D ## 1st harmonic  captures vast majority of the variation
> ##D dp.pca$varprop
> ##D ## time spent above speed = 0 is the characteristic distinguishing the profiles
> ##D plot(dp.pca, harm = 1)
> ##D sumRuns <- summary(runs)
> ##D plot(sumRuns$durationMoving, dp.pca$scores[,1])
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("readX")
> ### * readX
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readX
> ### Title: Read a training file in tcx, gpx, db3 or Golden Cheetah's JSON
> ###   format
> ### Aliases: readX readTCX readGPX readDB3 readJSON
> 
> ### ** Examples
> 
> ## read raw data
> filepath <- system.file("extdata/tcx", "2013-06-08-090442.TCX.gz", package = "trackeR")
> run0 <- readTCX(file = filepath, timezone = "GMT")
> 
> ## turn into trackeRdata object
> units0 <- generate_units()
> run0 <- trackeRdata(run0, units = units0)
Warning in sanity_checks(dat = dat, silent = silent) :
  Observations with duplicated time stamps have been removed.
> 
> ## alternatively
> ## Not run: 
> ##D run0 <- read_container(filepath, type = "tcx", timezone = "GMT")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("read_container")
> ### * read_container
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read_container
> ### Title: Read a GPS container file.
> ### Aliases: read_container readContainer
> 
> ### ** Examples
> 
> filepath <- system.file("extdata/tcx", "2013-06-08-090442.TCX.gz", package = "trackeR")
> run <- read_container(filepath, type = "tcx", timezone = "GMT")
Warning in sanity_checks(dat = dat, silent = silent) :
  Observations with duplicated time stamps have been removed.
> 
> 
> 
> cleanEx()
> nameEx("read_directory")
> ### * read_directory
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read_directory
> ### Title: Read all supported container files from a supplied directory
> ### Aliases: read_directory readDirectory
> 
> ### ** Examples
> 
> ## Not run: 
> ##D filepath <- system.file("extdata/gpx", package = "trackeR")
> ##D gpx_files <- read_directory(filepath)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("ridges.conProfile")
> ### * ridges.conProfile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ridges.conProfile
> ### Title: Ridgeline plots for 'distrProfile' objects
> ### Aliases: ridges.conProfile
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D data('runs', package = 'trackeR')
> ##D dProfile <- distributionProfile(runs, what = c('speed', 'heart_rate'))
> ##D cProfile <- concentrationProfile(dProfile)
> ##D ridges(cProfile, what = "speed")
> ##D ridges(cProfile, what = "heart_rate")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("ridges.distrProfile")
> ### * ridges.distrProfile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ridges.distrProfile
> ### Title: Ridgeline plots for 'distrProfile' objects
> ### Aliases: ridges.distrProfile
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D data('runs', package = 'trackeR')
> ##D dProfile <- distribution_profile(runs, what = c("speed", "heart_rate"))
> ##D ridges(dProfile)
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("ridges.trackeRdata")
> ### * ridges.trackeRdata
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ridges.trackeRdata
> ### Title: Ridgeline plots for 'trackeRdata' objects
> ### Aliases: ridges.trackeRdata
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D data('runs', package = 'trackeR')
> ##D ridges(runs)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("smoother.trackeRdata")
> ### * smoother.trackeRdata
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: smoother.trackeRdata
> ### Title: Smoother for 'trackeRdata' objects.
> ### Aliases: smoother.trackeRdata
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data('run', package = 'trackeR')
> ##D ## unsmoothed speeds
> ##D plot(run, smooth = FALSE)
> ##D ## default smoothing
> ##D plot(run, smooth = TRUE)
> ##D ## smoothed with some non-default options
> ##D runS <- smoother(run, fun = 'median', width = 20, what = 'speed')
> ##D plot(runS, smooth = FALSE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("summary.trackeRdata")
> ### * summary.trackeRdata
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.trackeRdata
> ### Title: Summary of training sessions
> ### Aliases: summary.trackeRdata trackeRdataSummary
> 
> ### ** Examples
> 
> data('runs', package = 'trackeR')
> runSummary <- summary(runs, session = 1:2)
> ## print summary
> runSummary

 *** Session 1 : running ***

 Session times: 2013-06-01 12:32:15 - 2013-06-01 13:37:56 
 Distance: 14130.7 m 
 Duration: 65.68 mins 
 Moving time: 64.17 mins 
 Average speed: 3.59 m_per_s 
 Average speed moving: 3.67 m_per_s 
 Average pace (per 1 km): 4:38 min:sec
 Average pace moving (per 1 km): 4:32 min:sec
 Average cadence running: 88.66 steps_per_min 
 Average cadence cycling: NA rev_per_min 
 Average cadence running moving: 88.87 steps_per_min 
 Average cadence cycling moving: NA rev_per_min 
 Average power: NA W 
 Average power moving: NA W 
 Average heart rate: 141.11 bpm 
 Average heart rate moving: 141.13 bpm 
 Average heart rate resting: 136.76 bpm 
 Average temperature: NA C 
 Total elevation gain: 94.2 m 
 Work to rest ratio: 42.31 

 *** Session 2 : running ***

 Session times: 2013-06-02 01:23:43 - 2013-06-02 02:09:47 
 Distance: 9450.24 m 
 Duration: 46.07 mins 
 Moving time: 44.13 mins 
 Average speed: 3.42 m_per_s 
 Average speed moving: 3.57 m_per_s 
 Average pace (per 1 km): 4:52 min:sec
 Average pace moving (per 1 km): 4:40 min:sec
 Average cadence running: 88.21 steps_per_min 
 Average cadence cycling: NA rev_per_min 
 Average cadence running moving: 88.25 steps_per_min 
 Average cadence cycling moving: NA rev_per_min 
 Average power: NA W 
 Average power moving: NA W 
 Average heart rate: 139.48 bpm 
 Average heart rate moving: 139.44 bpm 
 Average heart rate resting: 141.16 bpm 
 Average temperature: NA C 
 Total elevation gain: 124.52 m 
 Work to rest ratio: 22.83 

 Moving thresholds: 2.0 (cycling) 1.0 (running) 0.5 (swimming) m_per_s 
 Unit reference sport: running 

> print(runSummary, digits = 3)

 *** Session 1 : running ***

 Session times: 2013-06-01 12:32:15 - 2013-06-01 13:37:56 
 Distance: 14130.7 m 
 Duration: 65.683 mins 
 Moving time: 64.167 mins 
 Average speed: 3.586 m_per_s 
 Average speed moving: 3.67 m_per_s 
 Average pace (per 1 km): 4:38 min:sec
 Average pace moving (per 1 km): 4:32 min:sec
 Average cadence running: 88.664 steps_per_min 
 Average cadence cycling: NA rev_per_min 
 Average cadence running moving: 88.874 steps_per_min 
 Average cadence cycling moving: NA rev_per_min 
 Average power: NA W 
 Average power moving: NA W 
 Average heart rate: 141.107 bpm 
 Average heart rate moving: 141.131 bpm 
 Average heart rate resting: 136.762 bpm 
 Average temperature: NA C 
 Total elevation gain: 94.196 m 
 Work to rest ratio: 42.308 

 *** Session 2 : running ***

 Session times: 2013-06-02 01:23:43 - 2013-06-02 02:09:47 
 Distance: 9450.237 m 
 Duration: 46.067 mins 
 Moving time: 44.133 mins 
 Average speed: 3.419 m_per_s 
 Average speed moving: 3.569 m_per_s 
 Average pace (per 1 km): 4:52 min:sec
 Average pace moving (per 1 km): 4:40 min:sec
 Average cadence running: 88.205 steps_per_min 
 Average cadence cycling: NA rev_per_min 
 Average cadence running moving: 88.252 steps_per_min 
 Average cadence cycling moving: NA rev_per_min 
 Average power: NA W 
 Average power moving: NA W 
 Average heart rate: 139.48 bpm 
 Average heart rate moving: 139.441 bpm 
 Average heart rate resting: 141.164 bpm 
 Average temperature: NA C 
 Total elevation gain: 124.522 m 
 Work to rest ratio: 22.828 

 Moving thresholds: 2.0 (cycling) 1.0 (running) 0.5 (swimming) m_per_s 
 Unit reference sport: running 

> ## Not run: 
> ##D ## change units
> ##D change_units(runSummary, variable = 'speed', unit = 'km_per_h')
> ##D ## plot summary
> ##D runSummaryFull <- summary(runs)
> ##D plot(runSummaryFull)
> ##D plot(runSummaryFull, group = c('total', 'moving'),
> ##D     what = c('avgSpeed', 'distance', 'duration', 'avgHeartRate', "total_elevation_gain"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("threshold.trackeRdata")
> ### * threshold.trackeRdata
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: threshold.trackeRdata
> ### Title: Thresholding for variables in 'trackeRdata' objects
> ### Aliases: threshold.trackeRdata threshold
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data('runs', package = 'trackeR')
> ##D plot(runs, session = 4, what = 'speed', threshold = FALSE)
> ##D runsT <- threshold(runs, variable = 'speed', lower = 0, upper = 12.5, sport = "running")
> ##D plot(runsT, session = 4, what = 'speed', threshold = FALSE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("timeline")
> ### * timeline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: timeline
> ### Title: Generic function for visualising the sessions on a time versus
> ###   date plot
> ### Aliases: timeline timeline.trackeRdata timeline.trackeRdataSummary
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data('runs', package = 'trackeR')
> ##D ## timeline plot applied on the \code{trackeRdata} object directly and with
> ##D ## inferred limits for the time axis
> ##D timeline(runs)
> ##D 
> ##D ## the same timeline plot applied on the \code{trackeRdataSummary} object
> ##D runSummary <- summary(runs)
> ##D timeline(runSummary, lims = c('00:01', '23:59'))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("trackeRdata")
> ### * trackeRdata
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: trackeRdata
> ### Title: Create a trackeRdata object
> ### Aliases: trackeRdata
> 
> ### ** Examples
> 
> ## read raw data
> filepath <- system.file('extdata/tcx/', '2013-06-08-090442.TCX.gz', package = 'trackeR')
> run0 <- readTCX(file = filepath, timezone = 'GMT')
> 
> ## turn into trackeRdata object
> units0 <- generate_units()
> run0 <- trackeRdata(run0, units = units0)
Warning in sanity_checks(dat = dat, silent = silent) :
  Observations with duplicated time stamps have been removed.
> 
> 
> 
> cleanEx()
> nameEx("zones")
> ### * zones
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: zones
> ### Title: Time spent in training zones.
> ### Aliases: zones
> 
> ### ** Examples
> 
> data('run', package = 'trackeR')
> runZones <- zones(run, what = 'speed', breaks = list(speed = c(0, 2:6, 12.5)))
> ## if breaks is a named list, argument 'what' can be left unspecified
> runZones <- zones(run, breaks = list(speed = c(0, 2:6, 12.5)))
> ## if only a single variable is to be evaluated, 'breaks' can also be a vector
> runZones <- zones(run, what = 'speed', breaks = c(0, 2:6, 12.5))
> plot(runZones)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.484 0.065 1.621 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
