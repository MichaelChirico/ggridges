
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ethnobotanyR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('ethnobotanyR')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("CIs")
> ### * CIs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CIs
> ### Title: Cultural Importance index (CI)
> ### Aliases: CIs
> ### Keywords: arith logic math methods misc survey
> 
> ### ** Examples
> 
> 
> #Use built-in ethnobotany data example
> CIs(ethnobotanydata)
  sp_name   CI
1    sp_c 2.60
2    sp_a 2.15
3    sp_d 2.15
4    sp_b 1.80
> 
> #Generate random dataset of three informants uses for four species
> 
> eb_data <- data.frame(replicate(10,sample(0:1,20,rep=TRUE)))
> names(eb_data) <- gsub(x = names(eb_data), pattern = "X", replacement = "Use_")  
> eb_data$informant <- sample(c('User_1', 'User_2', 'User_3'), 20, replace=TRUE)
> eb_data$sp_name <- sample(c('sp_1', 'sp_2', 'sp_3', 'sp_4'), 20, replace=TRUE)
> 
> CIs(eb_data)
  sp_name     CI
1    sp_4 11.000
2    sp_3  8.000
3    sp_1  7.667
4    sp_2  6.000
> 
> 
> 
> 
> cleanEx()
> nameEx("CVe")
> ### * CVe
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CVe
> ### Title: Cultural Value of ethnospecies (CVe)
> ### Aliases: CVe
> ### Keywords: arith logic math methods misc survey
> 
> ### ** Examples
> 
> 
> #Use built-in ethnobotany data example
> CVe(ethnobotanydata)
Joining with `by = join_by(sp_name)`
Joining with `by = join_by(sp_name)`
  sp_name   CVe
1    sp_c 1.768
2    sp_a 1.129
3    sp_d 1.032
4    sp_b 0.756
> 
> #Generate random dataset of three informants uses for four species
> 
> eb_data <- data.frame(replicate(10,sample(0:1,20,rep=TRUE)))
> names(eb_data) <- gsub(x = names(eb_data), pattern = "X", replacement = "Use_")
> eb_data$informant <- sample(c('User_1', 'User_2', 'User_3'), 20, replace=TRUE)
> eb_data$sp_name <- sample(c('sp_1', 'sp_2', 'sp_3', 'sp_4'), 20, replace=TRUE)
> 
> CVe(eb_data)
Joining with `by = join_by(sp_name)`
Joining with `by = join_by(sp_name)`
  sp_name    CVe
1    sp_4 22.000
2    sp_1 15.333
3    sp_3 10.667
4    sp_2  8.000
> 
> 
> 
> 
> cleanEx()
> nameEx("FCs")
> ### * FCs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: FCs
> ### Title: Frequency of Citation (FC)
> ### Aliases: FCs
> ### Keywords: arith logic math methods misc survey
> 
> ### ** Examples
> 
> 
> #Use built-in ethnobotany data example
> FCs(ethnobotanydata)
  sp_name FCs
1    sp_c  17
2    sp_a  15
3    sp_b  12
4    sp_d  12
> 
> #Generate random dataset of three informants uses for four species
> eb_data <- data.frame(replicate(10,sample(0:1,20,rep=TRUE)))
> names(eb_data) <- gsub(x = names(eb_data), pattern = "X", replacement = "Use_")  
> eb_data$informant<-sample(c('User_1', 'User_2', 'User_3'), 20, replace=TRUE)
> eb_data$sp_name<-sample(c('sp_1', 'sp_2', 'sp_3', 'sp_4'), 20, replace=TRUE)
> FCs(eb_data)
  sp_name FCs
1    sp_1   6
2    sp_4   6
3    sp_2   4
4    sp_3   4
> 
> 
> 
> 
> cleanEx()
> nameEx("FLs")
> ### * FLs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: FLs
> ### Title: Fidelity Level (FL)
> ### Aliases: FLs
> ### Keywords: arith logic math methods misc survey
> 
> ### ** Examples
> 
> 
> #Use built-in ethnobotany data example
> FLs(ethnobotanydata)
   sp_name Primary.use   FLs
1     sp_a       Use_2 53.33
2     sp_a       Use_3 60.00
3     sp_a       Use_5 33.33
4     sp_a       Use_6 46.67
5     sp_a       Use_8 40.00
6     sp_a       Use_9 33.33
7     sp_a      Use_10 20.00
8     sp_b       Use_1 50.00
9     sp_b       Use_3 41.67
10    sp_b       Use_4 33.33
11    sp_b       Use_5 33.33
12    sp_b       Use_6 41.67
13    sp_b       Use_7 58.33
14    sp_b       Use_9 41.67
15    sp_c       Use_1 52.94
16    sp_c       Use_2 41.18
17    sp_c       Use_4 35.29
18    sp_c       Use_5 17.65
19    sp_c       Use_6 23.53
20    sp_c       Use_7 29.41
21    sp_c       Use_8 70.59
22    sp_c      Use_10 35.29
23    sp_d       Use_1 41.67
24    sp_d       Use_2 25.00
25    sp_d       Use_3 58.33
26    sp_d       Use_5  8.33
27    sp_d       Use_6 41.67
28    sp_d       Use_7 66.67
29    sp_d       Use_8 75.00
30    sp_d       Use_9 41.67
> #returns the primary use category (Primary.use) and the FLs value
> 
> #Generate random dataset of three informants uses for four species
> 
> eb_data <- data.frame(replicate(10,sample(0:1,20,rep=TRUE)))
> names(eb_data) <- gsub(x = names(eb_data), pattern = "X", replacement = "Use_")  
> eb_data$informant <- sample(c('User_1', 'User_2', 'User_3'), 20, replace=TRUE)
> eb_data$sp_name <- sample(c('sp_1', 'sp_2', 'sp_3', 'sp_4'), 20, replace=TRUE)
> 
> FLs(eb_data)
   sp_name Primary.use    FLs
1     sp_1       Use_1  33.33
2     sp_1       Use_2  33.33
3     sp_1       Use_3  33.33
4     sp_1       Use_4 100.00
5     sp_1       Use_5  33.33
6     sp_1       Use_6  33.33
7     sp_1       Use_7  16.67
8     sp_1       Use_8  50.00
9     sp_1       Use_9  33.33
10    sp_1      Use_10  16.67
11    sp_2       Use_1  25.00
12    sp_2       Use_2  50.00
13    sp_2       Use_3  50.00
14    sp_2       Use_4  25.00
15    sp_2       Use_5  50.00
16    sp_2       Use_6  50.00
17    sp_2       Use_7  75.00
18    sp_2       Use_8  25.00
19    sp_2       Use_9  50.00
20    sp_2      Use_10  50.00
21    sp_3       Use_1  25.00
22    sp_3       Use_2  25.00
23    sp_3       Use_3 100.00
24    sp_3       Use_4  25.00
25    sp_3       Use_5  75.00
26    sp_3       Use_6  50.00
27    sp_3       Use_7  75.00
28    sp_3       Use_8 100.00
29    sp_3       Use_9  50.00
30    sp_3      Use_10  75.00
31    sp_4       Use_1  66.67
32    sp_4       Use_2  50.00
33    sp_4       Use_3  83.33
34    sp_4       Use_4  83.33
35    sp_4       Use_5  33.33
36    sp_4       Use_6  66.67
37    sp_4       Use_7  50.00
38    sp_4       Use_8  50.00
39    sp_4       Use_9  33.33
40    sp_4      Use_10  33.33
> 
> 
> 
> 
> cleanEx()
> nameEx("NUs")
> ### * NUs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: NUs
> ### Title: Number of Uses (NU)
> ### Aliases: NUs
> ### Keywords: arith logic math methods misc survey
> 
> ### ** Examples
> 
> 
> #Use built-in ethnobotany data example
> 
> NUs(ethnobotanydata)
  sp_name NUs
1    sp_c   8
2    sp_d   8
3    sp_a   7
4    sp_b   7
> 
> #Generate random dataset of three informants uses for four species
> 
> eb_data <- data.frame(replicate(10,sample(0:1,20,rep=TRUE)))
> names(eb_data) <- gsub(x = names(eb_data), pattern = "X", replacement = "Use_")  
> eb_data$informant<-sample(c('User_1', 'User_2', 'User_3'), 20, replace=TRUE)
> eb_data$sp_name<-sample(c('sp_1', 'sp_2', 'sp_3', 'sp_4'), 20, replace=TRUE)
> 
> NUs(eb_data)
  sp_name NUs
1    sp_1  10
2    sp_2  10
3    sp_3  10
4    sp_4  10
> 
> 
> 
> 
> cleanEx()
> nameEx("RFCs")
> ### * RFCs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RFCs
> ### Title: Relative Frequency of Citation (RFC)
> ### Aliases: RFCs
> ### Keywords: arith logic math methods misc survey
> 
> ### ** Examples
> 
> 
> #Use built-in ethnobotany data example
> RFCs(ethnobotanydata)
  sp_name RFCs
1    sp_c 0.85
2    sp_a 0.75
3    sp_b 0.60
4    sp_d 0.60
> 
> #Generate random dataset of three informants uses for four species
> 
> eb_data <- data.frame(replicate(10,sample(0:1,20,rep=TRUE)))
> names(eb_data) <- gsub(x = names(eb_data), pattern = "X", replacement = "Use_")  
> eb_data$informant <- sample(c('User_1', 'User_2', 'User_3'), 20, replace=TRUE)
> eb_data$sp_name <- sample(c('sp_1', 'sp_2', 'sp_3', 'sp_4'), 20, replace=TRUE)
> 
> RFCs(eb_data)
  sp_name  RFCs
1    sp_1 2.000
2    sp_4 2.000
3    sp_2 1.333
4    sp_3 1.333
> 
> 
> 
> 
> cleanEx()
> nameEx("RIs")
> ### * RIs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RIs
> ### Title: Relative Importance index (RI)
> ### Aliases: RIs
> ### Keywords: arith logic math methods misc survey
> 
> ### ** Examples
> 
> 
> #Use built-in ethnobotany data example
> 
> RIs(ethnobotanydata)
  sp_name   RIs
1    sp_c 1.000
2    sp_a 0.879
3    sp_d 0.853
4    sp_b 0.790
> 
> #Generate random dataset of three informants uses for four species
> 
> eb_data <- data.frame(replicate(10,sample(0:1,20,rep=TRUE)))
> names(eb_data) <- gsub(x = names(eb_data), pattern = "X", replacement = "Use_")  
> eb_data$informant <- sample(c('User_1', 'User_2', 'User_3'), 20, replace=TRUE)
> eb_data$sp_name <- sample(c('sp_1', 'sp_2', 'sp_3', 'sp_4'), 20, replace=TRUE)
> 
> RIs(eb_data)
  sp_name   RIs
1    sp_1 1.000
2    sp_4 1.000
3    sp_2 0.833
4    sp_3 0.833
> 
> 
> 
> 
> cleanEx()
> nameEx("Radial_plot")
> ### * Radial_plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Radial_plot
> ### Title: Radial bar plot of ethnobotany indices
> ### Aliases: Radial_plot
> ### Keywords: arith graphs logic math methods misc survey
> 
> ### ** Examples
> 
> 
> #Use built-in ethnobotany data example and Frequency of Citation function FCs()
> 
> Radial_plot(ethnobotanydata, analysis = FCs)
Scale for y is already present.
Adding another scale for y, which will replace the existing scale.
> 
> #Generate random dataset of three informants uses for four species
> 
> eb_data <- data.frame(replicate(10,sample(0:1,20,rep=TRUE)))
> names(eb_data) <- gsub(x = names(eb_data), pattern = "X", replacement = "Use_")  
> eb_data$informant <- sample(c('User_1', 'User_2', 'User_3'), 20, replace=TRUE)
> eb_data$sp_name <- sample(c('sp_1', 'sp_2', 'sp_3', 'sp_4'), 20, replace=TRUE)
>  
> Radial_plot(data = eb_data, analysis = URs, legend = "none")
Scale for y is already present.
Adding another scale for y, which will replace the existing scale.
> 
> 
> 
> 
> cleanEx()
> nameEx("URs")
> ### * URs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: URs
> ### Title: Use Report (UR)
> ### Aliases: URs
> ### Keywords: arith logic math methods misc survey
> 
> ### ** Examples
> 
> 
> #Use built-in ethnobotany data example
> URs(ethnobotanydata)
  sp_name URs
1    sp_c  52
2    sp_a  43
3    sp_d  43
4    sp_b  36
> 
> #Generate random dataset of three informants uses for four species
> 
> eb_data <- data.frame(replicate(10, sample(0:1, 20, rep = TRUE)))
> names(eb_data) <- gsub(x = names(eb_data), pattern = "X", replacement = "Use_")  
> eb_data$informant <- sample(c('User_1', 'User_2', 'User_3'), 20, replace = TRUE)
> eb_data$sp_name <- sample(c('sp_1', 'sp_2', 'sp_3', 'sp_4'), 20, replace = TRUE)
> 
> URs(eb_data)
  sp_name URs
1    sp_4  33
2    sp_3  24
3    sp_1  23
4    sp_2  18
> 
> 
> 
> 
> cleanEx()
> nameEx("URsum")
> ### * URsum
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: URsum
> ### Title: Sum of all Use Reports (UR) for all species
> ### Aliases: URsum
> ### Keywords: arith logic math methods misc survey
> 
> ### ** Examples
> 
> 
> #Use built-in ethnobotany data example
> URsum(ethnobotanydata)
[1] 174
> 
> #Generate random dataset of three informants uses for four species
> 
> eb_data <- data.frame(replicate(10,sample(0:1,20,rep=TRUE)))
> names(eb_data) <- gsub(x = names(eb_data), pattern = "X", replacement = "Use_")  
> eb_data$informant <- sample(c('User_1', 'User_2', 'User_3'), 20, replace=TRUE)
> eb_data$sp_name <- sample(c('sp_1', 'sp_2', 'sp_3', 'sp_4'), 20, replace=TRUE)
> 
> URsum(eb_data)
[1] 98
> 
> 
> 
> 
> cleanEx()
> nameEx("UVs")
> ### * UVs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: UVs
> ### Title: Use Value (UV) index per species
> ### Aliases: UVs
> ### Keywords: cultural ethnobotany importance quantitative use value
> 
> ### ** Examples
> 
> 
> #Use built-in ethnobotany data example
> UVs(ethnobotanydata)
  sp_name   UV
1    sp_c 2.60
2    sp_a 2.15
3    sp_d 2.15
4    sp_b 1.80
> 
> #Generate random dataset of three informants uses for four species
> 
> eb_data <- data.frame(replicate(10,sample(0:1,20,rep=TRUE)))
> names(eb_data) <- gsub(x = names(eb_data), pattern = "X", replacement = "Use_")  
> eb_data$informant<-sample(c('User_1', 'User_2', 'User_3'), 20, replace=TRUE)
> eb_data$sp_name<-sample(c('sp_1', 'sp_2', 'sp_3', 'sp_4'), 20, replace=TRUE)
> 
> UVs(eb_data)
  sp_name     UV
1    sp_4 11.000
2    sp_3  8.000
3    sp_1  7.667
4    sp_2  6.000
> 
> 
> 
> 
> cleanEx()
> nameEx("ethnoChord")
> ### * ethnoChord
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ethnoChord
> ### Title: Chord diagram of ethnobotany uses and species
> ### Aliases: ethnoChord
> ### Keywords: arith graphs logic math methods misc survey
> 
> ### ** Examples
> 
> 
> #Use built-in ethnobotany data example
> ethnoChord(ethnobotanydata, by = "informant")
> 
> #Generate random dataset of three informants uses for four species
> 
> eb_data <- data.frame(replicate(10,sample(0:1,20,rep=TRUE)))
> names(eb_data) <- gsub(x = names(eb_data), pattern = "X", replacement = "Use_")  
> eb_data$informant <- sample(c('User_1', 'User_2', 'User_3'), 20, replace=TRUE)
> eb_data$sp_name <- sample(c('sp_1', 'sp_2', 'sp_3', 'sp_4'), 20, replace=TRUE)
> 
> ethnoChord(eb_data, by = "informant")
> 
> 
> 
> 
> cleanEx()
> nameEx("ethno_alluvial")
> ### * ethno_alluvial
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ethno_alluvial
> ### Title: Alluvial plot of ethnobotany uses and species
> ### Aliases: ethno_alluvial
> ### Keywords: arith graphs logic math methods misc survey
> 
> ### ** Examples
> 
> 
> #Use built-in ethnobotany data example
> ethno_alluvial(ethnobotanydata)
> 
> #Generate random dataset of three informants uses for four species
> 
> eb_data <- data.frame(replicate(10,sample(0:1,20,rep=TRUE)))
> names(eb_data) <- gsub(x = names(eb_data), pattern = "X", replacement = "Use_")  
> eb_data$informant <- sample(c('User_1', 'User_2', 'User_3'), 20, replace=TRUE)
> eb_data$sp_name <- sample(c('sp_1', 'sp_2', 'sp_3', 'sp_4'), 20, replace=TRUE)
> 
> # Default plot ####
> 
> ethno_alluvial(eb_data)
> 
> 
> 
> 
> cleanEx()
> nameEx("ethno_bayes_consensus")
> ### * ethno_bayes_consensus
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ethno_bayes_consensus
> ### Title: Gives a measure of the confidence we can have in the answers in
> ###   the ethnobotany data.
> ### Aliases: ethno_bayes_consensus
> ### Keywords: Bayes Bayesian arith consensus ethnobotany logic math methods
> ###   misc survey
> 
> ### ** Examples
> 
> 
> #Use built-in ethnobotany data example
> #assign a non-informative prior to prior_for_answers with 'prior_for_answers=0.5'
> ethno_bayes_consensus(ethnobotanydata, answers = 2, prior_for_answers = 0.5, prior = -1)
         Use_1        Use_2        Use_3        Use_4        Use_5        Use_6
1 1.000000e+00 1.000000e+00 1.000000e+00 0.9999830652 9.999994e-01 1.000000e+00
2 2.867972e-10 2.581175e-09 9.559907e-11 0.0000169348 6.272251e-07 9.559907e-11
         Use_7        Use_8        Use_9       Use_10
1 1.000000e+00 1.000000e+00 9.999999e-01 9.999492e-01
2 2.867972e-10 1.311373e-13 6.969171e-08 5.080268e-05
> 
> #Generate random dataset of three informants uses for four species
> 
> eb_data <- data.frame(replicate(10,sample(0:1,20,rep=TRUE)))
> names(eb_data) <- gsub(x = names(eb_data), pattern = "X", replacement = "Use_")  
> eb_data$informant <- sample(c('User_1', 'User_2', 'User_3'), 20, replace=TRUE)
> eb_data$sp_name <- sample(c('sp_1', 'sp_2', 'sp_3', 'sp_4'), 20, replace=TRUE)
> 
> #assign a non-informative prior to prior_for_answers
> eb_prior_for_answers <- rep(0.5, len = nrow(eb_data))
> 
> ethno_bayes_consensus(eb_data, answers = 5, prior_for_answers = eb_prior_for_answers)
       Use_1      Use_2       Use_3       Use_4      Use_5      Use_6
1 0.86499670 0.86499670 0.979860991 0.979860991 0.90575675 0.93513342
2 0.03375082 0.03375082 0.005034752 0.005034752 0.02356081 0.01621664
3 0.03375082 0.03375082 0.005034752 0.005034752 0.02356081 0.01621664
4 0.03375082 0.03375082 0.005034752 0.005034752 0.02356081 0.01621664
5 0.03375082 0.03375082 0.005034752 0.005034752 0.02356081 0.01621664
       Use_7      Use_8      Use_9     Use_10
1 0.93513342 0.95579991 0.86499670 0.86499670
2 0.01621664 0.01105002 0.03375082 0.03375082
3 0.01621664 0.01105002 0.03375082 0.03375082
4 0.01621664 0.01105002 0.03375082 0.03375082
5 0.01621664 0.01105002 0.03375082 0.03375082
> 
> 
> 
> 
> cleanEx()
> nameEx("ethno_boot")
> ### * ethno_boot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ethno_boot
> ### Title: Bootstrap analyses of ethnobotany indices
> ### Aliases: ethno_boot
> ### Keywords: Bayes Bayesian arith graphs logic math methods misc survey
> 
> ### ** Examples
> 
> 
> #Use built-in ethnobotany data example
> 
> ethno_boot(data = ethnobotanydata$Use_1, 
+ statistic = mean, n1 = 1000)
   [1] 0.364 0.298 0.283 0.238 0.229 0.230 0.206 0.192 0.324 0.285 0.228 0.173
  [13] 0.284 0.318 0.151 0.278 0.169 0.290 0.283 0.236 0.284 0.277 0.182 0.227
  [25] 0.298 0.376 0.219 0.246 0.214 0.253 0.297 0.246 0.216 0.231 0.239 0.278
  [37] 0.232 0.192 0.250 0.339 0.323 0.253 0.324 0.286 0.210 0.272 0.216 0.273
  [49] 0.244 0.238 0.242 0.180 0.314 0.307 0.192 0.329 0.375 0.079 0.250 0.260
  [61] 0.207 0.247 0.265 0.224 0.203 0.240 0.328 0.166 0.265 0.203 0.255 0.253
  [73] 0.239 0.297 0.234 0.319 0.260 0.285 0.195 0.238 0.205 0.198 0.247 0.216
  [85] 0.358 0.345 0.199 0.264 0.207 0.300 0.199 0.252 0.262 0.293 0.262 0.277
  [97] 0.177 0.209 0.238 0.322 0.253 0.250 0.292 0.202 0.193 0.199 0.311 0.257
 [109] 0.212 0.170 0.202 0.267 0.342 0.110 0.274 0.213 0.237 0.156 0.202 0.175
 [121] 0.310 0.147 0.234 0.267 0.163 0.279 0.255 0.306 0.273 0.218 0.228 0.248
 [133] 0.211 0.254 0.309 0.197 0.294 0.270 0.295 0.256 0.261 0.203 0.248 0.242
 [145] 0.281 0.195 0.196 0.196 0.325 0.154 0.209 0.218 0.249 0.249 0.149 0.255
 [157] 0.216 0.249 0.217 0.218 0.178 0.218 0.167 0.288 0.217 0.284 0.234 0.170
 [169] 0.244 0.262 0.260 0.220 0.213 0.200 0.309 0.345 0.275 0.320 0.236 0.195
 [181] 0.254 0.230 0.227 0.154 0.248 0.292 0.264 0.242 0.156 0.208 0.304 0.241
 [193] 0.342 0.295 0.281 0.317 0.226 0.227 0.214 0.223 0.278 0.294 0.209 0.215
 [205] 0.303 0.226 0.201 0.299 0.145 0.366 0.241 0.288 0.339 0.238 0.247 0.251
 [217] 0.273 0.178 0.312 0.264 0.205 0.213 0.244 0.310 0.241 0.261 0.252 0.239
 [229] 0.295 0.137 0.318 0.229 0.242 0.244 0.189 0.224 0.327 0.200 0.249 0.198
 [241] 0.274 0.305 0.256 0.218 0.239 0.206 0.274 0.260 0.271 0.258 0.271 0.231
 [253] 0.237 0.177 0.194 0.263 0.251 0.333 0.185 0.237 0.316 0.290 0.205 0.244
 [265] 0.246 0.154 0.228 0.264 0.323 0.160 0.195 0.169 0.245 0.206 0.266 0.271
 [277] 0.218 0.231 0.262 0.209 0.230 0.190 0.236 0.314 0.120 0.195 0.224 0.232
 [289] 0.306 0.333 0.188 0.281 0.182 0.244 0.186 0.234 0.291 0.224 0.236 0.317
 [301] 0.284 0.172 0.285 0.303 0.272 0.296 0.302 0.237 0.257 0.190 0.226 0.238
 [313] 0.294 0.330 0.196 0.243 0.236 0.250 0.341 0.267 0.252 0.276 0.294 0.284
 [325] 0.243 0.298 0.271 0.234 0.243 0.184 0.227 0.297 0.147 0.227 0.289 0.244
 [337] 0.365 0.300 0.266 0.267 0.354 0.235 0.206 0.241 0.267 0.162 0.180 0.196
 [349] 0.214 0.383 0.207 0.170 0.263 0.185 0.290 0.204 0.260 0.271 0.313 0.235
 [361] 0.404 0.268 0.287 0.254 0.238 0.214 0.250 0.278 0.284 0.288 0.226 0.312
 [373] 0.267 0.206 0.270 0.379 0.263 0.292 0.292 0.204 0.218 0.273 0.237 0.204
 [385] 0.221 0.215 0.286 0.173 0.293 0.184 0.223 0.180 0.296 0.302 0.291 0.239
 [397] 0.316 0.329 0.186 0.254 0.245 0.176 0.346 0.273 0.284 0.332 0.241 0.253
 [409] 0.244 0.191 0.267 0.240 0.190 0.312 0.354 0.305 0.236 0.225 0.222 0.218
 [421] 0.133 0.224 0.311 0.220 0.226 0.213 0.285 0.336 0.272 0.260 0.275 0.213
 [433] 0.218 0.309 0.203 0.328 0.203 0.181 0.274 0.200 0.173 0.302 0.344 0.203
 [445] 0.260 0.241 0.243 0.304 0.225 0.218 0.183 0.229 0.293 0.258 0.318 0.284
 [457] 0.174 0.275 0.196 0.303 0.250 0.212 0.334 0.242 0.255 0.222 0.317 0.230
 [469] 0.269 0.297 0.287 0.241 0.231 0.275 0.280 0.316 0.267 0.253 0.321 0.373
 [481] 0.274 0.282 0.257 0.215 0.245 0.309 0.318 0.310 0.345 0.169 0.216 0.264
 [493] 0.236 0.203 0.194 0.265 0.203 0.303 0.275 0.211 0.238 0.200 0.177 0.261
 [505] 0.213 0.206 0.280 0.271 0.201 0.236 0.210 0.194 0.231 0.203 0.259 0.224
 [517] 0.235 0.205 0.245 0.280 0.321 0.204 0.315 0.224 0.295 0.341 0.279 0.279
 [529] 0.202 0.176 0.258 0.234 0.212 0.243 0.190 0.224 0.350 0.263 0.319 0.167
 [541] 0.250 0.254 0.263 0.246 0.208 0.313 0.258 0.170 0.276 0.265 0.240 0.248
 [553] 0.232 0.167 0.194 0.204 0.185 0.175 0.255 0.250 0.356 0.232 0.290 0.223
 [565] 0.273 0.258 0.260 0.272 0.207 0.250 0.262 0.208 0.196 0.222 0.221 0.247
 [577] 0.308 0.272 0.253 0.241 0.197 0.208 0.190 0.276 0.342 0.198 0.284 0.159
 [589] 0.254 0.228 0.259 0.226 0.267 0.246 0.184 0.219 0.314 0.241 0.226 0.276
 [601] 0.223 0.184 0.241 0.227 0.243 0.242 0.272 0.252 0.293 0.268 0.148 0.245
 [613] 0.247 0.212 0.365 0.283 0.323 0.202 0.246 0.186 0.202 0.246 0.284 0.312
 [625] 0.217 0.284 0.222 0.272 0.200 0.206 0.235 0.195 0.263 0.197 0.234 0.237
 [637] 0.299 0.249 0.261 0.303 0.184 0.166 0.172 0.250 0.244 0.147 0.286 0.243
 [649] 0.266 0.246 0.322 0.338 0.220 0.262 0.255 0.246 0.300 0.295 0.168 0.226
 [661] 0.242 0.142 0.286 0.206 0.254 0.237 0.167 0.195 0.223 0.217 0.269 0.280
 [673] 0.249 0.223 0.153 0.236 0.156 0.325 0.268 0.225 0.292 0.286 0.146 0.228
 [685] 0.205 0.236 0.212 0.254 0.294 0.258 0.230 0.266 0.212 0.205 0.214 0.296
 [697] 0.323 0.262 0.253 0.248 0.251 0.343 0.159 0.242 0.319 0.172 0.314 0.196
 [709] 0.247 0.254 0.260 0.185 0.126 0.322 0.314 0.147 0.309 0.257 0.256 0.258
 [721] 0.222 0.173 0.316 0.182 0.251 0.212 0.300 0.234 0.278 0.229 0.216 0.179
 [733] 0.205 0.278 0.268 0.229 0.252 0.248 0.237 0.298 0.227 0.262 0.218 0.184
 [745] 0.224 0.157 0.217 0.313 0.220 0.223 0.240 0.287 0.280 0.238 0.209 0.216
 [757] 0.240 0.287 0.260 0.244 0.279 0.190 0.330 0.276 0.350 0.194 0.253 0.257
 [769] 0.249 0.231 0.315 0.318 0.197 0.233 0.249 0.224 0.166 0.264 0.211 0.323
 [781] 0.207 0.287 0.250 0.232 0.273 0.180 0.306 0.262 0.245 0.176 0.255 0.251
 [793] 0.192 0.213 0.327 0.179 0.185 0.202 0.207 0.305 0.231 0.275 0.245 0.193
 [805] 0.244 0.218 0.209 0.155 0.195 0.356 0.299 0.295 0.367 0.281 0.261 0.198
 [817] 0.296 0.255 0.219 0.243 0.299 0.234 0.206 0.210 0.228 0.324 0.176 0.245
 [829] 0.238 0.183 0.358 0.277 0.310 0.181 0.270 0.210 0.303 0.216 0.299 0.290
 [841] 0.207 0.193 0.228 0.262 0.259 0.259 0.173 0.225 0.299 0.267 0.289 0.279
 [853] 0.251 0.220 0.326 0.243 0.256 0.273 0.186 0.308 0.186 0.303 0.270 0.254
 [865] 0.232 0.207 0.272 0.250 0.248 0.237 0.223 0.231 0.263 0.339 0.245 0.228
 [877] 0.293 0.222 0.196 0.222 0.257 0.226 0.277 0.246 0.281 0.208 0.238 0.281
 [889] 0.256 0.303 0.230 0.201 0.293 0.211 0.179 0.328 0.256 0.262 0.271 0.233
 [901] 0.204 0.212 0.281 0.232 0.212 0.292 0.203 0.193 0.314 0.256 0.289 0.115
 [913] 0.175 0.255 0.240 0.232 0.230 0.292 0.272 0.234 0.335 0.319 0.310 0.262
 [925] 0.359 0.327 0.229 0.229 0.228 0.235 0.243 0.275 0.287 0.277 0.213 0.288
 [937] 0.267 0.400 0.301 0.262 0.189 0.357 0.300 0.261 0.204 0.249 0.224 0.186
 [949] 0.233 0.311 0.384 0.283 0.278 0.254 0.222 0.292 0.367 0.215 0.267 0.327
 [961] 0.257 0.177 0.235 0.251 0.287 0.179 0.260 0.352 0.201 0.261 0.248 0.216
 [973] 0.219 0.197 0.381 0.365 0.306 0.308 0.320 0.171 0.273 0.258 0.389 0.251
 [985] 0.361 0.260 0.287 0.167 0.211 0.267 0.253 0.250 0.279 0.329 0.217 0.278
 [997] 0.266 0.229 0.293 0.278
> 
> #Generate random dataset of three informants uses for four species
> 
> eb_data <- data.frame(replicate(10,sample(0:1,20,rep=TRUE)))
> names(eb_data) <- gsub(x = names(eb_data), pattern = "X", replacement = "Use_")  
> eb_data$informant<-sample(c('User_1', 'User_2', 'User_3'), 20, replace=TRUE)
> eb_data$sp_name<-sample(c('sp_1', 'sp_2', 'sp_3', 'sp_4'), 20, replace=TRUE)
> 
> # Simple Bayesian bootstrap of the mean ####
> 
> boot_dataUR <- URs(eb_data)
> 
> ethno_boot(data = boot_dataUR$URs, statistic = mean)
   [1] 24.736 22.212 20.461 23.757 24.707 21.300 18.974 22.885 24.815 20.444
  [11] 24.840 21.838 16.737 19.695 17.595 24.027 25.735 21.402 19.318 19.673
  [21] 25.749 18.987 25.847 20.737 21.184 21.929 20.350 23.214 17.773 23.300
  [31] 20.603 20.136 23.053 19.577 22.765 19.028 24.276 25.507 24.271 22.193
  [41] 18.911 20.420 19.106 21.867 23.725 21.162 20.682 26.965 25.297 21.560
  [51] 20.855 21.337 22.002 21.552 23.650 18.755 19.290 21.101 23.637 27.193
  [61] 24.570 20.622 20.826 21.978 14.943 22.781 20.568 23.685 25.167 19.743
  [71] 22.007 19.649 18.136 24.338 19.044 23.133 17.279 23.035 23.879 22.335
  [81] 21.315 22.901 25.665 21.465 23.623 23.215 16.588 26.128 17.006 24.835
  [91] 21.751 21.360 18.038 23.359 24.234 22.883 24.697 24.197 15.539 21.009
 [101] 24.971 22.967 24.768 16.862 20.861 23.329 20.011 24.965 23.598 22.413
 [111] 20.565 21.394 18.290 19.243 26.532 19.229 23.788 18.254 27.500 25.125
 [121] 22.386 16.770 19.334 24.444 24.074 23.609 21.421 22.739 23.300 16.737
 [131] 23.964 22.685 22.426 23.506 24.716 26.637 23.739 24.102 21.701 23.519
 [141] 21.853 23.516 25.800 21.714 23.827 21.829 19.741 21.517 25.278 20.103
 [151] 21.138 22.920 25.147 21.491 20.738 24.595 16.636 19.612 21.070 24.173
 [161] 19.943 24.040 18.577 22.685 25.401 21.646 25.434 23.083 21.865 25.382
 [171] 23.046 25.924 22.329 20.725 19.890 19.209 21.451 26.873 19.767 23.776
 [181] 22.911 25.028 18.720 22.676 19.780 23.283 18.106 22.407 23.411 21.026
 [191] 17.407 22.571 27.543 24.723 23.137 21.326 26.273 20.532 22.286 24.433
 [201] 23.236 21.573 26.753 25.524 15.589 25.355 22.803 20.373 19.468 25.879
 [211] 23.787 24.797 21.395 24.718 22.188 25.476 23.121 17.872 20.827 14.779
 [221] 21.796 17.031 18.253 20.195 24.906 21.618 28.672 22.244 23.826 26.990
 [231] 22.257 18.627 23.088 22.956 24.706 24.258 23.759 21.011 20.895 20.592
 [241] 23.452 20.620 25.153 24.189 24.114 27.107 19.927 22.416 24.659 20.005
 [251] 19.227 21.996 20.264 23.572 19.770 20.886 21.057 25.223 24.824 15.065
 [261] 19.651 18.679 16.940 23.249 20.638 23.734 21.462 19.188 21.164 20.657
 [271] 21.363 17.648 19.445 13.501 22.091 23.820 19.698 19.325 22.369 23.172
 [281] 23.075 20.352 23.190 23.928 20.361 21.426 21.463 17.771 17.242 22.904
 [291] 20.294 16.010 15.616 20.627 23.977 20.607 24.336 19.318 19.462 22.645
 [301] 20.264 25.094 24.422 20.250 17.147 21.143 26.893 22.980 17.909 23.848
 [311] 19.743 22.312 24.347 17.041 23.317 22.153 25.314 22.744 23.504 27.875
 [321] 22.924 16.227 23.218 21.520 24.642 20.477 18.486 21.229 23.260 21.995
 [331] 17.841 18.675 15.857 22.517 23.516 26.367 24.780 22.581 19.907 21.861
 [341] 20.608 23.737 23.666 19.358 15.188 21.381 19.247 25.275 23.645 22.238
 [351] 22.976 19.233 25.483 22.850 25.757 23.808 24.064 20.458 17.185 23.486
 [361] 22.867 20.731 19.806 25.663 21.939 20.960 25.073 21.196 21.402 20.006
 [371] 26.709 16.438 24.883 22.682 20.450 16.667 21.330 25.946 24.846 25.765
 [381] 25.136 23.137 21.300 23.039 25.622 20.603 25.550 20.152 24.617 23.415
 [391] 21.073 24.488 21.993 26.392 23.451 17.361 22.015 23.396 23.453 23.738
 [401] 19.597 23.557 25.336 18.886 23.869 21.780 18.409 21.461 20.158 21.140
 [411] 23.666 19.113 19.229 21.650 25.068 21.250 19.150 17.895 22.292 20.198
 [421] 22.374 22.012 23.679 20.535 23.162 22.917 19.090 24.017 22.890 18.167
 [431] 21.209 21.477 24.751 22.018 21.608 24.830 24.150 24.182 18.495 26.278
 [441] 23.650 22.185 22.924 25.524 20.745 20.569 19.841 19.281 25.200 26.336
 [451] 22.870 23.843 23.374 25.879 16.768 24.110 25.870 19.318 19.029 23.811
 [461] 19.877 24.317 19.584 20.704 26.467 25.333 18.766 26.226 25.236 23.274
 [471] 21.393 24.349 24.789 25.591 25.225 23.900 24.178 24.168 24.984 24.791
 [481] 21.333 21.686 18.136 23.546 23.207 26.529 24.594 21.821 18.850 23.481
 [491] 20.576 17.789 15.406 25.701 22.598 24.139 24.224 25.475 25.412 24.001
 [501] 23.937 24.803 27.397 25.135 21.561 16.889 25.546 15.653 23.810 27.489
 [511] 16.835 20.008 23.488 20.345 18.946 25.219 23.091 21.047 25.374 15.678
 [521] 25.768 26.753 20.777 24.504 23.939 22.612 24.247 24.051 20.095 18.957
 [531] 17.452 24.044 22.842 24.388 16.067 22.360 23.603 20.608 18.742 23.818
 [541] 23.697 28.361 24.581 21.385 22.942 24.760 21.256 17.421 23.270 19.599
 [551] 19.254 24.068 23.591 21.822 27.532 23.706 22.250 25.992 25.200 21.010
 [561] 24.127 21.627 19.338 19.011 18.267 18.920 22.852 20.768 23.377 24.726
 [571] 28.025 26.168 22.577 18.866 23.647 19.910 22.443 27.363 24.121 25.575
 [581] 24.404 21.185 27.048 25.874 20.092 22.482 25.461 21.563 26.111 17.300
 [591] 17.395 25.685 22.788 22.499 18.798 20.342 26.036 18.907 22.113 26.784
 [601] 24.860 22.034 25.989 21.505 22.062 16.623 21.460 20.130 20.330 24.627
 [611] 18.927 16.409 24.375 24.572 22.575 19.358 15.625 21.041 21.084 26.564
 [621] 24.736 21.351 24.126 21.756 21.335 21.494 24.381 21.965 26.705 21.633
 [631] 24.260 24.682 22.806 21.491 25.222 20.060 18.321 25.953 25.770 23.963
 [641] 22.151 22.653 21.735 21.844 19.226 20.000 19.206 20.551 23.874 17.540
 [651] 18.720 20.871 22.294 21.836 22.894 23.334 23.924 23.699 25.509 18.392
 [661] 24.549 18.491 22.320 24.130 19.490 17.354 25.183 24.433 21.446 19.419
 [671] 25.425 23.322 27.944 20.476 26.349 18.472 20.533 19.799 22.150 24.168
 [681] 23.380 20.551 22.887 23.852 19.610 25.686 24.278 24.094 17.909 20.926
 [691] 19.924 18.771 25.047 25.629 24.351 20.900 18.453 22.351 23.822 24.804
 [701] 25.310 20.701 26.551 21.600 26.067 19.788 17.978 25.982 25.828 22.113
 [711] 24.518 17.402 21.213 21.040 23.228 24.126 25.038 21.100 19.606 25.456
 [721] 25.479 21.843 21.373 19.192 25.853 20.098 20.306 22.832 13.914 22.968
 [731] 21.068 18.418 26.431 23.584 22.141 18.638 19.694 26.039 18.469 23.886
 [741] 21.417 18.312 24.303 20.862 16.380 19.814 19.584 21.139 26.990 15.864
 [751] 20.122 24.447 21.580 22.247 21.524 17.899 23.683 19.960 21.743 24.453
 [761] 17.474 21.072 22.148 25.094 25.110 23.376 19.206 24.993 26.854 22.426
 [771] 24.341 15.574 20.728 22.831 19.733 22.185 23.941 20.123 24.998 27.585
 [781] 26.818 24.061 18.499 24.872 19.814 25.087 24.618 23.497 25.590 21.530
 [791] 22.479 21.396 24.031 22.932 20.656 25.163 26.639 25.963 24.457 20.015
 [801] 23.358 22.003 16.976 21.551 27.013 23.583 25.166 25.418 18.136 18.372
 [811] 21.418 23.499 20.856 23.643 22.257 24.115 20.465 22.928 25.540 19.712
 [821] 19.532 23.281 20.628 24.242 20.011 25.954 20.770 18.369 23.720 23.486
 [831] 21.711 23.859 23.120 20.482 26.586 26.183 23.802 18.735 20.371 22.191
 [841] 14.099 23.743 24.960 24.474 19.596 17.646 27.704 19.115 22.950 24.406
 [851] 23.792 19.899 18.672 27.020 17.431 20.633 24.629 21.700 19.030 19.631
 [861] 27.262 23.935 22.936 23.685 22.044 24.425 23.578 19.038 16.503 18.117
 [871] 26.415 24.948 27.580 22.783 20.440 20.890 23.250 20.922 22.890 21.618
 [881] 21.002 20.108 21.108 20.999 24.085 25.498 16.720 20.550 18.105 21.669
 [891] 21.684 24.385 20.881 24.235 25.240 21.946 25.579 20.827 20.302 20.660
 [901] 23.073 18.401 21.632 23.582 23.352 24.905 28.185 24.035 24.025 17.748
 [911] 20.667 27.091 19.709 22.079 19.566 21.149 23.889 19.987 26.698 23.508
 [921] 26.258 26.449 28.422 20.918 22.918 24.329 22.955 27.892 21.849 17.394
 [931] 22.109 22.871 22.725 23.629 20.859 26.286 25.083 23.451 24.516 18.920
 [941] 25.662 18.213 22.369 18.654 17.676 22.477 21.478 17.019 27.014 24.073
 [951] 27.923 16.996 23.564 23.235 19.083 23.778 22.878 19.327 19.170 20.197
 [961] 17.590 18.197 21.194 23.468 19.876 25.694 18.323 20.881 24.299 25.551
 [971] 23.104 17.352 25.056 21.302 20.090 25.195 24.999 21.445 17.730 19.753
 [981] 21.486 19.037 21.652 23.590 22.091 24.854 24.617 24.387 25.939 18.699
 [991] 27.964 23.374 24.511 24.712 22.624 25.766 23.310 17.786 24.473 27.387
> 
> # Generate random dataset of three informants with multiple uses for four species
> 
> eb_multi_use_data <- data.frame(replicate(10,sample(0:10,20,rep=TRUE)))
> names(eb_multi_use_data) <- gsub(x = names(eb_multi_use_data), pattern = "X", replacement = "Use_")  
> eb_multi_use_data$informant<-sample(c('User_1', 'User_2', 'User_3'), 20, replace=TRUE)
> eb_multi_use_data$sp_name<-sample(c('sp_1', 'sp_2', 'sp_3', 'sp_4'), 20, replace=TRUE)
> 
> # Simple Bayesian bootstrap of the mean of Use_1 ####
> 
> ethno_boot(data = eb_multi_use_data$Use_1, statistic = mean)
   [1] 5.098 5.294 5.806 3.696 4.572 5.240 4.563 5.212 6.258 4.945 6.491 3.838
  [13] 4.920 4.763 6.393 3.953 5.052 6.066 4.990 5.392 4.795 5.665 6.061 4.442
  [25] 5.367 5.821 4.901 4.651 5.395 5.196 4.233 5.087 6.115 4.882 5.007 5.661
  [37] 4.268 4.510 5.148 4.472 4.673 4.714 5.060 5.125 4.328 5.440 5.101 5.044
  [49] 4.688 5.766 4.432 6.342 4.303 5.352 5.682 5.428 6.198 5.697 4.693 6.199
  [61] 5.336 5.881 5.546 5.469 5.389 5.003 5.752 4.851 5.286 5.624 5.191 5.956
  [73] 4.347 5.276 6.020 5.392 5.981 5.329 4.841 5.423 5.243 5.460 5.762 5.311
  [85] 5.218 5.084 6.254 5.213 5.652 4.793 4.828 4.840 5.984 5.791 4.979 6.053
  [97] 5.279 5.766 5.307 5.752 5.183 4.761 5.505 5.469 4.177 4.418 4.696 5.544
 [109] 4.747 4.842 5.206 5.095 5.118 5.701 5.359 5.533 4.590 4.832 4.922 4.930
 [121] 5.725 4.967 4.964 6.670 4.968 6.344 5.030 4.917 5.771 4.810 5.233 4.349
 [133] 5.328 4.486 6.286 5.135 5.210 4.760 4.192 4.706 3.861 5.372 3.947 5.877
 [145] 5.357 6.121 4.900 4.694 5.977 5.451 4.655 5.353 5.814 5.914 6.085 6.181
 [157] 4.827 5.140 5.270 4.870 5.920 5.115 4.536 5.590 4.729 5.865 5.116 5.539
 [169] 5.238 4.101 5.288 3.949 4.748 5.015 4.475 5.285 5.189 5.116 4.648 4.691
 [181] 5.311 5.583 4.909 6.169 4.359 5.115 5.599 4.647 5.084 5.912 4.576 4.675
 [193] 5.791 4.813 6.318 4.665 4.584 5.068 5.638 4.527 4.849 5.257 4.240 4.877
 [205] 5.215 5.806 5.148 4.782 5.174 5.491 5.544 5.565 5.297 5.300 4.965 4.863
 [217] 4.244 5.447 5.205 5.663 6.176 3.859 4.391 4.716 5.282 6.179 5.329 4.496
 [229] 6.215 5.314 6.734 5.953 5.040 4.449 4.923 4.911 4.993 4.756 5.299 5.453
 [241] 5.647 4.658 4.195 4.674 6.306 5.101 5.676 5.262 4.305 5.823 5.061 4.642
 [253] 4.417 5.392 4.956 4.936 5.499 3.967 4.735 4.846 4.709 4.596 5.816 4.737
 [265] 5.947 5.628 4.744 5.341 4.730 4.968 5.308 5.767 3.452 4.771 6.613 5.151
 [277] 5.379 4.811 4.848 5.024 5.285 3.865 5.022 6.591 5.025 4.490 5.012 4.992
 [289] 5.400 5.670 5.538 5.026 4.452 5.506 5.882 4.446 4.534 5.094 4.610 4.783
 [301] 5.289 4.509 3.796 3.887 6.180 4.654 5.042 5.083 5.306 5.429 5.107 5.740
 [313] 5.407 5.533 5.269 5.081 5.194 4.495 5.103 4.776 4.068 5.089 5.227 4.864
 [325] 6.676 5.895 4.350 6.163 3.210 4.647 4.539 5.774 3.910 5.215 5.454 5.418
 [337] 6.120 5.472 4.452 5.112 4.965 5.186 5.412 3.915 4.761 5.859 4.122 4.387
 [349] 4.789 5.357 5.703 4.985 5.069 5.670 5.513 4.270 5.585 5.523 4.453 5.964
 [361] 5.576 6.058 4.226 4.721 5.283 4.666 5.422 5.650 5.048 4.933 5.767 5.108
 [373] 5.583 4.812 5.977 5.987 3.882 5.397 5.702 5.512 4.543 5.961 5.010 4.803
 [385] 4.593 5.946 5.904 6.971 4.696 6.190 5.598 4.856 5.197 6.815 4.249 5.849
 [397] 5.544 5.922 6.247 5.767 5.831 5.619 5.536 5.918 5.554 4.105 4.789 3.703
 [409] 6.508 5.434 4.717 5.294 5.506 5.469 6.594 5.805 5.198 5.869 5.161 4.934
 [421] 5.039 5.632 5.503 4.792 6.001 4.305 6.081 5.682 5.454 5.313 5.214 5.519
 [433] 4.573 4.675 4.744 4.436 5.550 5.481 6.225 5.244 5.191 6.100 5.476 6.435
 [445] 5.123 4.859 5.202 5.026 4.159 5.411 4.206 6.290 4.989 5.746 3.699 4.291
 [457] 5.571 5.075 5.078 5.227 4.020 3.959 5.120 5.470 5.282 4.206 4.991 5.582
 [469] 5.582 5.106 4.896 6.114 4.806 4.864 3.696 5.551 6.055 5.382 4.609 5.424
 [481] 5.409 5.317 4.076 3.820 4.618 5.379 5.810 4.749 4.844 5.329 4.976 5.729
 [493] 6.160 3.974 4.673 6.314 5.273 5.935 6.136 6.208 4.216 3.884 5.419 4.492
 [505] 5.785 4.923 4.355 4.713 5.691 5.751 5.128 5.321 5.740 5.186 6.009 4.960
 [517] 4.029 4.739 5.608 3.924 5.416 4.892 5.108 5.973 4.885 4.847 4.895 6.437
 [529] 4.781 6.140 5.019 5.951 5.340 5.819 6.266 4.850 4.931 3.971 4.320 6.068
 [541] 3.945 6.650 4.940 5.732 4.930 4.710 5.953 5.567 4.917 5.401 5.584 4.821
 [553] 5.292 4.316 6.177 4.613 4.353 6.245 4.159 5.406 4.528 5.046 5.927 5.641
 [565] 5.467 5.909 4.705 4.454 5.244 5.684 5.716 5.433 5.183 6.044 4.758 4.188
 [577] 5.086 5.579 3.910 5.506 4.474 5.096 5.285 4.861 4.981 5.023 5.180 5.697
 [589] 5.022 5.719 6.276 5.669 6.128 3.780 4.788 5.461 5.376 4.752 5.167 4.560
 [601] 5.627 4.451 4.796 5.781 5.857 4.641 5.205 6.259 5.583 5.324 5.763 5.474
 [613] 3.714 5.396 3.799 6.072 5.914 4.560 3.798 4.858 4.495 5.422 5.683 5.064
 [625] 5.380 4.372 5.091 4.629 5.753 6.352 4.497 5.238 5.018 5.869 5.070 6.482
 [637] 5.205 3.931 4.934 4.209 5.256 5.600 5.602 4.638 5.698 4.597 6.081 5.338
 [649] 4.613 6.087 5.958 5.365 6.145 4.775 5.392 4.917 4.930 4.088 4.785 4.465
 [661] 5.524 4.966 4.168 6.052 5.503 4.053 6.192 6.457 5.744 5.276 4.906 5.606
 [673] 5.399 4.878 5.475 4.681 5.276 5.275 5.242 6.063 5.461 4.850 5.044 4.900
 [685] 6.336 4.685 4.958 4.917 5.945 6.504 5.826 4.366 5.406 4.345 6.474 6.474
 [697] 5.667 4.390 5.111 5.253 5.742 5.661 4.481 4.581 5.175 5.254 5.024 4.890
 [709] 4.194 5.138 5.839 6.140 5.340 4.643 6.116 4.891 5.906 3.615 6.064 5.073
 [721] 4.198 5.079 4.589 6.076 4.845 5.790 4.278 4.978 4.863 3.165 5.631 6.587
 [733] 5.262 5.585 4.582 4.013 6.148 4.943 4.580 4.906 4.608 5.962 4.948 4.876
 [745] 6.414 5.900 5.040 4.823 4.879 5.883 6.149 4.570 5.609 5.638 4.938 5.426
 [757] 5.538 5.070 4.282 5.962 6.522 5.108 5.089 6.208 5.500 5.564 5.680 4.677
 [769] 6.077 5.932 4.283 5.228 6.762 6.064 5.435 5.020 5.784 5.612 5.340 6.088
 [781] 5.882 4.448 5.327 4.971 4.825 5.949 5.147 4.835 4.714 5.423 5.196 4.735
 [793] 3.974 4.862 5.661 6.796 6.319 4.958 6.401 5.642 5.599 4.600 4.940 5.372
 [805] 3.734 5.190 5.617 5.715 5.102 5.013 5.789 5.685 6.108 6.498 4.403 4.211
 [817] 5.685 4.873 4.818 5.287 3.889 5.564 5.119 5.700 5.438 5.885 4.443 5.703
 [829] 4.992 5.673 4.933 5.802 4.604 5.034 5.265 4.862 4.964 5.026 3.792 6.401
 [841] 4.518 6.286 6.378 4.520 5.590 5.266 5.269 5.665 5.160 5.391 5.664 4.345
 [853] 5.976 4.486 5.401 4.165 5.883 6.762 6.605 5.527 5.765 5.155 5.531 5.256
 [865] 4.738 4.449 5.619 5.260 5.085 4.327 5.494 6.392 4.539 5.595 5.732 4.120
 [877] 4.727 5.489 4.654 6.403 5.753 5.910 5.413 4.777 5.217 4.976 5.694 5.964
 [889] 4.386 3.525 4.598 4.568 4.916 6.576 4.818 5.328 4.960 5.767 5.059 4.171
 [901] 6.430 5.698 5.756 5.146 4.599 4.537 5.379 5.094 5.862 5.911 5.478 5.114
 [913] 5.001 5.289 5.188 4.375 5.380 4.978 4.249 5.497 5.966 5.497 5.176 5.930
 [925] 5.372 5.274 5.203 5.470 5.959 5.873 5.310 5.340 4.841 5.042 5.385 4.791
 [937] 4.752 5.372 5.946 4.400 5.013 5.140 4.845 5.991 5.158 5.875 5.254 5.437
 [949] 6.376 6.429 4.782 5.216 5.020 6.008 5.765 4.603 6.050 4.861 5.652 5.319
 [961] 4.812 5.115 4.703 4.151 5.070 5.623 6.210 4.222 6.249 6.139 6.472 5.256
 [973] 5.772 4.757 5.684 4.641 6.617 6.021 3.768 5.498 5.805 5.350 5.647 5.933
 [985] 3.638 6.016 6.564 5.570 5.368 5.850 6.050 6.614 4.213 4.569 5.551 4.948
 [997] 5.452 5.962 5.420 4.771
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("simple_UVs")
> ### * simple_UVs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simple_UVs
> ### Title: Use Value (UV) index per species
> ### Aliases: simple_UVs
> ### Keywords: arith logic math methods misc survey
> 
> ### ** Examples
> 
> 
> #Use built-in ethnobotany data example
> simple_UVs(ethnobotanydata)
  sp_name simple_UV
1    sp_c      2.60
2    sp_a      2.15
3    sp_d      2.15
4    sp_b      1.80
> 
> #Generate random dataset of three informants uses for four species
> 
> eb_data <- data.frame(replicate(10,sample(0:1,20,rep=TRUE)))
> names(eb_data) <- gsub(x = names(eb_data), pattern = "X", replacement = "Use_")  
> eb_data$informant <- sample(c('User_1', 'User_2', 'User_3'), 20, replace=TRUE)
> eb_data$sp_name <- sample(c('sp_1', 'sp_2', 'sp_3', 'sp_4'), 20, replace=TRUE)
> 
> simple_UVs(eb_data)
  sp_name simple_UV
1    sp_4    11.000
2    sp_3     8.000
3    sp_1     7.667
4    sp_2     6.000
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.928 0.081 3.167 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
