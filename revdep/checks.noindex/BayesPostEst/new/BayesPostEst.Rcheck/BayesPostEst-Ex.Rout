
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "BayesPostEst"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('BayesPostEst')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("BayesPostEst-deprecated")
> ### * BayesPostEst-deprecated
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BayesPostEst-deprecated
> ### Title: Deprecated functions in package 'BayesPostEst'.
> ### Aliases: BayesPostEst-deprecated mcmcFDplot-deprecated mcmcFDplot
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Don't show: 
> .old_wd <- setwd(tempdir())
> ## End(Don't show)
> 
> ## Don't show: 
> setwd(.old_wd)
> ## End(Don't show)
> 
> 
> 
> 
> cleanEx()
> nameEx("jags_interactive")
> ### * jags_interactive
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jags_interactive
> ### Title: Fitted JAGS interactive linear model
> ### Aliases: jags_interactive
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("jags_interactive_cat")
> ### * jags_interactive_cat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jags_interactive_cat
> ### Title: Fitted JAGS interactive linear model with categorical moderator
> ### Aliases: jags_interactive_cat
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("jags_logit")
> ### * jags_logit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jags_logit
> ### Title: Fitted JAGS logit model
> ### Aliases: jags_logit
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("jags_probit")
> ### * jags_probit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jags_probit
> ### Title: Fitted JAGS probit model
> ### Aliases: jags_probit
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("mcmcAveProb")
> ### * mcmcAveProb
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mcmcAveProb
> ### Title: Predicted Probabilities using Bayesian MCMC estimates for the
> ###   "Average" Case
> ### Aliases: mcmcAveProb
> 
> ### ** Examples
> 
> ## Don't show: 
> .old_wd <- setwd(tempdir())
> ## End(Don't show)
> 
> ## Don't show: 
> setwd(.old_wd)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("mcmcCoefPlot")
> ### * mcmcCoefPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mcmcCoefPlot
> ### Title: Coefficient Plots for MCMC Output
> ### Aliases: mcmcCoefPlot
> 
> ### ** Examples
> 
> ## Don't show: 
> .old_wd <- setwd(tempdir())
> ## End(Don't show)
> 
> ## Don't show: 
> setwd(.old_wd)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("mcmcFD")
> ### * mcmcFD
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mcmcFD
> ### Title: First Differences of a Bayesian Logit or Probit model
> ### Aliases: mcmcFD
> 
> ### ** Examples
> 
> ## Don't show: 
> .old_wd <- setwd(tempdir())
> ## End(Don't show)
> 
> ## Don't show: 
> setwd(.old_wd)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("mcmcMargEff")
> ### * mcmcMargEff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mcmcMargEff
> ### Title: Marginal Effects Plots for MCMC Output
> ### Aliases: mcmcMargEff
> 
> ### ** Examples
> 
> ## Don't show: 
> .old_wd <- setwd(tempdir())
> ## End(Don't show)
> 
> ## Don't show: 
> setwd(.old_wd)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("mcmcObsProb")
> ### * mcmcObsProb
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mcmcObsProb
> ### Title: Predicted Probabilities using Bayesian MCMC estimates for the
> ###   Average of Observed Cases
> ### Aliases: mcmcObsProb
> 
> ### ** Examples
> 
> ## Don't show: 
> .old_wd <- setwd(tempdir())
> ## End(Don't show)
> 
> ## Don't show: 
> setwd(.old_wd)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("mcmcReg")
> ### * mcmcReg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mcmcReg
> ### Title: LaTeX or HTML regression tables for MCMC Output
> ### Aliases: mcmcReg
> 
> ### ** Examples
> 
> ## Don't show: 
> .old_wd <- setwd(tempdir())
> ## End(Don't show)
> 
> ## Don't show: 
> setwd(.old_wd)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("mcmcRocPrc")
> ### * mcmcRocPrc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.mcmcRocPrc
> ### Title: ROC and Precision-Recall Curves using Bayesian MCMC estimates
> ### Aliases: print.mcmcRocPrc plot.mcmcRocPrc as.data.frame.mcmcRocPrc
> ###   mcmcRocPrc mcmcRocPrc.default mcmcRocPrc.jags mcmcRocPrc.rjags
> ###   mcmcRocPrc.runjags mcmcRocPrc.stanfit mcmcRocPrc.stanreg
> ###   mcmcRocPrc.brmsfit mcmcRocPrc.bugs mcmcRocPrc.mcmc
> 
> ### ** Examples
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("mcmcRocPrcGen")
> ### * mcmcRocPrcGen
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mcmcRocPrcGen
> ### Title: ROC and Precision-Recall Curves using Bayesian MCMC estimates
> ###   generalized
> ### Aliases: mcmcRocPrcGen
> 
> ### ** Examples
> 
> ## Don't show: 
> .old_wd <- setwd(tempdir())
> ## End(Don't show)
> 
> ## Don't show: 
> setwd(.old_wd)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("mcmcTab")
> ### * mcmcTab
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mcmcTab
> ### Title: Summarize Bayesian MCMC Output R function for summarizing MCMC
> ###   output in a regression-style table.
> ### Aliases: mcmcTab
> 
> ### ** Examples
> 
> ## Don't show: 
> .old_wd <- setwd(tempdir())
> ## End(Don't show)
> 
> ## Don't show: 
> setwd(.old_wd)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("plot.mcmcFD")
> ### * plot.mcmcFD
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.mcmcFD
> ### Title: Plot Method for First Differences from MCMC output
> ### Aliases: plot.mcmcFD
> 
> ### ** Examples
> 
> ## Don't show: 
> .old_wd <- setwd(tempdir())
> ## End(Don't show)
> 
> ## Don't show: 
> setwd(.old_wd)
> ## End(Don't show)
> 
> 
> 
> 
> cleanEx()
> nameEx("sim_data")
> ### * sim_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sim_data
> ### Title: Simulated data for examples
> ### Aliases: sim_data
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## simulating data
> set.seed(123456)
> b0 <- 0.2 # true value for the intercept
> b1 <- 0.5 # true value for first beta
> b2 <- 0.7 # true value for second beta
> n <- 500 # sample size
> X1 <- runif(n, -1, 1)
> X2 <- runif(n, -1, 1)
> Z <- b0 + b1 * X1 + b2 * X2
> pr <- 1 / (1 + exp(-Z)) # inv logit function
> Y <- rbinom(n, 1, pr) 
> sim_data <- data.frame(cbind(X1, X2, Y))
> 
> 
> 
> cleanEx()
> nameEx("sim_data_interactive")
> ### * sim_data_interactive
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sim_data_interactive
> ### Title: Simulated data for examples
> ### Aliases: sim_data_interactive
> ### Keywords: datasets
> 
> ### ** Examples
> 
> set.seed(123456)
> b0 <- 0.2 # true value for the intercept
> b1 <- 0.5 # true value for first beta
> b2 <- 0.7 # true value for second beta
> b3 <- -0.3 # true value for second beta
> n <- 500 # sample size
> X1 <- runif(n, -1, 1)
> X2 <- runif(n, -1, 1)
> Z_interactive <- b0 + b1 * X1 + b2 * X2 + b3 * (X1 * X2)
> Y_interactive <- rnorm(n, Z_interactive, 1)
> sim_data_interactive <- data.frame(cbind(X1, X2, Y = Y_interactive))
> 
> 
> 
> cleanEx()
> nameEx("sim_data_interactive_cat")
> ### * sim_data_interactive_cat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sim_data_interactive_cat
> ### Title: Simulated data for examples
> ### Aliases: sim_data_interactive_cat
> ### Keywords: datasets
> 
> ### ** Examples
> 
> set.seed(123456)
> b0 <- 0.2 # true value for the intercept
> b1 <- 0.5 # true value for first beta
> b2 <- 0.7 # true value for second beta
> b3 <- -0.3 # true value for second beta
> n <- 500 # sample size
> X1 <- runif(n, -1, 1)
> X3 <- rbinom(n, 5, .23)
> Z_interactive_cat <- b0 + b1 * X1 + b2 * X3 + b3 * (X1 * X3)
> Y_interactive_cat <- rnorm(n, Z_interactive_cat, 1)
> sim_data_interactive_cat <- data.frame(cbind(X1, X3, Y = Y_interactive_cat))
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.438 0.031 0.475 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
