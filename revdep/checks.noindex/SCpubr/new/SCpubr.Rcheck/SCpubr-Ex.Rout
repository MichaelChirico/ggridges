
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "SCpubr"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('SCpubr')


── SCpubr 2.0.2 ────────────────────────────────────────────────────────────────

ℹ Have a look at extensive tutorials in SCpubr's book.

✔ If you use SCpubr in your research, please cite it accordingly.

★ If the package is useful to you, consider leaving a Star in the GitHub repository.

! Keep track of the package updates on Twitter (@Enblacar) or in the Official NEWS website.

♥ Happy plotting!



── Tips! ──

ℹ To remove the white and black end from continuous palettes, use: options("SCpubr.ColorPaletteEnds" = FALSE)

✖ To suppress this startup message, use: suppressPackageStartupMessages(library(SCpubr))
✖ Alternatively, you can also set the following option: options("SCpubr.verbose" = FALSE)
  And then load the package normally (and faster) as: library(SCpubr)

────────────────────────────────────────────────────────────────────────────────
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("do_AlluvialPlot")
> ### * do_AlluvialPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: do_AlluvialPlot
> ### Title: Generate Alluvial plots.
> ### Aliases: do_AlluvialPlot
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("do_BarPlot")
> ### * do_BarPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: do_BarPlot
> ### Title: Create Bar Plots.
> ### Aliases: do_BarPlot
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("do_BeeSwarmPlot")
> ### * do_BeeSwarmPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: do_BeeSwarmPlot
> ### Title: BeeSwarm plot.
> ### Aliases: do_BeeSwarmPlot
> 
> ### ** Examples
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("do_BoxPlot")
> ### * do_BoxPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: do_BoxPlot
> ### Title: Generate Box Plots.
> ### Aliases: do_BoxPlot
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("do_CellularStatesPlot")
> ### * do_CellularStatesPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: do_CellularStatesPlot
> ### Title: Cellular States plot.
> ### Aliases: do_CellularStatesPlot
> 
> ### ** Examples
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("do_ChordDiagramPlot")
> ### * do_ChordDiagramPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: do_ChordDiagramPlot
> ### Title: Generate a Chord diagram.
> ### Aliases: do_ChordDiagramPlot
> 
> ### ** Examples
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("do_ColorPalette")
> ### * do_ColorPalette
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: do_ColorPalette
> ### Title: Generate color scales based on a value.
> ### Aliases: do_ColorPalette
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("do_CopyNumberVariantPlot")
> ### * do_CopyNumberVariantPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: do_CopyNumberVariantPlot
> ### Title: Display CNV scores from inferCNV as Feature Plots.
> ### Aliases: do_CopyNumberVariantPlot
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("do_CorrelationPlot")
> ### * do_CorrelationPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: do_CorrelationPlot
> ### Title: Create correlation matrix heatmaps.
> ### Aliases: do_CorrelationPlot
> 
> ### ** Examples
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("do_DimPlot")
> ### * do_DimPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: do_DimPlot
> ### Title: Wrapper for DimPlot.
> ### Aliases: do_DimPlot
> 
> ### ** Examples
> 
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("do_DotPlot")
> ### * do_DotPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: do_DotPlot
> ### Title: This function is a wrapper for DotPlot. It provides most of its
> ###   functionalities while adding extra. You can
> ### Aliases: do_DotPlot
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("do_EnrichmentHeatmap")
> ### * do_EnrichmentHeatmap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: do_EnrichmentHeatmap
> ### Title: Create enrichment scores heatmaps.
> ### Aliases: do_EnrichmentHeatmap
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("do_ExpressionHeatmap")
> ### * do_ExpressionHeatmap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: do_ExpressionHeatmap
> ### Title: Create heatmaps of averaged expression by groups.
> ### Aliases: do_ExpressionHeatmap
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("do_FeaturePlot")
> ### * do_FeaturePlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: do_FeaturePlot
> ### Title: Wrapper for FeaturePlot.
> ### Aliases: do_FeaturePlot
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("do_FunctionalAnnotationPlot")
> ### * do_FunctionalAnnotationPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: do_FunctionalAnnotationPlot
> ### Title: Compute functional annotation plots using GO or KEGG ontologies
> ### Aliases: do_FunctionalAnnotationPlot
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("do_GeyserPlot")
> ### * do_GeyserPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: do_GeyserPlot
> ### Title: Generate a Geyser plot.
> ### Aliases: do_GeyserPlot
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("do_GroupedGOTermPlot")
> ### * do_GroupedGOTermPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: do_GroupedGOTermPlot
> ### Title: Compute an overview of the GO terms associated with the input
> ###   list of genes.
> ### Aliases: do_GroupedGOTermPlot
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("do_GroupwiseDEPlot")
> ### * do_GroupwiseDEPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: do_GroupwiseDEPlot
> ### Title: Compute a heatmap with the results of a group-wise DE analysis.
> ### Aliases: do_GroupwiseDEPlot
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("do_NebulosaPlot")
> ### * do_NebulosaPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: do_NebulosaPlot
> ### Title: Wrapper for Nebulosa::plot_density in Seurat.
> ### Aliases: do_NebulosaPlot
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("do_PathwayActivityPlot")
> ### * do_PathwayActivityPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: do_PathwayActivityPlot
> ### Title: Plot Pathway Activities from decoupleR using Progeny prior
> ###   knowledge.
> ### Aliases: do_PathwayActivityPlot
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("do_RidgePlot")
> ### * do_RidgePlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: do_RidgePlot
> ### Title: Create ridge plots.
> ### Aliases: do_RidgePlot
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("do_TFActivityPlot")
> ### * do_TFActivityPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: do_TFActivityPlot
> ### Title: Plot TF Activities from decoupleR using Dorothea prior
> ###   knowledge.
> ### Aliases: do_TFActivityPlot
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("do_TermEnrichmentPlot")
> ### * do_TermEnrichmentPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: do_TermEnrichmentPlot
> ### Title: Display the enriched terms for a given list of genes.
> ### Aliases: do_TermEnrichmentPlot
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("do_ViolinPlot")
> ### * do_ViolinPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: do_ViolinPlot
> ### Title: Wrapper for VlnPlot.
> ### Aliases: do_ViolinPlot
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("do_VolcanoPlot")
> ### * do_VolcanoPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: do_VolcanoPlot
> ### Title: Compute a Volcano plot out of DE genes.
> ### Aliases: do_VolcanoPlot
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("doc_function")
> ### * doc_function
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: doc_function
> ### Title: Mock function used to document all main function.
> ### Aliases: doc_function
> ### Keywords: internal
> 
> ### ** Examples
> 
> 
> # This a mock function that stores the documentation for many other functions.
> # It is not intended for user usage.
> 
> 
> 
> cleanEx()
> nameEx("named_list")
> ### * named_list
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: named_list
> ### Title: Named list.
> ### Aliases: named_list
> ### Keywords: internal
> 
> ### ** Examples
> 
> # This is a named vector.
> x <- list("first_element" = c("GENE A", "GENE B"),
+           "second_element" = c("GENE C", "GENE D"))
> print(x)
$first_element
[1] "GENE A" "GENE B"

$second_element
[1] "GENE C" "GENE D"

> 
> 
> 
> 
> cleanEx()
> nameEx("named_vector")
> ### * named_vector
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: named_vector
> ### Title: Named vector.
> ### Aliases: named_vector
> ### Keywords: internal
> 
> ### ** Examples
> 
> # This is a named vector.
> x <- c("first_element" = 3,
+        "second_element" = TRUE)
> print(x)
 first_element second_element 
             3              1 
> 
> 
> 
> 
> cleanEx()
> nameEx("package_report")
> ### * package_report
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: package_report
> ### Title: Generate a status report of SCpubr and its dependencies.
> ### Aliases: package_report
> 
> ### ** Examples
> 
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.137 0.01 0.146 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
