
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "forestecology"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('forestecology')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("add_buffer_variable")
> ### * add_buffer_variable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_buffer_variable
> ### Title: Identify trees in the buffer region
> ### Aliases: add_buffer_variable
> 
> ### ** Examples
> 
> library(tibble)
> library(sfheaders)
> library(ggplot2)
> 
> # Example square region to be buffered
> region <- tibble(
+   x = c(0, 0, 1, 1),
+   y = c(0, 1, 1, 0)
+ ) %>%
+   sf_polygon()
> 
> # Example points
> study_points <- tibble(
+   x = runif(50),
+   y = runif(50)
+ ) %>%
+   sf_point()
> 
> # Size of buffer
> size <- 0.05
> 
> # Identify whether points are within size of boundary
> study_points <- study_points %>%
+   add_buffer_variable(direction = "in", size = size, region = region)
> 
> # Plot study points coded by whether they are within size of boundary
> p <- ggplot() +
+   geom_sf(data = region, fill = "transparent") +
+   geom_sf(data = study_points, aes(col = buffer))
> p
> 
> # Additionally, show buffer boundary in red
> buffer_boundary <- region %>%
+   compute_buffer_region(direction = "in", size = size)
> p +
+   geom_sf(data = buffer_boundary, col = "red", fill = "transparent")
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:sfheaders’, ‘package:tibble’

> nameEx("autoplot.comp_bayes_lm")
> ### * autoplot.comp_bayes_lm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: autoplot.comp_bayes_lm
> ### Title: Plot Bayesian model parameters
> ### Aliases: autoplot.comp_bayes_lm
> 
> ### ** Examples
> 
> library(ggplot2)
> library(ggridges)
> 
> # Load in posterior parameter example
> data(comp_bayes_lm_ex)
> 
> # Plot beta_0, growth intercepts
> autoplot(comp_bayes_lm_ex, type = "intercepts")
Picking joint bandwidth of 0.0641
> 
> # Plot beta_dbh, growth-dbh slope
> autoplot(comp_bayes_lm_ex, type = "dbh_slopes")
Picking joint bandwidth of 0.00348
> 
> # Plot lambdas, competition coefficients
> autoplot(comp_bayes_lm_ex, type = "competition")
Picking joint bandwidth of 0.071
Picking joint bandwidth of 0.0994
> 
> 
> 
> cleanEx()

detaching ‘package:ggridges’, ‘package:ggplot2’

> nameEx("blocks_ex")
> ### * blocks_ex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: blocks_ex
> ### Title: Example cross validation grid
> ### Aliases: blocks_ex
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(ggplot2)
> library(sf)
Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> 
> comp_dist <- 1
> 
> ggplot(blocks_ex) +
+   geom_sf() +
+   geom_sf(data = growth_spatial_ex)
> 
> focal_vs_comp_ex <- growth_spatial_ex %>%
+   mutate(basal_area = 0.0001 * pi * (dbh1 / 2)^2) %>%
+   create_focal_vs_comp(comp_dist, blocks = blocks_ex, id = "ID", comp_x_var = "basal_area")
> 
> 
> 
> cleanEx()

detaching ‘package:dplyr’, ‘package:sf’, ‘package:ggplot2’

> nameEx("census_1_ex")
> ### * census_1_ex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: census_1_ex
> ### Title: Example input census data for package use
> ### Aliases: census_1_ex
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(stringr)
> 
> growth_ex <-
+   compute_growth(
+     census_1 = census_1_ex %>%
+       mutate(sp = to_any_case(sp) %>% factor()),
+     census_2 = census_2_ex %>%
+       filter(!str_detect(codes, "R")) %>%
+       mutate(sp = to_any_case(sp) %>% factor()),
+     id = "ID"
+   )
> 
> 
> 
> cleanEx()

detaching ‘package:stringr’, ‘package:dplyr’

> nameEx("census_2008_bw")
> ### * census_2008_bw
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: census_2008_bw
> ### Title: Michigan Big Woods research plot data
> ### Aliases: census_2008_bw
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(ggplot2)
> library(sf)
Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE
> 
> # Convert all 2008 plot stems to sf object
> census_2008_bw_sf <- census_2008_bw %>%
+   st_as_sf(coords = c("gx", "gy"))
> 
> # Plot stems with plot boundary
> ggplot() +
+   geom_sf(data = census_2008_bw_sf, size = 0.25)
> 
> 
> 
> cleanEx()

detaching ‘package:sf’, ‘package:ggplot2’

> nameEx("census_2014_bw")
> ### * census_2014_bw
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: census_2014_bw
> ### Title: Michigan Big Woods research plot data
> ### Aliases: census_2014_bw
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(ggplot2)
> library(sf)
Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> 
> # Convert all 2008 plot stems to sf object
> census_2008_bw_sf <- census_2008_bw %>%
+   st_as_sf(coords = c("gx", "gy"))
> 
> # Plot stems with plot boundary
> ggplot() +
+   geom_sf(data = census_2008_bw_sf, size = 0.25)
> 
> # Species-specific mortality between 2008 and 2014 censuses
> census_2008_bw %>%
+   left_join(census_2014_bw, by = c("treeID", "stemID"), suffix = c("_2008", "_2014")) %>%
+   mutate(mortality = ifelse(is.na(dbh_2014), 1, 0)) %>%
+   group_by(sp_2008) %>%
+   summarize(mortality = mean(mortality), n = n()) %>%
+   arrange(desc(n))
# A tibble: 36 × 3
   sp_2008              mortality     n
   <chr>                    <dbl> <int>
 1 black_cherry            0.203   9079
 2 red_maple               0.112   5958
 3 witch_hazel             0.239   3481
 4 serviceberry            0.122   1506
 5 white_oak               0.0771  1180
 6 black_oak               0.203   1171
 7 pignut_hickory          0.0346  1128
 8 sassafras               0.316    735
 9 american_elm            0.0880   591
10 black_red_oak_hybrid    0        536
# ℹ 26 more rows
> 
> 
> 
> cleanEx()

detaching ‘package:dplyr’, ‘package:sf’, ‘package:ggplot2’

> nameEx("census_2_ex")
> ### * census_2_ex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: census_2_ex
> ### Title: Example input census data for package use
> ### Aliases: census_2_ex
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(stringr)
> 
> growth_ex <-
+   compute_growth(
+     census_1 = census_1_ex %>%
+       mutate(sp = to_any_case(sp) %>% factor()),
+     census_2 = census_2_ex %>%
+       filter(!str_detect(codes, "R")) %>%
+       mutate(sp = to_any_case(sp) %>% factor()),
+     id = "ID"
+   )
> 
> 
> 
> cleanEx()

detaching ‘package:stringr’, ‘package:dplyr’

> nameEx("comp_bayes_lm")
> ### * comp_bayes_lm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: comp_bayes_lm
> ### Title: Fit Bayesian competition model
> ### Aliases: comp_bayes_lm
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> 
> # Load in focal versus comp
> data(focal_vs_comp_ex)
> 
> comp_bayes_lm_ex <- focal_vs_comp_ex %>%
+   comp_bayes_lm(prior_param = NULL, run_shuffle = FALSE)
> 
> 
> 
> cleanEx()

detaching ‘package:dplyr’

> nameEx("comp_bayes_lm_ex")
> ### * comp_bayes_lm_ex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: comp_bayes_lm_ex
> ### Title: Example bayesian competition model fit
> ### Aliases: comp_bayes_lm_ex
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(yardstick)
> 
> # Compare model predictions to observation
> predictions <- focal_vs_comp_ex %>%
+   mutate(growth_hat = predict(comp_bayes_lm_ex, focal_vs_comp_ex))
> 
> predictions %>%
+   rmse(truth = growth, estimate = growth_hat) %>%
+   pull(.estimate)
[1] 0.1900981
> 
> # Plot posterior parameters
> comp_bayes_lm_ex %>%
+   autoplot()
Picking joint bandwidth of 0.0641
> 
> 
> 
> cleanEx()

detaching ‘package:yardstick’, ‘package:dplyr’

> nameEx("compute_buffer_region")
> ### * compute_buffer_region
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compute_buffer_region
> ### Title: Compute buffer to a region.
> ### Aliases: compute_buffer_region
> 
> ### ** Examples
> 
> library(tibble)
> library(sfheaders)
> library(ggplot2)
> 
> # Example square region to be buffered (as sf object)
> region <- tibble(
+   x = c(0, 0, 1, 1),
+   y = c(0, 1, 1, 0)
+ ) %>%
+   sf_polygon()
> 
> # Size of buffer
> size <- 0.05
> 
> # Compute "inwards" buffer
> inwards_buffer_region <- region %>%
+   compute_buffer_region(direction = "in", size = size)
> 
> # Compute "outwards" buffer
> outwards_buffer_region <- region %>%
+   compute_buffer_region(direction = "out", size = size)
> 
> # Plot all three regions:
> ggplot() +
+   geom_sf(data = outwards_buffer_region, col = "blue", fill = "transparent") +
+   geom_sf(data = region, fill = "transparent") +
+   geom_sf(data = inwards_buffer_region, col = "orange", fill = "transparent") +
+   labs(title = "Regions: original (black), inwards buffer (orange), and outwards buffer (blue)")
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:sfheaders’, ‘package:tibble’

> nameEx("compute_growth")
> ### * compute_growth
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compute_growth
> ### Title: Compute growth of trees
> ### Aliases: compute_growth
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(stringr)
> 
> growth_ex <-
+   compute_growth(
+     census_1 = census_1_ex %>%
+       mutate(sp = to_any_case(sp) %>% factor()),
+     census_2 = census_2_ex %>%
+       filter(!str_detect(codes, "R")) %>%
+       mutate(sp = to_any_case(sp) %>% factor()),
+     id = "ID"
+   )
> 
> 
> 
> cleanEx()

detaching ‘package:stringr’, ‘package:dplyr’

> nameEx("create_bayes_lm_data")
> ### * create_bayes_lm_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create_bayes_lm_data
> ### Title: Create input data frame for Bayesian regression
> ### Aliases: create_bayes_lm_data
> 
> ### ** Examples
> 
> create_bayes_lm_data(focal_vs_comp_ex)
# A tibble: 6 × 6
  focal_ID sp               dbh growth american_beech sugar_maple
     <dbl> <fct>          <dbl>  <dbl>          <dbl>       <dbl>
1        2 american_beech    20  0.800         0           0.0196
2        3 sugar_maple       15  1.00          0.0314      0     
3        4 american_beech    12  0.400         0           0.0962
4        5 sugar_maple       35  1.40          0.0113      0     
5        7 sugar_maple       22  0.600         0.0167      0.139 
6        9 sugar_maple       42  1.40          0.0167      0.0380
> 
> 
> 
> cleanEx()
> nameEx("create_focal_vs_comp")
> ### * create_focal_vs_comp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create_focal_vs_comp
> ### Title: Create focal versus competitor trees data frame
> ### Aliases: create_focal_vs_comp
> 
> ### ** Examples
> 
> library(ggplot2)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(stringr)
> library(sf)
Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE
> library(sfheaders)
> library(tibble)
> 
> # Create fold information sf object.
> SpatialBlock_ex <-
+   tibble(
+     # Study region boundary
+     x = c(0, 0, 5, 5),
+     y = c(0, 5, 5, 0)
+   ) %>%
+   # Convert to sf object
+   sf_polygon() %>%
+   mutate(folds = "1")
> 
> # Plot example data. Observe for comp_dist = 1.5, there are 6 focal vs comp pairs:
> # 1. focal 1 vs comp 2
> # 2. focal 2 vs comp 1
> # 3. focal 2 vs comp 3
> # 4. focal 3 vs comp 2
> # 5. focal 4 vs comp 5
> # 6. focal 5 vs comp 4
> ggplot() +
+   geom_sf(data = SpatialBlock_ex, fill = "transparent") +
+   geom_sf_label(data = growth_toy, aes(label = ID))
> 
> # Return corresponding data frame
> growth_toy %>%
+   mutate(basal_area = 0.0001 * pi * (dbh1 / 2)^2) %>%
+   create_focal_vs_comp(comp_dist = 1.5, blocks = SpatialBlock_ex, id = "ID",
+                        comp_x_var = "basal_area")
# A tibble: 5 × 7
  focal_ID focal_sp       dbh foldID geometry growth comp            
     <int> <fct>        <dbl> <fct>   <POINT>  <dbl> <list>          
1        1 tulip poplar    40 1         (1 4)      1 <tibble [1 × 4]>
2        2 red oak         25 1         (1 3)      2 <tibble [2 × 4]>
3        3 red oak         30 1         (1 2)      1 <tibble [1 × 4]>
4        4 tulip poplar    35 1         (4 1)      3 <tibble [1 × 4]>
5        5 tulip poplar    20 1         (4 2)      2 <tibble [1 × 4]>
> 
> # Load in growth_df with spatial data
> # See ?growth_ex for attaching spatial data to growth_df
> data(growth_spatial_ex)
> # Load in blocks
> data(blocks_ex)
> 
> focal_vs_comp_ex <- growth_spatial_ex %>%
+   mutate(basal_area = 0.0001 * pi * (dbh1 / 2)^2) %>%
+   create_focal_vs_comp(comp_dist = 1, blocks = blocks_ex, id = "ID",
+                        comp_x_var = "basal_area")
> 
> 
> 
> cleanEx()

detaching ‘package:tibble’, ‘package:sfheaders’, ‘package:sf’,
  ‘package:stringr’, ‘package:dplyr’, ‘package:ggplot2’

> nameEx("focal_vs_comp_distance")
> ### * focal_vs_comp_distance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: focal_vs_comp_distance
> ### Title: Return all pairwise distances between two data frames of trees
> ### Aliases: focal_vs_comp_distance
> 
> ### ** Examples
> 
> library(tibble)
> library(ggplot2)
> library(sf)
Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE
> 
> # Create toy example focal and competitor trees
> focal_trees <- tibble(
+   focal_ID = c(1, 2, 3),
+   x = c(0.3, 0.6, 0.7),
+   y = c(0.1, 0.5, 0.7)
+ ) %>%
+   st_as_sf(coords = c("x", "y"))
> 
> comp_trees <- tibble(
+   comp_ID = c(4, 5, 6, 7),
+   x = c(0, 0.2, 0.4, 0.6),
+   y = c(0.6, 0.7, 1, 0.2)
+ ) %>%
+   st_as_sf(coords = c("x", "y"))
> 
> # Plot both sets of trees
> ggplot() +
+   geom_sf_label(data = focal_trees, aes(label = focal_ID), col = "black") +
+   geom_sf_label(data = comp_trees, aes(label = comp_ID), col = "orange") +
+   labs(title = "Focal trees in black, competitor trees in orange")
> 
> # Compute corresponding distances between the 3 focal trees and 4 competitor trees
> focal_vs_comp_distance(focal_trees, comp_trees)
# A tibble: 12 × 3
   focal_ID comp_ID  dist
      <dbl>   <dbl> <dbl>
 1        1       4 0.583
 2        1       5 0.608
 3        1       6 0.906
 4        1       7 0.316
 5        2       4 0.608
 6        2       5 0.447
 7        2       6 0.539
 8        2       7 0.3  
 9        3       4 0.707
10        3       5 0.5  
11        3       6 0.424
12        3       7 0.510
> 
> 
> 
> cleanEx()

detaching ‘package:sf’, ‘package:ggplot2’, ‘package:tibble’

> nameEx("focal_vs_comp_ex")
> ### * focal_vs_comp_ex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: focal_vs_comp_ex
> ### Title: Example focal versus comp data frame
> ### Aliases: focal_vs_comp_ex
> ### Keywords: datasets
> 
> ### ** Examples
> 
> comp_bayes_lm_ex <- focal_vs_comp_ex %>%
+   comp_bayes_lm(prior_param = NULL, run_shuffle = FALSE)
> 
> 
> 
> cleanEx()
> nameEx("growth_ex")
> ### * growth_ex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: growth_ex
> ### Title: Example growth data frame for small example
> ### Aliases: growth_ex
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(ggplot2)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(sf)
Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE
> library(sfheaders)
> library(blockCV)
blockCV 3.1.3
> 
> growth_ex %>%
+   ggplot() +
+   geom_sf()
> 
> growth_ex %>%
+   group_by(sp) %>%
+   summarize(mean(growth))
Simple feature collection with 2 features and 2 fields
Geometry type: MULTIPOINT
Dimension:     XY
Bounding box:  xmin: 0.75 ymin: 0.75 xmax: 8.75 ymax: 4.5
CRS:           NA
# A tibble: 2 × 3
  sp             `mean(growth)`                                         geometry
  <fct>                   <dbl>                                     <MULTIPOINT>
1 american_beech         NA     ((1.5 2.5), (3 1.5), (5.5 4.5), (8.5 0.75), (8.…
2 sugar_maple             0.920 ((0.75 2.5), (1.75 2.25), (3.25 1.75), (8 1.5),…
> 
> # Add buffer
> growth_spatial_ex <- growth_ex %>%
+   add_buffer_variable(direction = "in", size = 1, region = study_region_ex)
> 
> # Add cross-validation folds
> fold1 <- rbind(c(0, 0), c(5, 0), c(5, 5), c(0, 5), c(0, 0))
> fold2 <- rbind(c(5, 0), c(10, 0), c(10, 5), c(5, 5), c(5, 0))
> blocks <- bind_rows(
+   sf_polygon(fold1),
+   sf_polygon(fold2)
+ ) %>%
+   mutate(foldID = c(1, 2))
> 
> SpatialBlock_ex <- spatialBlock(
+   speciesData = growth_ex,
+   verbose = FALSE,
+   k = 2,
+   selection = "systematic",
+   blocks = blocks
+ )
This function is deprecated! Please use 'cv_spatial' instead.
> 
> # Add foldID to data
> growth_spatial_ex <- growth_spatial_ex %>%
+   mutate(foldID = SpatialBlock_ex$foldID %>% as.factor())
> 
> 
> 
> cleanEx()

detaching ‘package:blockCV’, ‘package:sfheaders’, ‘package:sf’,
  ‘package:dplyr’, ‘package:ggplot2’

> nameEx("growth_spatial_ex")
> ### * growth_spatial_ex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: growth_spatial_ex
> ### Title: Example growth data frame with spatial data for small example
> ### Aliases: growth_spatial_ex
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(ggplot2)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(sf)
Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE
> 
> comp_dist <- 1
> 
> ggplot() +
+   geom_sf(data = growth_spatial_ex, aes(col = buffer), size = 2)
> 
> ggplot() +
+   geom_sf(data = growth_spatial_ex, aes(col = foldID), size = 2)
> 
> # Create the focal versus comp data frame
> focal_vs_comp_ex <- growth_spatial_ex %>%
+   mutate(basal_area = 0.0001 * pi * (dbh1 / 2)^2) %>%
+   create_focal_vs_comp(comp_dist, blocks = blocks_ex, id = "ID", comp_x_var = "basal_area")
> 
> 
> 
> cleanEx()

detaching ‘package:sf’, ‘package:dplyr’, ‘package:ggplot2’

> nameEx("predict.comp_bayes_lm")
> ### * predict.comp_bayes_lm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predict.comp_bayes_lm
> ### Title: Make predictions based on fitted Bayesian model
> ### Aliases: predict.comp_bayes_lm
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(sf)
Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE
> library(ggplot2)
> 
> # Load in posterior parameter example
> # and growth data to compare to
> data(comp_bayes_lm_ex, growth_ex)
> 
> predictions <- focal_vs_comp_ex %>%
+   mutate(growth_hat = predict(comp_bayes_lm_ex, focal_vs_comp_ex))
> 
> predictions %>%
+   ggplot(aes(growth, growth_hat)) +
+   geom_point() +
+   geom_abline(slope = 1, intercept = 0)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:sf’, ‘package:dplyr’

> nameEx("run_cv")
> ### * run_cv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: run_cv
> ### Title: Run the bayesian model with spatial cross validation
> ### Aliases: run_cv
> 
> ### ** Examples
> 
> 
> run_cv(
+   focal_vs_comp_ex,
+   comp_dist = 1,
+   blocks = blocks_ex
+ )
# A tibble: 6 × 8
  focal_ID focal_sp         dbh foldID    geometry growth comp            
     <dbl> <fct>          <dbl> <fct>      <POINT>  <dbl> <list>          
1        2 american_beech    20 1        (1.5 2.5)  0.800 <tibble [2 × 4]>
2        3 sugar_maple       15 1      (1.75 2.25)  1.00  <tibble [1 × 4]>
3        4 american_beech    12 1          (3 1.5)  0.400 <tibble [1 × 4]>
4        5 sugar_maple       35 1      (3.25 1.75)  1.40  <tibble [1 × 4]>
5        7 sugar_maple       22 2          (8 1.5)  0.600 <tibble [3 × 4]>
6        9 sugar_maple       42 2       (8.75 1.5)  1.40  <tibble [3 × 4]>
# ℹ 1 more variable: growth_hat <dbl>
> 
> 
> 
> cleanEx()
> nameEx("species_bw")
> ### * species_bw
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: species_bw
> ### Title: Phylogenic groupings and trait based clustering of various tree
> ###   species
> ### Aliases: species_bw
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> 
> # Original 2008 census data
> census_2008_bw
# A tibble: 27,193 × 8
   treeID stemID sp              gx    gy   dbh date       codes
    <dbl>  <dbl> <chr>        <dbl> <dbl> <dbl> <date>     <chr>
 1      1      1 white_oak      8.7  108.  41.2 2008-07-01 M    
 2      2      1 serviceberry  10.8  109.   5.9 2008-07-01 M    
 3      3      1 black_cherry  11.6  106.  45.2 2008-07-01 M    
 4  14951      1 black_cherry  12    107    3.8 2008-07-01 M    
 5      4      1 red_maple     12.5  108.   4.1 2008-07-01 M    
 6      5      1 red_maple     12.5  106.   4.6 2008-07-01 M    
 7      6      1 red_maple     13.3  107.   8.3 2008-07-01 M    
 8      7      1 red_maple     14.9  106.   6.1 2008-07-01 M    
 9      8      1 red_maple     15.6  109    7.7 2008-07-01 M    
10      9      1 red_maple     16.5  108.   4   2008-07-01 M    
# ℹ 27,183 more rows
> 
> # 2008 census data with additional species information
> census_2008_bw %>%
+   left_join(species_bw, by = "sp")
# A tibble: 27,193 × 13
   treeID stemID sp          gx    gy   dbh date       codes genus species latin
    <dbl>  <dbl> <chr>    <dbl> <dbl> <dbl> <date>     <chr> <chr> <chr>   <chr>
 1      1      1 white_o…   8.7  108.  41.2 2008-07-01 M     quer… alba    quer…
 2      2      1 service…  10.8  109.   5.9 2008-07-01 M     amel… arborea amel…
 3      3      1 black_c…  11.6  106.  45.2 2008-07-01 M     prun… seroti… prun…
 4  14951      1 black_c…  12    107    3.8 2008-07-01 M     prun… seroti… prun…
 5      4      1 red_map…  12.5  108.   4.1 2008-07-01 M     acer  rubrum  acer…
 6      5      1 red_map…  12.5  106.   4.6 2008-07-01 M     acer  rubrum  acer…
 7      6      1 red_map…  13.3  107.   8.3 2008-07-01 M     acer  rubrum  acer…
 8      7      1 red_map…  14.9  106.   6.1 2008-07-01 M     acer  rubrum  acer…
 9      8      1 red_map…  15.6  109    7.7 2008-07-01 M     acer  rubrum  acer…
10      9      1 red_map…  16.5  108.   4   2008-07-01 M     acer  rubrum  acer…
# ℹ 27,183 more rows
# ℹ 2 more variables: family <chr>, trait_group <chr>
> 
> 
> 
> cleanEx()

detaching ‘package:dplyr’

> nameEx("study_region_bw")
> ### * study_region_bw
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: study_region_bw
> ### Title: Bigwoods forest study region boundary
> ### Aliases: study_region_bw
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(ggplot2)
> library(sf)
Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE
> 
> # Convert all 2008 plot stems to sf object
> census_2008_bw_sf <- census_2008_bw %>%
+   st_as_sf(coords = c("gx", "gy"))
> 
> # Plot stems with plot boundary
> ggplot() +
+   geom_sf(data = census_2008_bw_sf, size = 0.25) +
+   geom_sf(data = study_region_bw, color = "red", fill = "transparent")
> 
> 
> 
> cleanEx()

detaching ‘package:sf’, ‘package:ggplot2’

> nameEx("study_region_ex")
> ### * study_region_ex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: study_region_ex
> ### Title: Study region for example data
> ### Aliases: study_region_ex
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(ggplot2)
> library(sf)
Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE
> 
> # Convert stems to sf object
> census_1_ex_sf <- census_1_ex %>%
+   st_as_sf(coords = c("gx", "gy"))
> 
> # Plot stems with plot boundary
> ggplot() +
+   geom_sf(data = study_region_ex) +
+   geom_sf(data = study_region_bw, color = "red", fill = "transparent")
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:sf’, ‘package:ggplot2’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  4.805 0.19 5.254 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
