
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ezr"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('ezr')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("desc_stats")
> ### * desc_stats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: desc_stats
> ### Title: Descriptive statistics
> ### Aliases: desc_stats
> 
> ### ** Examples
> 
> desc_stats(1:100)
         n       mean         sd     median        min        max se_of_mean 
100.000000  50.500000  29.011492  50.500000   1.000000 100.000000   2.901149 
  skewness   kurtosis 
  0.000000   1.799760 
> desc_stats(c(1:100, NA))
1 observation(s) were removed due to missing values.
         n       mean         sd     median        min        max se_of_mean 
100.000000  50.500000  29.011492  50.500000   1.000000 100.000000   2.901149 
  skewness   kurtosis 
  0.000000   1.799760 
> 
> 
> 
> cleanEx()
> nameEx("histogram_by_group")
> ### * histogram_by_group
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: histogram_by_group
> ### Title: Histogram by group
> ### Aliases: histogram_by_group
> 
> ### ** Examples
> 
> histogram_by_group(data = mtcars, iv_name = "cyl", dv_name = "mpg")
> histogram_by_group(data = mtcars, iv_name = "cyl", dv_name = "mpg",
+ order_of_groups_top_to_bot = c("8", "4"), number_of_bins = 10,
+ space_between_histograms = 0.5)
> 
> 
> 
> cleanEx()
> nameEx("pretty_round_p_value")
> ### * pretty_round_p_value
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pretty_round_p_value
> ### Title: Pretty round p-value
> ### Aliases: pretty_round_p_value
> 
> ### ** Examples
> 
> pretty_round_p_value(p_value_vector = 0.049,
+ round_digits_after_decimal = 2, include_p_equals = FALSE)
[1] ".05"
> pretty_round_p_value(c(0.0015, 0.0014), include_p_equals = TRUE)
[1] "p = .002" "p = .001"
> 
> 
> 
> cleanEx()
> nameEx("scatterplot")
> ### * scatterplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: scatterplot
> ### Title: Scatterplot
> ### Aliases: scatterplot
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("se_of_mean")
> ### * se_of_mean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: se_of_mean
> ### Title: Standard error of the mean
> ### Aliases: se_of_mean
> 
> ### ** Examples
> 
> se_of_mean(c(1:10, NA))
1 observations were removed due to missing values.
[1] 0.9574271
> 
> 
> 
> cleanEx()
> nameEx("start_ezr")
> ### * start_ezr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: start_ezr
> ### Title: Start ezr
> ### Aliases: start_ezr
> 
> ### ** Examples
> 
> if (interactive()) {start_ezr(data = mtcars)}
> 
> 
> 
> cleanEx()
> nameEx("tabulate_vector")
> ### * tabulate_vector
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tabulate_vector
> ### Title: Tabulate vector
> ### Aliases: tabulate_vector
> 
> ### ** Examples
> 
> tabulate_vector(c("a", "b", "b", "c", "c", "c", NA))
      value count percent
1:        c     3      50
2:        b     2      33
3:        a     1      17
4: ..Total:     6     100
> tabulate_vector(c("a", "b", "b", "c", "c", "c", NA),
+ sort_by_increasing_count = TRUE)
      value count percent
1:        a     1      17
2:        b     2      33
3:        c     3      50
4: ..Total:     6     100
> tabulate_vector(c("a", "b", "b", "c", "c", "c", NA),
+ sort_by_decreasing_value = TRUE)
      value count percent
1:        c     3      50
2:        b     2      33
3:        a     1      17
4: ..Total:     6     100
> tabulate_vector(c("a", "b", "b", "c", "c", "c", NA),
+ sort_by_increasing_value = TRUE)
      value count percent
1:        a     1      17
2:        b     2      33
3:        c     3      50
4: ..Total:     6     100
> tabulate_vector(c("a", "b", "b", "c", "c", "c", NA),
+ sigfigs = 4)
      value count percent
1:        c     3   50.00
2:        b     2   33.33
3:        a     1   16.67
4: ..Total:     6  100.00
> tabulate_vector(c("a", "b", "b", "c", "c", "c", NA),
+ round_digits_after_decimal = 1)
      value count percent
1:        c     3    50.0
2:        b     2    33.3
3:        a     1    16.7
4: ..Total:     6   100.0
> tabulate_vector(c("a", "b", "b", "c", "c", "c", NA),
+ output_type = "df")
     value count percent
1        c     3      50
2        b     2      33
3        a     1      17
4 ..Total:     6     100
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.68 0.032 0.776 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
