
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "flowStats"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('flowStats')
Warning: replacing previous import ‘flowViz::contour’ by ‘graphics::contour’ when loading ‘flowStats’
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("SimulateMixture")
> ### * SimulateMixture
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimulateMixture
> ### Title: Random Generation from a t Mixture Model with Box-Cox
> ###   Transformation
> ### Aliases: SimulateMixture
> ### Keywords: datagen
> 
> ### ** Examples
> 
> ### Number of components
> K <- 5
> ### Dimension
> p <- 2
> ### Number of observations
> n <- 200
> Mu <- matrix(runif(K*p, 0, 20), K, p)
> Sigma <- array(0, c(K, p, p))
> 
> for (k in 1:K)
+ {
+     Sigma[k,,][outer(1:p, 1:p, ">")] <- runif(p*(p-1)/2,-.1,.1)
+     diag(Sigma[k,,]) <- runif(p,0,1)
+     ### Make sigma positive definite
+     Sigma[k,,] <- Sigma[k,,] %*% t(Sigma[k,,])
+ }
> 
> ### Generate the weights
> w <- rgamma(K,10,1)
> w <- w/sum(w)
> 
> y <- SimulateMixture(n, w, Mu, Sigma, nu=4)
> 
> 
> 
> cleanEx()
> nameEx("autoGate")
> ### * autoGate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: autoGate
> ### Title: Automated gating of single populations in 2D
> ### Aliases: autoGate
> ### Keywords: misc
> 
> ### ** Examples
> 
> library(flowCore)
> data(GvHD)
> flowStats:::autoGate(GvHD[10:15], "FSC-H"=c(100,500), "SSC-H"=c(0, 400))
$x
A flowSet with 6 experiments.

An object of class 'AnnotatedDataFrame'
  rowNames: s6a03 s6a04 ... s7a01 (6 total)
  varLabels: Patient Visit ... name (5 total)
  varMetadata: labelDescription

column names(8): FSC-H SSC-H ... FL4-H Time


$n2gate
norm2Filter 'defaultNorm2Filter' in dimensions FSC-H and SSC-H with parameters:
  method: covMcd 
  scale.factor: 2.5 
  n: 50000 


$n2gateResults
A list of filterResults for a flowSet containing 6 frames
produced by the filter named 'defaultNorm2Filter'

> 
> 
> 
> 
> cleanEx()

detaching ‘package:flowCore’

> nameEx("binByRef")
> ### * binByRef
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: binByRef
> ### Title: Bin a test data set using bins previously created by probability
> ###   binning a control dataset
> ### Aliases: binByRef
> ### Keywords: misc
> 
> ### ** Examples
> 
> library(flowCore)
> data(GvHD)
> resCtrl<-proBin(GvHD[[1]],200)  
> resSample<-binByRef(resCtrl,GvHD[[2]])
> ls(resSample)
 [1] "1"  "10" "11" "12" "13" "14" "15" "16" "17" "18" "19" "2"  "20" "21" "22"
[16] "23" "24" "25" "26" "27" "28" "29" "3"  "30" "31" "32" "4"  "5"  "6"  "7" 
[31] "8"  "9" 
> 
> 
> 
> cleanEx()

detaching ‘package:flowCore’

> nameEx("calcPBChiSquare")
> ### * calcPBChiSquare
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calcPBChiSquare
> ### Title: Probability binning metirc for comparing the probability binned
> ###   datasets
> ### Aliases: calcPBChiSquare
> ### Keywords: misc
> 
> ### ** Examples
> 
> library(flowCore)
> data(GvHD)
> # flow frame 1 is treated as  control dataset and used to generate bins
> resCtrl<-proBin(GvHD[[1]][,c("FSC-H","SSC-H","Time")],200)  
> plotBins(resCtrl,GvHD[[1]],channels=c("FSC-H","SSC-H","Time"),title="Binned control data")
> # Same bins are applied to flowFrame 16
> resSample<-binByRef(resCtrl,GvHD[[16]][,c("FSC-H","SSC-H","Time")])
> ctrlCount<-nrow(GvHD[[1]])
> sampCount<-nrow(GvHD[[16]])
> stat<-calcPBChiSquare(resCtrl,resSample,ctrlCount,sampCount)
> 
> 
> 
> cleanEx()

detaching ‘package:flowCore’

> nameEx("calcPearsonChi")
> ### * calcPearsonChi
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calcPearsonChi
> ### Title: Pearsons chi-square statistic for comparing the probability
> ###   binned datasets
> ### Aliases: calcPearsonChi
> ### Keywords: misc
> 
> ### ** Examples
> 
> library(flowCore)
> data(GvHD)
> # flow frame 1 is treated as  control dataset and used to generate bins
> resCtrl<-proBin(GvHD[[1]][,c("FSC-H","SSC-H","Time")],200)  
> plotBins(resCtrl,GvHD[[1]],channels=c("FSC-H","SSC-H","Time"),title="Binned control data")
> # Same bins are applied to flowFrame 16
> resSample<-binByRef(resCtrl,GvHD[[16]][,c("FSC-H","SSC-H","Time")])
> stat<-calcPearsonChi(resCtrl,resSample)
> 
> 
> 
> cleanEx()

detaching ‘package:flowCore’

> nameEx("curv1Filter-class")
> ### * curv1Filter-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: curv1Filter-class
> ### Title: Class "curv1Filter"
> ### Aliases: curv1Filter-class curv1Filter show,curv1Filter-method
> ###   %in%,flowFrame,curv1Filter-method
> ###   summarizeFilter,multipleFilterResult,curv1Filter-method
> ### Keywords: classes methods
> 
> ### ** Examples
> 
> 
> library(flowStats)
> library(flowCore)
> ## Loading example data
> dat <- read.FCS(system.file("extdata","0877408774.B08",
+ package="flowCore"))
> 
> ## Create directly. Most likely from a command line
> curv1Filter("FSC-H", filterId="myCurv1Filter", bwFac=2)
1D curvature filter 'myCurv1Filter' in dimension FSC-H
with settings:
  bwFac=2
  gridsize=401,401
> 
> ## To facilitate programmatic construction we also have the following
> c1f <- curv1Filter(filterId="myCurv1Filter", x=list("FSC-H"), bwFac=2)
> 
> ## Filtering using curv1Filter
> fres <- filter(dat, c1f)
> fres
A filterResult produced by the filter named 'myCurv1Filter'
 resulting in multiple populations:
	 rest
	 peak 1
	 peak 2
	 peak 3
	 peak 4
> summary(fres)
rest: 3581 of 10000 events (35.81%)
peak 1: 331 of 10000 events (3.31%)
peak 2: 5575 of 10000 events (55.75%)
peak 3: 455 of 10000 events (4.55%)
peak 4: 58 of 10000 events (0.58%)
> names(fres)
[1] "rest"   "peak 1" "peak 2" "peak 3" "peak 4"
> 
> ## The result of curv1 filtering are multiple sub-populations
> ## and we can split our data set accordingly
> split(dat, fres)
$rest
flowFrame object '0877408774.B08 (rest)'
with 3581 cells and 8 observables:
      name              desc     range  minRange  maxRange
$P1  FSC-H             FSC-H      1024   0.00000      1023
$P2  SSC-H             SSC-H      1024   0.00000      1023
$P3  FL1-H                NA      1024   1.00904     10000
$P4  FL2-H                NA      1024   1.00904     10000
$P5  FL3-H                NA      1024   1.00904     10000
$P6  FL1-A                NA      1024   0.00000      1023
$P7  FL4-H                NA      1024   1.00904     10000
$P8   Time Time (51.20 sec.)      1024   0.00000      1023
165 keywords are stored in the 'description' slot

$`peak 1`
flowFrame object '0877408774.B08 (peak 1)'
with 331 cells and 8 observables:
      name              desc     range  minRange  maxRange
$P1  FSC-H             FSC-H      1024   0.00000      1023
$P2  SSC-H             SSC-H      1024   0.00000      1023
$P3  FL1-H                NA      1024   1.00904     10000
$P4  FL2-H                NA      1024   1.00904     10000
$P5  FL3-H                NA      1024   1.00904     10000
$P6  FL1-A                NA      1024   0.00000      1023
$P7  FL4-H                NA      1024   1.00904     10000
$P8   Time Time (51.20 sec.)      1024   0.00000      1023
165 keywords are stored in the 'description' slot

$`peak 2`
flowFrame object '0877408774.B08 (peak 2)'
with 5575 cells and 8 observables:
      name              desc     range  minRange  maxRange
$P1  FSC-H             FSC-H      1024   0.00000      1023
$P2  SSC-H             SSC-H      1024   0.00000      1023
$P3  FL1-H                NA      1024   1.00904     10000
$P4  FL2-H                NA      1024   1.00904     10000
$P5  FL3-H                NA      1024   1.00904     10000
$P6  FL1-A                NA      1024   0.00000      1023
$P7  FL4-H                NA      1024   1.00904     10000
$P8   Time Time (51.20 sec.)      1024   0.00000      1023
165 keywords are stored in the 'description' slot

$`peak 3`
flowFrame object '0877408774.B08 (peak 3)'
with 455 cells and 8 observables:
      name              desc     range  minRange  maxRange
$P1  FSC-H             FSC-H      1024   0.00000      1023
$P2  SSC-H             SSC-H      1024   0.00000      1023
$P3  FL1-H                NA      1024   1.00904     10000
$P4  FL2-H                NA      1024   1.00904     10000
$P5  FL3-H                NA      1024   1.00904     10000
$P6  FL1-A                NA      1024   0.00000      1023
$P7  FL4-H                NA      1024   1.00904     10000
$P8   Time Time (51.20 sec.)      1024   0.00000      1023
165 keywords are stored in the 'description' slot

$`peak 4`
flowFrame object '0877408774.B08 (peak 4)'
with 58 cells and 8 observables:
      name              desc     range  minRange  maxRange
$P1  FSC-H             FSC-H      1024   0.00000      1023
$P2  SSC-H             SSC-H      1024   0.00000      1023
$P3  FL1-H                NA      1024   1.00904     10000
$P4  FL2-H                NA      1024   1.00904     10000
$P5  FL3-H                NA      1024   1.00904     10000
$P6  FL1-A                NA      1024   0.00000      1023
$P7  FL4-H                NA      1024   1.00904     10000
$P8   Time Time (51.20 sec.)      1024   0.00000      1023
165 keywords are stored in the 'description' slot

> 
> ## We can limit the splitting to one or several sub-populations
> split(dat, fres, population="rest")
$rest
flowFrame object '0877408774.B08 (rest)'
with 3581 cells and 8 observables:
      name              desc     range  minRange  maxRange
$P1  FSC-H             FSC-H      1024   0.00000      1023
$P2  SSC-H             SSC-H      1024   0.00000      1023
$P3  FL1-H                NA      1024   1.00904     10000
$P4  FL2-H                NA      1024   1.00904     10000
$P5  FL3-H                NA      1024   1.00904     10000
$P6  FL1-A                NA      1024   0.00000      1023
$P7  FL4-H                NA      1024   1.00904     10000
$P8   Time Time (51.20 sec.)      1024   0.00000      1023
165 keywords are stored in the 'description' slot

> split(dat, fres, population=list(keep=c("peak 2", "peak 3")))
$keep
flowFrame object '0877408774.B08 (peak 2,peak 3)'
with 6030 cells and 8 observables:
      name              desc     range  minRange  maxRange
$P1  FSC-H             FSC-H      1024   0.00000      1023
$P2  SSC-H             SSC-H      1024   0.00000      1023
$P3  FL1-H                NA      1024   1.00904     10000
$P4  FL2-H                NA      1024   1.00904     10000
$P5  FL3-H                NA      1024   1.00904     10000
$P6  FL1-A                NA      1024   0.00000      1023
$P7  FL4-H                NA      1024   1.00904     10000
$P8   Time Time (51.20 sec.)      1024   0.00000      1023
3 keywords are stored in the 'description' slot

> 
> 
> 
> 
> cleanEx()

detaching ‘package:flowCore’

> nameEx("curv2Filter-class")
> ### * curv2Filter-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: curv2Filter-class
> ### Title: Class "curv2Filter"
> ### Aliases: curv2Filter-class curv2Filter show,curv2Filter-method
> ###   %in%,flowFrame,curv2Filter-method
> ###   summarizeFilter,multipleFilterResult,curv2Filter-method
> ### Keywords: classes methods
> 
> ### ** Examples
> 
> library(flowCore)
> ## Loading example data
> dat <- read.FCS(system.file("extdata","0877408774.B08",
+ package="flowCore"))
> 
> ## Create directly. Most likely from a command line
> curv2Filter("FSC-H", "SSC-H", filterId="myCurv2Filter")
2D curvature filter 'myCurv2Filter' in dimensions FSC-H and SSC-H
with settings:
  bwFac=1.2
  gridsize=151,151
> 
> ## To facilitate programmatic construction we also have the following
> c2f <- curv2Filter(filterId="myCurv2Filter", x=list("FSC-H", "SSC-H"),
+ bwFac=2)
> c2f <- curv2Filter(filterId="myCurv2Filter", x=c("FSC-H", "SSC-H"),
+ bwFac=2)
> 
> ## Filtering using curv2Filter
> fres <- filter(dat, c2f)
> fres
A filterResult produced by the filter named 'myCurv2Filter'
 resulting in multiple populations:
	 rest
	 area 1
	 area 2
	 area 3
	 area 4
	 area 5
> summary(fres)
rest: 5764 of 10000 events (57.64%)
area 1: 225 of 10000 events (2.25%)
area 2: 95 of 10000 events (0.95%)
area 3: 3916 of 10000 events (39.16%)
area 4: 0 of 10000 events (0.00%)
area 5: 0 of 10000 events (0.00%)
> names(fres)
[1] "rest"   "area 1" "area 2" "area 3" "area 4" "area 5"
> 
> ## The result of curv2 filtering are multiple sub-populations
> ## and we can split our data set accordingly
> split(dat, fres)
$rest
flowFrame object '0877408774.B08 (rest)'
with 5764 cells and 8 observables:
      name              desc     range  minRange  maxRange
$P1  FSC-H             FSC-H      1024   0.00000      1023
$P2  SSC-H             SSC-H      1024   0.00000      1023
$P3  FL1-H                NA      1024   1.00904     10000
$P4  FL2-H                NA      1024   1.00904     10000
$P5  FL3-H                NA      1024   1.00904     10000
$P6  FL1-A                NA      1024   0.00000      1023
$P7  FL4-H                NA      1024   1.00904     10000
$P8   Time Time (51.20 sec.)      1024   0.00000      1023
165 keywords are stored in the 'description' slot

$`area 1`
flowFrame object '0877408774.B08 (area 1)'
with 225 cells and 8 observables:
      name              desc     range  minRange  maxRange
$P1  FSC-H             FSC-H      1024   0.00000      1023
$P2  SSC-H             SSC-H      1024   0.00000      1023
$P3  FL1-H                NA      1024   1.00904     10000
$P4  FL2-H                NA      1024   1.00904     10000
$P5  FL3-H                NA      1024   1.00904     10000
$P6  FL1-A                NA      1024   0.00000      1023
$P7  FL4-H                NA      1024   1.00904     10000
$P8   Time Time (51.20 sec.)      1024   0.00000      1023
165 keywords are stored in the 'description' slot

$`area 2`
flowFrame object '0877408774.B08 (area 2)'
with 95 cells and 8 observables:
      name              desc     range  minRange  maxRange
$P1  FSC-H             FSC-H      1024   0.00000      1023
$P2  SSC-H             SSC-H      1024   0.00000      1023
$P3  FL1-H                NA      1024   1.00904     10000
$P4  FL2-H                NA      1024   1.00904     10000
$P5  FL3-H                NA      1024   1.00904     10000
$P6  FL1-A                NA      1024   0.00000      1023
$P7  FL4-H                NA      1024   1.00904     10000
$P8   Time Time (51.20 sec.)      1024   0.00000      1023
165 keywords are stored in the 'description' slot

$`area 3`
flowFrame object '0877408774.B08 (area 3)'
with 3916 cells and 8 observables:
      name              desc     range  minRange  maxRange
$P1  FSC-H             FSC-H      1024   0.00000      1023
$P2  SSC-H             SSC-H      1024   0.00000      1023
$P3  FL1-H                NA      1024   1.00904     10000
$P4  FL2-H                NA      1024   1.00904     10000
$P5  FL3-H                NA      1024   1.00904     10000
$P6  FL1-A                NA      1024   0.00000      1023
$P7  FL4-H                NA      1024   1.00904     10000
$P8   Time Time (51.20 sec.)      1024   0.00000      1023
165 keywords are stored in the 'description' slot

$`area 4`
flowFrame object '0877408774.B08 (area 4)'
with 0 cells and 8 observables:
      name              desc     range  minRange  maxRange
$P1  FSC-H             FSC-H      1024   0.00000      1023
$P2  SSC-H             SSC-H      1024   0.00000      1023
$P3  FL1-H                NA      1024   1.00904     10000
$P4  FL2-H                NA      1024   1.00904     10000
$P5  FL3-H                NA      1024   1.00904     10000
$P6  FL1-A                NA      1024   0.00000      1023
$P7  FL4-H                NA      1024   1.00904     10000
$P8   Time Time (51.20 sec.)      1024   0.00000      1023
165 keywords are stored in the 'description' slot

$`area 5`
flowFrame object '0877408774.B08 (area 5)'
with 0 cells and 8 observables:
      name              desc     range  minRange  maxRange
$P1  FSC-H             FSC-H      1024   0.00000      1023
$P2  SSC-H             SSC-H      1024   0.00000      1023
$P3  FL1-H                NA      1024   1.00904     10000
$P4  FL2-H                NA      1024   1.00904     10000
$P5  FL3-H                NA      1024   1.00904     10000
$P6  FL1-A                NA      1024   0.00000      1023
$P7  FL4-H                NA      1024   1.00904     10000
$P8   Time Time (51.20 sec.)      1024   0.00000      1023
165 keywords are stored in the 'description' slot

> 
> ## We can limit the splitting to one or several sub-populations
> split(dat, fres, population="rest")
$rest
flowFrame object '0877408774.B08 (rest)'
with 5764 cells and 8 observables:
      name              desc     range  minRange  maxRange
$P1  FSC-H             FSC-H      1024   0.00000      1023
$P2  SSC-H             SSC-H      1024   0.00000      1023
$P3  FL1-H                NA      1024   1.00904     10000
$P4  FL2-H                NA      1024   1.00904     10000
$P5  FL3-H                NA      1024   1.00904     10000
$P6  FL1-A                NA      1024   0.00000      1023
$P7  FL4-H                NA      1024   1.00904     10000
$P8   Time Time (51.20 sec.)      1024   0.00000      1023
165 keywords are stored in the 'description' slot

> split(dat, fres, population=list(keep=c("area 2", "area 3")))
$keep
flowFrame object '0877408774.B08 (area 2,area 3)'
with 4011 cells and 8 observables:
      name              desc     range  minRange  maxRange
$P1  FSC-H             FSC-H      1024   0.00000      1023
$P2  SSC-H             SSC-H      1024   0.00000      1023
$P3  FL1-H                NA      1024   1.00904     10000
$P4  FL2-H                NA      1024   1.00904     10000
$P5  FL3-H                NA      1024   1.00904     10000
$P6  FL1-A                NA      1024   0.00000      1023
$P7  FL4-H                NA      1024   1.00904     10000
$P8   Time Time (51.20 sec.)      1024   0.00000      1023
3 keywords are stored in the 'description' slot

> 
> 
> curv2Filter("FSC-H", "SSC-H", filterId="test filter")
2D curvature filter 'test filter' in dimensions FSC-H and SSC-H
with settings:
  bwFac=1.2
  gridsize=151,151
> 
> 
> 
> 
> cleanEx()

detaching ‘package:flowCore’

> nameEx("curvPeaks")
> ### * curvPeaks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: curvPeaks
> ### Title: Parse curv1Filter output
> ### Aliases: curvPeaks
> 
> ### ** Examples
> 
> library(flowCore)
> data(GvHD)
> tmp <- filter(GvHD[[10]], curv1Filter("FSC-H"))
> res <-  flowStats:::curvPeaks(tmp, exprs(GvHD[[10]])[, "FSC-H"])
> 
> 
> 
> 
> cleanEx()

detaching ‘package:flowCore’

> nameEx("density1d")
> ### * density1d
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: density1d
> ### Title: Find most likely separation between positive and negative
> ###   populations in 1D
> ### Aliases: density1d
> 
> ### ** Examples
> 
> library(flowCore)
> data(GvHD)
> dat <- GvHD[pData(GvHD)$Patient==10]
> dat <- transform(dat, "FL4-H"=asinh(`FL4-H`), "FL3-H"=asinh(`FL3-H`))
> d <- flowStats:::density1d(dat, "FL4-H", plot=TRUE)
> if(require(flowViz))
+ densityplot(~`FL4-H`, dat, refline=d)
Loading required package: flowViz
Loading required package: lattice
> 
> ## tweaking the location
> flowStats:::density1d(dat, "FL4-H", plot=TRUE, alpha=0.8)
[1] 3.705714
> 
> ## only a single population
> flowStats:::density1d(dat, "FL3-H", plot=TRUE)
[1] 4.53325
> flowStats:::density1d(dat, "FL3-H", plot=TRUE, sd=2)
[1] 4.53325
> 
> 
> 
> 
> cleanEx()

detaching ‘package:flowViz’, ‘package:lattice’, ‘package:flowCore’

> nameEx("gate_singlet")
> ### * gate_singlet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gate_singlet
> ### Title: Creates a singlet polygon gate using the prediction bands from a
> ###   robust linear model
> ### Aliases: gate_singlet singletGate
> 
> ### ** Examples
> 
> ## Not run: 
> ##D  # fr is a flowFrame
> ##D  sg <- gate_singlet(fr, area = "FSC-A", height = "FSC-H")
> ##D  sg
> ##D  # plot the gate 
> ##D  xyplot(`FSC-H` ~ `FSC-A`, fr, filter = sg)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("gaussNorm")
> ### * gaussNorm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gaussNorm
> ### Title: Per-channel normalization based on landmark registration
> ### Aliases: gaussNorm
> 
> ### ** Examples
> 
> library(flowCore)
> data(ITN)
> dat <- transform(ITN, "CD4"=asinh(CD4), "CD3"=asinh(CD3), "CD8"=asinh(CD8))
> lg <- lymphGate(dat, channels=c("CD3", "SSC"), preselection="CD4",scale=1.5)
> dat <- Subset(dat, lg)
> datr <- gaussNorm(dat, "CD8")$flowset

Adjusting the distance between landmarks
...............
> if(require(flowViz)){
+   d1 <- densityplot(~CD8, dat, main="original", filter=curv1Filter("CD8"))
+   d2 <- densityplot(~CD8, datr, main="normalized", filter=curv1Filter("CD8"))
+   plot(d1, split=c(1,1,2,1))
+   plot(d2, split=c(2,1,2,1), newpage=FALSE)
+ }
Loading required package: flowViz
Loading required package: lattice
> 
> 
> 
> 
> cleanEx()

detaching ‘package:flowViz’, ‘package:lattice’, ‘package:flowCore’

> nameEx("gpaSet")
> ### * gpaSet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gpaSet
> ### Title: Multi-dimensional normalization of flow cytometry data
> ### Aliases: gpaSet
> 
> ### ** Examples
> 
> library(flowCore)
> ## Example 1: calling up gpaSet directly
> data(ITN)
> data(BackGating)
> 
> tl <- transformList(colnames(ITN)[3:7], asinh, transformationId="asinh")
> dat <- transform(ITN, tl)
> 
> xy = c("FSC", "SSC")
> bgChannels = c("CD8", "CD4", "CD3")
> ## bg <- flowStats:::backGating(dat, xy=xy, channels=bgChannels)
> ## using pre-generated backgating results: BackGating 
> s <- gpaSet(dat, params=xy, bgChannels=bgChannels, bg=BackGating)
Procrustes analysis ... 

> 
> if(require(flowViz)) {
+    d1 <- densityplot(~., s, channels=c("FSC", "SSC"), 
+                      layout=c(2,1), main="After GPA using bg")
+    d2 <- xyplot(FSC ~ SSC, as(s, "flowFrame"), 
+                 channels=c("FSC", "SSC"), main="All flowFrames")
+    plot(d1)
+    plot(d2)
+ }
Loading required package: flowViz
Loading required package: lattice
> 
> ## view "GPA" attribute
> attr(s, "GPA")
$id.feature.method
[1] "backgating"

$norm.channels
[1] "FSC" "SSC"

$backgating.channels
[1] "CD8" "CD4" "CD3"

$downweight.missingFeatures
[1] FALSE

$SVD
$SVD$sample01
$SVD$sample01$Q
           [,1]        [,2]
[1,] 0.99931304 -0.03706013
[2,] 0.03706013  0.99931304

$SVD$sample01$scal
[1] 0.9625227


$SVD$sample02
$SVD$sample02$Q
           [,1]        [,2]
[1,] 0.99993547 -0.01136023
[2,] 0.01136023  0.99993547

$SVD$sample02$scal
[1] 0.9734189


$SVD$sample03
$SVD$sample03$Q
           [,1]        [,2]
[1,] 0.99862640 -0.05239564
[2,] 0.05239564  0.99862640

$SVD$sample03$scal
[1] 0.982891


$SVD$sample04
$SVD$sample04$Q
            [,1]         [,2]
[1,] 0.999961866 -0.008733015
[2,] 0.008733015  0.999961866

$SVD$sample04$scal
[1] 0.9987088


$SVD$sample05
$SVD$sample05$Q
           [,1]        [,2]
[1,] 0.99990602 -0.01370933
[2,] 0.01370933  0.99990602

$SVD$sample05$scal
[1] 1.030354


$SVD$sample06
$SVD$sample06$Q
           [,1]      [,2]
[1,]  0.9913540 0.1312147
[2,] -0.1312147 0.9913540

$SVD$sample06$scal
[1] 0.9755746


$SVD$sample07
$SVD$sample07$Q
            [,1]       [,2]
[1,]  0.99946404 0.03273581
[2,] -0.03273581 0.99946404

$SVD$sample07$scal
[1] 1.026756


$SVD$sample08
$SVD$sample08$Q
            [,1]         [,2]
[1,] 0.999996779 -0.002538264
[2,] 0.002538264  0.999996779

$SVD$sample08$scal
[1] 1.009888


$SVD$sample09
$SVD$sample09$Q
            [,1]       [,2]
[1,]  0.99967718 0.02540741
[2,] -0.02540741 0.99967718

$SVD$sample09$scal
[1] 1.047974


$SVD$sample10
$SVD$sample10$Q
           [,1]        [,2]
[1,] 0.99988051 -0.01545881
[2,] 0.01545881  0.99988051

$SVD$sample10$scal
[1] 1.047829


$SVD$sample11
$SVD$sample11$Q
             [,1]        [,2]
[1,]  0.999997795 0.002100081
[2,] -0.002100081 0.999997795

$SVD$sample11$scal
[1] 1.001366


$SVD$sample12
$SVD$sample12$Q
           [,1]        [,2]
[1,] 0.99692097 -0.07841291
[2,] 0.07841291  0.99692097

$SVD$sample12$scal
[1] 0.9295906


$SVD$sample13
$SVD$sample13$Q
           [,1]        [,2]
[1,] 0.99972719 -0.02335698
[2,] 0.02335698  0.99972719

$SVD$sample13$scal
[1] 0.9242907


$SVD$sample14
$SVD$sample14$Q
            [,1]       [,2]
[1,]  0.99890416 0.04680251
[2,] -0.04680251 0.99890416

$SVD$sample14$scal
[1] 1.034414


$SVD$sample15
$SVD$sample15$Q
            [,1]       [,2]
[1,]  0.99988333 0.01527505
[2,] -0.01527505 0.99988333

$SVD$sample15$scal
[1] 1.030511



$TransMatrix
$TransMatrix$transM1
$TransMatrix$transM1$sample01
     FSC      SSC 
555.7874 535.5376 

$TransMatrix$transM1$sample02
     FSC      SSC 
587.9359 526.7624 

$TransMatrix$transM1$sample03
     FSC      SSC 
569.0242 529.9855 

$TransMatrix$transM1$sample04
     FSC      SSC 
570.4939 536.3043 

$TransMatrix$transM1$sample05
     FSC      SSC 
579.1182 545.7071 

$TransMatrix$transM1$sample06
     FSC      SSC 
545.1075 534.5334 

$TransMatrix$transM1$sample07
     FSC      SSC 
566.1396 553.6562 

$TransMatrix$transM1$sample08
     FSC      SSC 
581.2976 488.1307 

$TransMatrix$transM1$sample09
     FSC      SSC 
562.3324 558.9888 

$TransMatrix$transM1$sample10
     FSC      SSC 
602.5846 540.7549 

$TransMatrix$transM1$sample11
     FSC      SSC 
575.6181 536.2171 

$TransMatrix$transM1$sample12
     FSC      SSC 
609.5640 553.7049 

$TransMatrix$transM1$sample13
     FSC      SSC 
579.1236 485.2325 

$TransMatrix$transM1$sample14
     FSC      SSC 
552.4801 535.5485 

$TransMatrix$transM1$sample15
     FSC      SSC 
573.4858 544.8130 

$TransMatrix$transM1$reference
     FSC      SSC 
573.6677 534.6086 


$TransMatrix$transM2
list()


$Reference
       FSC      SSC cluster    sample bogus
1 632.6743 890.0534       1 reference FALSE
2 390.0509 148.3410       2 reference FALSE
3 542.3432 794.9604       3 reference FALSE
4 729.6024 305.0796       4 reference FALSE

$Features
$Features$sample01
       FSC      SSC cluster   sample bogus
1 578.4498 913.4799       1 sample01 FALSE
2 372.7543 128.6307       2 sample01 FALSE
3 542.3432 794.9604       3 sample01  TRUE
4 729.6024 305.0796       4 sample01  TRUE

$Features$sample02
       FSC      SSC cluster   sample bogus
1 632.6743 890.0534       1 sample02  TRUE
2 414.5903 141.9965       2 sample02 FALSE
3 556.3763 805.6078       3 sample02 FALSE
4 748.1025 269.3918       4 sample02 FALSE

$Features$sample03
       FSC      SSC cluster   sample bogus
1 578.2029 872.8801       1 sample03 FALSE
2 373.1979 147.0219       2 sample03 FALSE
3 542.3432 794.9604       3 sample03  TRUE
4 782.3527 305.0796       4 sample03 FALSE

$Features$sample04
       FSC      SSC cluster   sample bogus
1 632.6743 890.0534       1 sample04  TRUE
2 391.9939 150.5816       2 sample04 FALSE
3 527.7048 799.5028       3 sample04 FALSE
4 729.6024 305.0796       4 sample04  TRUE

$Features$sample05
       FSC      SSC cluster   sample bogus
1 632.6743 889.6082       1 sample05 FALSE
2 399.6132 170.0464       2 sample05 FALSE
3 542.3432 794.9604       3 sample05  TRUE
4 741.8420 328.2133       4 sample05 FALSE

$Features$sample06
       FSC      SSC cluster   sample bogus
1 632.6743 890.0534       1 sample06  TRUE
2 343.7776 155.2441       2 sample06 FALSE
3 583.8366 819.9111       3 sample06 FALSE
4 620.1417 272.9249       4 sample06 FALSE

$Features$sample07
       FSC      SSC cluster   sample bogus
1 601.8831 893.4852       1 sample07 FALSE
2 367.5891 205.3927       2 sample07 FALSE
3 565.4836 810.6675       3 sample07 FALSE
4 729.6024 305.0796       4 sample07  TRUE

$Features$sample08
       FSC      SSC cluster   sample bogus
1 686.5305 913.2682       1 sample08 FALSE
2 391.0495 147.2266       2 sample08 FALSE
3 525.9331 537.7838       3 sample08 FALSE
4 721.6773 354.2441       4 sample08 FALSE

$Features$sample09
       FSC      SSC cluster   sample bogus
1 622.0405 892.5368       1 sample09 FALSE
2 355.3435 196.6819       2 sample09 FALSE
3 542.3432 794.9604       3 sample09  TRUE
4 729.6024 351.7762       4 sample09 FALSE

$Features$sample10
       FSC      SSC cluster   sample bogus
1 668.2995 867.0512       1 sample10 FALSE
2 428.4172 180.8759       2 sample10 FALSE
3 542.3432 794.9604       3 sample10  TRUE
4 771.2784 320.1323       4 sample10 FALSE

$Features$sample11
       FSC      SSC cluster   sample bogus
1 632.6743 890.0534       1 sample11  TRUE
2 392.6326 150.9561       2 sample11 FALSE
3 547.5629 798.7793       3 sample11 FALSE
4 729.6024 305.0796       4 sample11  TRUE

$Features$sample12
       FSC      SSC cluster   sample bogus
1 637.5803 872.2689       1 sample12 FALSE
2 356.6578 154.4716       2 sample12 FALSE
3 542.3432 794.9604       3 sample12  TRUE
4 901.6746 393.1186       4 sample12 FALSE

$Features$sample13
       FSC      SSC cluster   sample bogus
1 632.6743 890.0534       1 sample13  TRUE
2 389.0720  85.8855       2 sample13 FALSE
3 529.2155 742.3750       3 sample13 FALSE
4 765.5325 222.6163       4 sample13 FALSE

$Features$sample14
       FSC      SSC cluster   sample bogus
1 632.6743 890.0534       1 sample14  TRUE
2 408.8545 155.7136       2 sample14 FALSE
3 547.7069 791.1415       3 sample14 FALSE
4 620.6846 305.2855       4 sample14 FALSE

$Features$sample15
       FSC      SSC cluster   sample bogus
1 632.6743 890.0534       1 sample15  TRUE
2 395.9392 184.1957       2 sample15 FALSE
3 543.4004 801.4607       3 sample15 FALSE
4 721.9293 303.5423       4 sample15 FALSE


attr(,"class")
[1] "GPA"
> 
> ## Not run: 
> ##D library(flowCore)
> ##D ## Example 2: using work flow and normalization objects
> ##D data(ITN)
> ##D ITN <- ITN[1:8, ]
> ##D wf <- workFlow(ITN)
> ##D tl <- transformList(colnames(ITN)[3:7], asinh, transformationId="asinh")
> ##D add(wf, tl)
> ##D x <- Data(wf[["asinh"]])
> ##D ## normalize 'FSC' and 'SSC' channels
> ##D norm <- normalization(normFun=function(x, parameters, ...)
> ##D         gpaSet(x, parameters, ...),
> ##D         parameters = c("FSC", "SSC"), 
> ##D 	arguments=list(bgChannels=c("CD8", "CD3"),
> ##D                        register="backgating"),
> ##D 	normalizationId="Procrustes")
> ##D 
> ##D add(wf, norm2, parent="asinh")
> ##D s <- Data(wf[["Procrustes"]])
> ##D if(require(flowViz)) {
> ##D    d1 <- densityplot(~., s, channels=c("FSC", "SSC"), 
> ##D                      layout=c(2,1), main="After GPA using bg")
> ##D    d2 <- xyplot(FSC ~ SSC, as(s, "flowFrame"), 
> ##D                 channels=c("FSC", "SSC"), main="All flowFrames")
> ##D    plot(d1)
> ##D    plot(d2)
> ##D }
> ## End(Not run) ## end of dontrun
> 
> 
> 
> 
> cleanEx()

detaching ‘package:flowViz’, ‘package:lattice’, ‘package:flowCore’

> nameEx("iProcrustes")
> ### * iProcrustes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: iProcrustes
> ### Title: Procrustes analysis. Using singular value decomposition (SVD) to
> ###   determine a linear transformation to align the points in X to the
> ###   points in a reference matrix Y.
> ### Aliases: iProcrustes
> 
> ### ** Examples
> 
> ## Example 1 
> x <- matrix(runif(20), nrow=10, ncol=2)+ 1.4
> s <- matrix(c(cos(60), -sin(60), sin(60), cos(60)), 
+             nrow=2, ncol=2, byrow=TRUE)
> xbar <- 2.2 *(x %*% s) - 0.1
> 
> lt <- iProcrustes(x, xbar, translate=TRUE) ## return linear transformation
> lt
$T
[1] 1.951514 1.958820

$Q
           [,1]       [,2]
[1,] -0.9524130  0.3048106
[2,] -0.3048106 -0.9524130

$scal
[1] 2.2

$T.xbar
             [,1]        [,2]
 [1,]  0.83588167  0.54753045
 [2,]  0.63221696  0.68066427
 [3,] -0.13068328 -0.25431387
 [4,] -0.63022175  0.60527827
 [5,]  0.59149864 -0.67674572
 [6,] -0.68582506  0.36067674
 [7,] -0.93028184 -0.06908363
 [8,] -0.51940363 -0.83416427
 [9,] -0.04270594  0.42664750
[10,]  0.87952423 -0.78648973

> 
> ## showing result
> I <- matrix(1, nrow=nrow(x), ncol=1)
> tx <- x - I %*% lt$T
> ## get the transformed matrix xnew
> xnew <- lt$scal * (tx %*% lt$Q)
> 
> if (require(lattice)) {
+    xyplot(V1 ~ V2, 
+           do.call(make.groups, lapply(list(x=x, xbar=xbar, T.xbar=lt$T.xbar,
+                   xnew=xnew),as.data.frame)),  
+           group=which, aspect=c(0.7), pch=c(1,3,2,4), col.symbol="black",
+ 	  main=("Align the points in x to xbar"),
+           key=list(points=list(pch=c(1,3,2,4), col="black"), space="right",
+                    text=list(c("x", "xbar", "T.xbar", "xnew"))))
+ }
Loading required package: lattice
> 
> ## Example 2. centralized x and xbar prior to using iProcrustes
> x <- matrix(runif(10), nrow=5, ncol=2)
> s <- matrix(c(cos(60), -sin(60), sin(60), cos(60)), 
+             nrow=2, ncol=2, byrow=TRUE)
> xbar <- 1.2 *(x %*% s) - 2
> I <- matrix(1, nrow=nrow(x), ncol=1)
> x <- x-(I %*% colMeans(x)) ## shift the centroid of points in x to the origin
> xbar <- xbar - (I %*% colMeans(xbar)) ## shift centroid to the origin
> lt <- iProcrustes(x, xbar, translate=FALSE) ## return linear transformation
> ## only return the rotation/reflection matrix and scalling factor
> lt
$Q
           [,1]       [,2]
[1,] -0.9524130  0.3048106
[2,] -0.3048106 -0.9524130

$scal
[1] 1.2

> 
> xnew=lt$scal *(x %*% lt$Q) ## transformed matrix aligned to centralized xbar
> if (require(lattice)) {
+     xyplot(V1 ~ V2,
+            do.call(make.groups, lapply(list(x=x,xbar=xbar, 
+                    xnew=xnew), as.data.frame)), 
+            group=which, auto.key=list(space="right"))
+ }
> 
> 
> 
> 
> cleanEx()

detaching ‘package:lattice’

> nameEx("idFeaturesByBackgating")
> ### * idFeaturesByBackgating
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: idFeaturesByBackgating
> ### Title: (Internal use only) Identify features of flow cytometry data
> ###   using backgating
> ### Aliases: idFeatures idFeaturesByBackgating
> ### Keywords: misc
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(flowCore)
> ##D data(ITN)
> ##D wf <- workFlow(ITN)
> ##D tl <- transformList(colnames(ITN)[3:7], asinh, transformationId="asinh")
> ##D dat <- trnasformList(ITN, tl)
> ##D bg <- backGating(dat, xy=c("FSC", "SSC"), channels="CD3")
> ## End(Not run)
> 
> data(BackGating)
> results <- flowStats:::idFeaturesByBackgating(bg=BackGating, nDim=2,
+                        plot.workflow=TRUE, ask=TRUE)
NULL
NULL
> 
> 
> 
> 
> cleanEx()
> nameEx("landmarkMatrix")
> ### * landmarkMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: landmarkMatrix
> ### Title: Compute and cluster high density regions in 1D
> ### Aliases: landmarkMatrix
> 
> ### ** Examples
> 
> library(flowCore)
> data(GvHD)
> tmp <- list("FSC-H"=filter(GvHD[1:3], curv1Filter("FSC-H")))
> res <-  flowStats:::landmarkMatrix(GvHD[1:3], tmp, "FSC-H")
> 
> 
> 
> 
> cleanEx()

detaching ‘package:flowCore’

> nameEx("lymphGate")
> ### * lymphGate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lymphFilter-class
> ### Title: Automated gating of elliptical cell populations in 2D.
> ### Aliases: lymphFilter-class %in%,flowFrame,lymphFilter-method lymphGate
> ###   lymphFilter
> ### Keywords: misc classes
> 
> ### ** Examples
> 
> 
> library(flowCore)
> data(GvHD)
> dat <- GvHD[pData(GvHD)$Patient==10]
> dat <- transform(dat, "FL4-H"=asinh(`FL4-H`))
> lg <- lymphGate(dat, channels=c("FSC-H", "SSC-H"), preselection="FL4-H",scale=1.5)
> 
> if(require(flowViz))
+ xyplot(`SSC-H`~`FSC-H`, dat, filter=lg)
Loading required package: flowViz
Loading required package: lattice
> 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:flowViz’, ‘package:lattice’, ‘package:flowCore’

> nameEx("mkPrior")
> ### * mkPrior
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mkPrior
> ### Title: Generate a flowClust prior specification
> ### Aliases: mkPrior mkPrior,list,flowSet,missing,missing-method
> ###   mkPrior,polygonGate,flowFrame,numeric,matrix-method
> ###   mkPrior,rectangleGate,flowFrame,numeric,matrix-method
> ###   mkPrior,rectangleGate,flowFrame,missing,missing-method
> ###   mkPrior,polygonGate,flowFrame,missing,missing-method
> ###   mkPrior,missing,flowSet,ANY,missing-method
> ###   mkPrior,missing,flowFrame,missing,missing-method
> ###   mkPrior,list,flowSet,ANY,missing-method
> 
> ### ** Examples
> 
> 
> ## The function is currently defined as
> 
> 
> 
> cleanEx()
> nameEx("norm2Filter-class")
> ### * norm2Filter-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: norm2Filter-class
> ### Title: Class "norm2Filter"
> ### Aliases: norm2Filter-class norm2Filter show,norm2Filter-method
> ###   %in%,flowFrame,norm2Filter-method
> ### Keywords: classes methods
> 
> ### ** Examples
> 
> 
> library(flowCore)
> ## Loading example data
> dat <- read.FCS(system.file("extdata","0877408774.B08",
+ package="flowCore"))
> 
> ## Create directly. Most likely from a command line
> norm2Filter("FSC-H", "SSC-H", filterId="myCurv2Filter")
norm2Filter 'myCurv2Filter' in dimensions FSC-H and SSC-H with parameters:
  method: covMcd 
  scale.factor: 1 
  n: 50000 

> 
> ## To facilitate programmatic construction we also have the following
> n2f <- norm2Filter(filterId="myNorm2Filter", x=list("FSC-H", "SSC-H"),
+ scale.factor=2)
> n2f <- norm2Filter(filterId="myNorm2Filter", x=c("FSC-H", "SSC-H"),
+ scale.factor=2)
> 
> ## Filtering using norm2Filter
> fres <- filter(dat, n2f)
> fres
A filterResult produced by the filter named 'myNorm2Filter'
> summary(fres)
myNorm2Filter+: 6155 of 10000 events (61.55%)
> 
> ## The result of norm2 filtering is a logical subset
> Subset(dat, fres)
flowFrame object '0877408774.B08'
with 6155 cells and 8 observables:
      name              desc     range  minRange  maxRange
$P1  FSC-H             FSC-H      1024   0.00000      1023
$P2  SSC-H             SSC-H      1024   0.00000      1023
$P3  FL1-H                NA      1024   1.00904     10000
$P4  FL2-H                NA      1024   1.00904     10000
$P5  FL3-H                NA      1024   1.00904     10000
$P6  FL1-A                NA      1024   0.00000      1023
$P7  FL4-H                NA      1024   1.00904     10000
$P8   Time Time (51.20 sec.)      1024   0.00000      1023
164 keywords are stored in the 'description' slot
> 
> ## We can also split, in which case we get those events in and those
> ## not in the gate as separate populations
> split(dat, fres)
$`myNorm2Filter+`
flowFrame object '0877408774.B08 (myNorm2Filter+)'
with 6155 cells and 8 observables:
      name              desc     range  minRange  maxRange
$P1  FSC-H             FSC-H      1024   0.00000      1023
$P2  SSC-H             SSC-H      1024   0.00000      1023
$P3  FL1-H                NA      1024   1.00904     10000
$P4  FL2-H                NA      1024   1.00904     10000
$P5  FL3-H                NA      1024   1.00904     10000
$P6  FL1-A                NA      1024   0.00000      1023
$P7  FL4-H                NA      1024   1.00904     10000
$P8   Time Time (51.20 sec.)      1024   0.00000      1023
164 keywords are stored in the 'description' slot

$`myNorm2Filter-`
flowFrame object '0877408774.B08 (myNorm2Filter-)'
with 3845 cells and 8 observables:
      name              desc     range  minRange  maxRange
$P1  FSC-H             FSC-H      1024   0.00000      1023
$P2  SSC-H             SSC-H      1024   0.00000      1023
$P3  FL1-H                NA      1024   1.00904     10000
$P4  FL2-H                NA      1024   1.00904     10000
$P5  FL3-H                NA      1024   1.00904     10000
$P6  FL1-A                NA      1024   0.00000      1023
$P7  FL4-H                NA      1024   1.00904     10000
$P8   Time Time (51.20 sec.)      1024   0.00000      1023
164 keywords are stored in the 'description' slot

> 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:flowCore’

> nameEx("normalize")
> ### * normalize
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: normalize-methods
> ### Title: normalize a GatingSet imported with flowWorkspace, using
> ###   sequential normalization on the manual gates in the GatingHierarchy.
> ### Aliases: normalize normalize-methods
> ###   normalize,GatingSetInternal,missing-method
> ###   normalize,GatingSet,missing-method
> ### Keywords: methods
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #gs is a GatingSet
> ##D gs_norm <- normalize(gs
> ##D                 , target = "M+T panel_903997-25.fcs"
> ##D                 , populations = "cd27gate"
> ##D                 , dims = "<Violet A 610/20-A>"
> ##D                 , minCountThreshold = 100
> ##D                 , nPeaks = list('cd27gate' = 2)
> ##D                 , chunksize = 10
> ##D                 , bwFac = 2
> ##D                 )
> ##D 
> ##D 
> ##D 
> ##D #show the population statistics for before and after normalization				
> ##D getPopStats(gs)
> ##D getPopStats(gs_norm)		
> ##D 
> ##D #plot the gate to see the effects of normalization
> ##D grid.arrange(
> ##D 		plotGate(gs, "cd27gate", type = "densityplot", stack = T)
> ##D 		,plotGate(gs_norm, "cd27gate", type = "densityplot", stack = T)
> ##D 		)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("overton_like")
> ### * overton_like
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: overton_like
> ### Title: Overton-like subtraction of densities.
> ### Aliases: overton_like
> 
> ### ** Examples
> 
> A = rnorm(10000,mean=1,sd=0.5)
> B = rnorm(10000,mean=2,sd=0.5)
> overton_like(A,B)
[1] 0.6746461
> 
> 
> 
> 
> cleanEx()
> nameEx("plotBins")
> ### * plotBins
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotBins
> ### Title: Plots the probability bins overlaid with flowFrame data
> ### Aliases: plotBins
> ### Keywords: misc
> 
> ### ** Examples
> 
> library(flowCore)
> data(GvHD)
> # flow frame 1 is treated as  control dataset and used to generate bins
> resCtrl<-proBin(GvHD[[1]],200,channels=c("FSC-H","SSC-H"))
> plotBins(resCtrl,GvHD[[1]],channels=c("FSC-H","SSC-H"),title="Binned control data")
> # Same bins are applied to flowFrame 16
> resSample<-binByRef(resCtrl,GvHD[[16]])
> stat<-calcPearsonChi(resCtrl,resSample)
> dev.new()
> plotBins(resCtrl,data=GvHD[[16]],channels=c("FSC-H","SSC-H","Time"),title="Comparision 1 & 16",
+ residuals=stat$residuals[2,],shadeFactor=0.7)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:flowCore’

> nameEx("proBin")
> ### * proBin
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: proBin
> ### Title: Probability binning - a metric for evaluating multivariate
> ###   differences
> ### Aliases: proBin
> ### Keywords: misc
> 
> ### ** Examples
> 
> library(flowCore)
> data(GvHD)
> res<-proBin(GvHD[[1]],200,channels=c("FSC-H","SSC-H","FL1-H","FL4-H")) 
> 
> 
> 
> cleanEx()

detaching ‘package:flowCore’

> nameEx("quadrantGate")
> ### * quadrantGate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: quadrantGate
> ### Title: Automated quad gating
> ### Aliases: quadrantGate
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(flowCore)
> ##D data(GvHD)
> ##D dat <- GvHD[pData(GvHD)$Patient==10]
> ##D dat <- transform(dat, "FL4-H"=asinh(`FL4-H`), "FL2-H"=asinh(`FL2-H`))
> ##D qg <- quadrantGate(dat, c("FL2-H", "FL4-H"))
> ##D qg
> ##D 
> ##D if(require(flowViz))
> ##D xyplot(`FL2-H`~`FL4-H`, dat, filter=qg)
> ##D 
> ##D qg <- quadrantGate(dat, c("FL2-H", "FL4-H"), alpha=c(0.1, 0.9), plot=TRUE)
> ##D qg
> ##D split(dat, qg)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("rangeGate")
> ### * rangeGate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rangeGate
> ### Title: Find most likely separation between positive and negative
> ###   populations in 1D
> ### Aliases: rangeGate rangeFilter rangeFilter-class
> ###   %in%,flowFrame,rangeFilter-method oneDGate
> 
> ### ** Examples
> 
> library(flowCore)
> data(GvHD)
> dat <- GvHD[pData(GvHD)$Patient==10]
> dat <- transform(dat, "FL4-H"=asinh(`FL4-H`), "FL3-H"=asinh(`FL3-H`))
> rg <- rangeGate(dat, "FL4-H", plot=TRUE)
> rg
Rectangular gate 'defaultRectangleGate' with dimensions:
  FL4-H: (2.52437644415781,Inf)
> split(dat, rg)
$`defaultRectangleGate+`
A flowSet with 7 experiments.

An object of class 'AnnotatedDataFrame'
  rowNames: s10a01 s10a02 ... s10a07 (7 total)
  varLabels: Patient Visit ... population (6 total)
  varMetadata: labelDescription

column names(8): FSC-H SSC-H ... FL4-H Time


$`defaultRectangleGate-`
A flowSet with 7 experiments.

An object of class 'AnnotatedDataFrame'
  rowNames: s10a01 s10a02 ... s10a07 (7 total)
  varLabels: Patient Visit ... population (6 total)
  varMetadata: labelDescription

column names(8): FSC-H SSC-H ... FL4-H Time


> 
> ## Test rangeGate when settting refLine=0; it does not do anything since
> ## there is no sub-population below zero.
> rangeGate(dat, "FL4-H", plot=FALSE, refLine=0)
Rectangular gate 'defaultRectangleGate' with dimensions:
  FL4-H: (2.52437644415781,Inf)
> 
> rf <- rangeFilter("FL4-H")
> filter(dat, rf)
A list of filterResults for a flowSet containing 7 frames
produced by the filter named 'defaultRangeFilter'
> 
> 
> 
> cleanEx()

detaching ‘package:flowCore’

> nameEx("warpSet")
> ### * warpSet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: warpSet
> ### Title: Normalization based on landmark registration
> ### Aliases: warpSet warpSetNCDF warpSetGS warpSetNCDFLowMem
> ###   warpSet.cytoset
> 
> ### ** Examples
> 
> library(flowCore)
> data(ITN)
> dat <- transform(ITN, "CD4"=asinh(CD4), "CD3"=asinh(CD3), "CD8"=asinh(CD8))
> lg <- lymphGate(dat, channels=c("CD3", "SSC"), preselection="CD4",scale=1.5)
> dat <- Subset(dat, lg)
> datr <- warpSet(dat, "CD8", grouping="GroupID")
Estimating landmarks for channel CD8 ...
Registering curves for parameter CD8 ...
Warning in warpSet.flowSet(dat, "CD8", grouping = "GroupID") :
  The following landmark is only present in a single group --
stain: CD8
mean value: 1.69369190892561
Warning in warpSet.flowSet(dat, "CD8", grouping = "GroupID") :
  The following landmark is only present in a single group --
stain: CD8
mean value: 6.10788698265851
> if(require(flowViz)){
+   d1 <- densityplot(~CD8, dat, main="original", filter=curv1Filter("CD8"))
+   d2 <- densityplot(~CD8, datr, main="normalized", filter=curv1Filter("CD8"))
+   plot(d1, split=c(1,1,2,1))
+   plot(d2, split=c(2,1,2,1), newpage=FALSE)
+ }
Loading required package: flowViz
Loading required package: lattice
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:flowViz’, ‘package:lattice’, ‘package:flowCore’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  27.373 1.186 28.799 0 0 
> grDevices::dev.off()
pdf 
  2 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
