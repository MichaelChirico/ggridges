
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "shoredate"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('shoredate')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("create_isobases")
> ### * create_isobases
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create_isobases
> ### Title: Create isobases with different directions within the spatial
> ###   coverage in south-eastern Norway
> ### Aliases: create_isobases
> 
> ### ** Examples
> 
> # Create isobases in a specified direction
> isobases <- create_isobases(327)
> plot(sf::st_geometry(isobases))
> 
> # Create isobases using different directions
> isobases <- create_isobases(c(327, 338))
> 
> # Plot for visualisation
> plot(sf::st_geometry(isobases))
> 
> 
> 
> cleanEx()
> nameEx("displacement_plot")
> ### * displacement_plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: displacement_plot
> ### Title: Plot shoreline displacement curves
> ### Aliases: displacement_plot
> 
> ### ** Examples
> 
> # Empty plot for speed
> displacement_plot(displacement_curves = "")
> 
> 
> 
> 
> cleanEx()
> nameEx("interpolate_curve")
> ### * interpolate_curve
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: interpolate_curve
> ### Title: Interpolate displacement curve to a target location within the
> ###   spatial coverage in south-eastern Norway
> ### Aliases: interpolate_curve
> 
> ### ** Examples
> 
> # Create example point using the required coordinate system
> # WGS84 / zone UTM32N (EPSG: 32632)
> target_point <- sf::st_sfc(sf::st_point(c(579570, 6582982)), crs = 32632)
> 
> # Interpolate shoreline displacement curve to the target point location,
> # setting the resolution on the calendar scale to 2000 years for speed.
> target_curve <- interpolate_curve(target_point, cal_reso = 2000)
> 
> 
> 
> cleanEx()
> nameEx("print.shoreline_date")
> ### * print.shoreline_date
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.shoreline_date
> ### Title: Print shoreline dates to console
> ### Aliases: print.shoreline_date
> 
> ### ** Examples
> 
> target_point <- sf::st_sfc(sf::st_point(c(538310, 6544255)), crs = 32632)
> 
> # Reduce date resolution with cal_reso and elevation_reso for speed
> target_date <- shoreline_date(site = target_point,
+                               elevation = 70,
+                               elev_reso = 1,
+                               cal_reso = 400)
> 
> # Print to console
> target_date
===============
Site:  1
Elevation:  70 

95% HDR:
8450 BCE-6850 BCE
5650 BCE-5250 BCE
> 
> 
> 
> cleanEx()
> nameEx("shoredate_hdr")
> ### * shoredate_hdr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: shoredate_hdr
> ### Title: Find the highest density region of shoreline dates
> ### Aliases: shoredate_hdr
> 
> ### ** Examples
> 
> target_point <- sf::st_sfc(sf::st_point(c(538310, 6544255)), crs = 32632)
> 
> # Reduce date resolution with cal_reso and elevation_reso for speed
> target_date <- shoreline_date(sites = target_point,
+                               elevation = 80,
+                               elev_reso = 1,
+                               cal_reso = 400)
> 
> # shoredate_hdr() is already called under the hood with shoreline_date(),
> # the result of which is printed when calling the shoreline_date object
> target_date
===============
Site:  1
Elevation:  80 

95% HDR:
8850 BCE-7250 BCE
> 
> # However, shoredate_hdr() can be applied separately by pulling the
> # necessary data from the date
> (shoredate_hdr(target_date[[1]][[1]]$date$bce,
+                target_date[[1]][[1]]$date$probability,
+                target_date[[1]][[1]]$site_name,
+                target_date[[1]][[1]]$cal_reso))
$start
[1] -8850

$end
[1] -7250

$prob
[1] 0.95

$site_name
[1] "1"

$weighted_mean
[1] -8321.197

> 
> 
> 
> cleanEx()
> nameEx("shoredate_plot")
> ### * shoredate_plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: shoredate_plot
> ### Title: Plot shoreline dates
> ### Aliases: shoredate_plot
> 
> ### ** Examples
> 
> # Create example point with correct coordinate reference system
> target_point <- sf::st_sfc(sf::st_point(c(538310, 6544255)), crs = 32632)
> 
> # Reduce date resolution with cal_reso and elevation_reso for speed
> target_date <- shoreline_date(sites = target_point, elevation = 80,
+                               elev_reso = 10,
+                               cal_reso = 500)
> 
> shoredate_plot(target_date)
> 
> 
> 
> cleanEx()
> nameEx("shoredate_sumplot")
> ### * shoredate_sumplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: shoredate_sumplot
> ### Title: Plot the summed probability distribution of multiple shoreline
> ###   dates
> ### Aliases: shoredate_sumplot
> 
> ### ** Examples
> 
> # Create example points
> target_points <- sf::st_sfc(sf::st_point(c(538310, 6544255)),
+                             sf::st_point(c(538300, 6544250)))
> 
> # Set correct CRS
> target_points <- sf::st_as_sf(target_points, crs = 32632)
> 
> # Reduce date resolution with cal_reso and elevation_reso for speed
> target_dates <- shoreline_date(target_points,
+                                elevation = c(65, 70),
+                                elev_reso = 10,
+                                cal_reso = 750)
> 
> # Find summed probability
> target_sum <- sum_shoredates(target_dates)
> 
> # Call to plot
> shoredate_sumplot(target_sum)
> 
> 
> 
> cleanEx()
> nameEx("shoreline_date")
> ### * shoreline_date
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: shoreline_date
> ### Title: Shoreline date
> ### Aliases: shoreline_date
> 
> ### ** Examples
> 
> # Create example point using the required CRS WGS84 UTM32N (EPSG: 32632)
> target_point <- sf::st_sfc(sf::st_point(c(538310, 6544255)), crs = 32632)
> 
> # Date target point, manually specifying the elevation instead of providing
> # an elevation raster. Reducing elev_reso and cal_reso for speed.
> shoreline_date(sites = target_point,
+                elevation = 80,
+                elev_reso = 1,
+                cal_reso = 400)
===============
Site:  1
Elevation:  80 

95% HDR:
8850 BCE-7250 BCE
> 
> 
> 
> cleanEx()
> nameEx("sum_shoredates")
> ### * sum_shoredates
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sum_shoredates
> ### Title: Sum the probability of multiple shoreline dates
> ### Aliases: sum_shoredates
> 
> ### ** Examples
> 
> target_points <- sf::st_sfc(sf::st_point(c(538310, 6544255)),
+                             sf::st_point(c(538300, 6544250)))
> target_points <- sf::st_as_sf(target_points, crs = 32632)
> 
> # Shoreline date, reducing resoltuion on elevation and calendar scales for
> # speed.
> target_dates <- shoreline_date(target_points,
+                                elevation = c(65, 70),
+                                elev_reso = 10,
+                                cal_reso = 500)
> 
> sum_shoredates(target_dates)
$sum
      bce probability
1  -10550 0.000000000
2  -10050 0.000000000
3   -9550 0.000000000
4   -9050 0.000000000
5   -8550 0.204938076
6   -8050 0.640915936
7   -7550 0.049773356
8   -7050 0.035353443
9   -6550 0.010428783
10  -6050 0.010460665
11  -5550 0.015498099
12  -5050 0.010090269
13  -4550 0.007648791
14  -4050 0.002595957
15  -3550 0.002603893
16  -3050 0.002603893
17  -2550 0.001389120
18  -2050 0.001389120
19  -1550 0.002786733
20  -1050 0.000000000
21   -550 0.001523868
22    -50 0.000000000
23    450 0.000000000
24    950 0.000000000
25   1450 0.000000000
26   1950 0.000000000

$dates_n
[1] 2

attr(,"class")
[1] "shoredates_sum" "list"          
> 
> 
> 
> cleanEx()
> nameEx("target_plot")
> ### * target_plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: target_plot
> ### Title: Plot a map with target locations
> ### Aliases: target_plot
> 
> ### ** Examples
> 
> # Display the background map and default isobases
> target_plot()
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.323 0.187 2.511 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
