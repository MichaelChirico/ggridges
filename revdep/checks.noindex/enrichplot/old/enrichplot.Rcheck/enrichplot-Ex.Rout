
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "enrichplot"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('enrichplot')

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("barplot.enrichResult")
> ### * barplot.enrichResult
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: barplot.enrichResult
> ### Title: barplot
> ### Aliases: barplot.enrichResult
> 
> ### ** Examples
> 
> library(DOSE)
DOSE v3.28.2  For help: https://yulab-smu.top/biomedical-knowledge-mining-book/

If you use DOSE in published research, please cite:
Guangchuang Yu, Li-Gen Wang, Guang-Rong Yan, Qing-Yu He. DOSE: an R/Bioconductor package for Disease Ontology Semantic and Enrichment analysis. Bioinformatics 2015, 31(4):608-609

> data(geneList)
> de <- names(geneList)[1:100]
> x <- enrichDO(de)
> barplot(x)
> # use `showCategory` to select the displayed terms. It can be a number of a vector of terms.
> barplot(x, showCategory = 10)
> categorys <- c("pre-malignant neoplasm", "intestinal disease",
+                "breast ductal carcinoma", "non-small cell lung carcinoma")
> barplot(x, showCategory = categorys)
> 
> 
> 
> cleanEx()

detaching ‘package:DOSE’

> nameEx("cnetplot")
> ### * cnetplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cnetplot
> ### Title: cnetplot
> ### Aliases: cnetplot cnetplot,enrichResult-method cnetplot,list-method
> ###   cnetplot,gseaResult-method cnetplot,compareClusterResult-method
> ###   cnetplot.enrichResult
> 
> ### ** Examples
> 
> ## Not run: 
> ##D     library(DOSE)
> ##D     data(geneList)
> ##D     de <- names(geneList)[1:100]
> ##D     x <- enrichDO(de)
> ##D     x2 <- pairwise_termsim(x)
> ##D     cnetplot(x2)
> ##D     # use `layout` to change the layout of map
> ##D     cnetplot(x2, layout = "star")
> ##D     # use `showCategory` to select the displayed terms. It can be a number of a vector of terms.
> ##D     cnetplot(x2, showCategory = 10)
> ##D     categorys <- c("pre-malignant neoplasm", "intestinal disease",
> ##D                    "breast ductal carcinoma", "non-small cell lung carcinoma")
> ##D     cnetplot(x2, showCategory = categorys)
> ##D     # 'compareClusterResult' object is also supported.
> ##D     library(clusterProfiler)
> ##D     library(DOSE)
> ##D     library(org.Hs.eg.db)
> ##D     data(gcSample)
> ##D     xx <- compareCluster(gcSample, fun="enrichGO", OrgDb="org.Hs.eg.db")
> ##D     xx2 <- pairwise_termsim(xx)
> ##D     cnetplot(xx2)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("color_palette")
> ### * color_palette
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: color_palette
> ### Title: color_palette
> ### Aliases: color_palette
> 
> ### ** Examples
> 
> color_palette(c("red", "yellow", "green"))
  [1] "#FF0000" "#FF0100" "#FF0300" "#FF0500" "#FF0600" "#FF0800" "#FF0A00"
  [8] "#FF0B00" "#FF0D00" "#FF0F00" "#FF1100" "#FF1200" "#FF1400" "#FF1600"
 [15] "#FF1700" "#FF1900" "#FF1B00" "#FF1D00" "#FF1E00" "#FF2000" "#FF2200"
 [22] "#FF2300" "#FF2500" "#FF2700" "#FF2900" "#FF2A00" "#FF2C00" "#FF2E00"
 [29] "#FF2F00" "#FF3100" "#FF3300" "#FF3500" "#FF3600" "#FF3800" "#FF3A00"
 [36] "#FF3B00" "#FF3D00" "#FF3F00" "#FF4100" "#FF4200" "#FF4400" "#FF4600"
 [43] "#FF4700" "#FF4900" "#FF4B00" "#FF4D00" "#FF4E00" "#FF5000" "#FF5200"
 [50] "#FF5300" "#FF5500" "#FF5700" "#FF5800" "#FF5A00" "#FF5C00" "#FF5E00"
 [57] "#FF5F00" "#FF6100" "#FF6300" "#FF6400" "#FF6600" "#FF6800" "#FF6A00"
 [64] "#FF6B00" "#FF6D00" "#FF6F00" "#FF7000" "#FF7200" "#FF7400" "#FF7600"
 [71] "#FF7700" "#FF7900" "#FF7B00" "#FF7C00" "#FF7E00" "#FF8000" "#FF8200"
 [78] "#FF8300" "#FF8500" "#FF8700" "#FF8800" "#FF8A00" "#FF8C00" "#FF8E00"
 [85] "#FF8F00" "#FF9100" "#FF9300" "#FF9400" "#FF9600" "#FF9800" "#FF9A00"
 [92] "#FF9B00" "#FF9D00" "#FF9F00" "#FFA000" "#FFA200" "#FFA400" "#FFA600"
 [99] "#FFA700" "#FFA900" "#FFAB00" "#FFAC00" "#FFAE00" "#FFB000" "#FFB100"
[106] "#FFB300" "#FFB500" "#FFB700" "#FFB800" "#FFBA00" "#FFBC00" "#FFBD00"
[113] "#FFBF00" "#FFC100" "#FFC300" "#FFC400" "#FFC600" "#FFC800" "#FFC900"
[120] "#FFCB00" "#FFCD00" "#FFCF00" "#FFD000" "#FFD200" "#FFD400" "#FFD500"
[127] "#FFD700" "#FFD900" "#FFDB00" "#FFDC00" "#FFDE00" "#FFE000" "#FFE100"
[134] "#FFE300" "#FFE500" "#FFE700" "#FFE800" "#FFEA00" "#FFEC00" "#FFED00"
[141] "#FFEF00" "#FFF100" "#FFF300" "#FFF400" "#FFF600" "#FFF800" "#FFF900"
[148] "#FFFB00" "#FFFD00" "#FFFF00" "#FDFF00" "#FBFF00" "#F9FF00" "#F8FF00"
[155] "#F6FF00" "#F4FF00" "#F3FF00" "#F1FF00" "#EFFF00" "#EDFF00" "#ECFF00"
[162] "#EAFF00" "#E8FF00" "#E7FF00" "#E5FF00" "#E3FF00" "#E1FF00" "#E0FF00"
[169] "#DEFF00" "#DCFF00" "#DBFF00" "#D9FF00" "#D7FF00" "#D5FF00" "#D4FF00"
[176] "#D2FF00" "#D0FF00" "#CFFF00" "#CDFF00" "#CBFF00" "#C9FF00" "#C8FF00"
[183] "#C6FF00" "#C4FF00" "#C3FF00" "#C1FF00" "#BFFF00" "#BDFF00" "#BCFF00"
[190] "#BAFF00" "#B8FF00" "#B7FF00" "#B5FF00" "#B3FF00" "#B1FF00" "#B0FF00"
[197] "#AEFF00" "#ACFF00" "#ABFF00" "#A9FF00" "#A7FF00" "#A6FF00" "#A4FF00"
[204] "#A2FF00" "#A0FF00" "#9FFF00" "#9DFF00" "#9BFF00" "#9AFF00" "#98FF00"
[211] "#96FF00" "#94FF00" "#93FF00" "#91FF00" "#8FFF00" "#8EFF00" "#8CFF00"
[218] "#8AFF00" "#88FF00" "#87FF00" "#85FF00" "#83FF00" "#82FF00" "#80FF00"
[225] "#7EFF00" "#7CFF00" "#7BFF00" "#79FF00" "#77FF00" "#76FF00" "#74FF00"
[232] "#72FF00" "#70FF00" "#6FFF00" "#6DFF00" "#6BFF00" "#6AFF00" "#68FF00"
[239] "#66FF00" "#64FF00" "#63FF00" "#61FF00" "#5FFF00" "#5EFF00" "#5CFF00"
[246] "#5AFF00" "#58FF00" "#57FF00" "#55FF00" "#53FF00" "#52FF00" "#50FF00"
[253] "#4EFF00" "#4DFF00" "#4BFF00" "#49FF00" "#47FF00" "#46FF00" "#44FF00"
[260] "#42FF00" "#41FF00" "#3FFF00" "#3DFF00" "#3BFF00" "#3AFF00" "#38FF00"
[267] "#36FF00" "#35FF00" "#33FF00" "#31FF00" "#2FFF00" "#2EFF00" "#2CFF00"
[274] "#2AFF00" "#29FF00" "#27FF00" "#25FF00" "#23FF00" "#22FF00" "#20FF00"
[281] "#1EFF00" "#1DFF00" "#1BFF00" "#19FF00" "#17FF00" "#16FF00" "#14FF00"
[288] "#12FF00" "#11FF00" "#0FFF00" "#0DFF00" "#0BFF00" "#0AFF00" "#08FF00"
[295] "#06FF00" "#05FF00" "#03FF00" "#01FF00" "#00FF00"
> 
> 
> 
> cleanEx()
> nameEx("dotplot")
> ### * dotplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dotplot
> ### Title: dotplot
> ### Aliases: dotplot dotplot,enrichResult-method dotplot,gseaResult-method
> ###   dotplot,compareClusterResult-method
> ###   dotplot,compareClusterResult,ANY-method
> ###   dotplot,enrichResultList-method dotplot,enrichResultList,ANY-method
> ###   dotplot,gseaResultList-method dotplot,gseaResultList,ANY-method
> ###   dotplot.enrichResult dotplot.compareClusterResult
> 
> ### ** Examples
> 
> ## Not run: 
> ##D     library(DOSE)
> ##D     data(geneList)
> ##D     de <- names(geneList)[1:100]
> ##D     x <- enrichDO(de)
> ##D     dotplot(x)
> ##D     # use `showCategory` to select the displayed terms. It can be a number of a vector of terms.
> ##D     dotplot(x, showCategory = 10)
> ##D     categorys <- c("pre-malignant neoplasm", "intestinal disease",
> ##D                    "breast ductal carcinoma", "non-small cell lung carcinoma")
> ##D     dotplot(x, showCategory = categorys)
> ##D     # It can also graph compareClusterResult
> ##D     data(gcSample)
> ##D     library(clusterProfiler)
> ##D     library(DOSE)
> ##D     library(org.Hs.eg.db)
> ##D     data(gcSample)
> ##D     xx <- compareCluster(gcSample, fun="enrichGO", OrgDb="org.Hs.eg.db")
> ##D     xx2 <- pairwise_termsim(xx)
> ##D     library(ggstar)
> ##D     dotplot(xx2)
> ##D     dotplot(xx2, shape = TRUE)
> ##D     dotplot(xx2, group = TRUE)
> ##D     dotplot(xx2, x = "GeneRatio", group = TRUE, size = "count")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("drag_network")
> ### * drag_network
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: drag_network
> ### Title: Drag the nodes of a network to update the layout of the network
> ### Aliases: drag_network
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(igraph)
> ##D library(ggraph)
> ##D 
> ##D flow_info <- data.frame(from = c(1,2,3,3,4,5,6),
> ##D                         to = c(5,5,5,6,7,6,7))
> ##D g = graph_from_data_frame(flow_info)
> ##D p <- ggraph(g, layout='nicely') + geom_node_point() + geom_edge_link() 
> ##D pp <- drag_network(p)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("emapplot")
> ### * emapplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: emapplot
> ### Title: emapplot
> ### Aliases: emapplot emapplot,enrichResult-method
> ###   emapplot,gseaResult-method emapplot,compareClusterResult-method
> ###   emapplot.enrichResult emapplot.compareClusterResult
> 
> ### ** Examples
> 
> ## Not run: 
> ##D     library(DOSE)
> ##D     data(geneList)
> ##D     de <- names(geneList)[1:100]
> ##D     x <- enrichDO(de)
> ##D     x2 <- pairwise_termsim(x)
> ##D     emapplot(x2)
> ##D     # use `layout` to change the layout of map
> ##D     emapplot(x2, layout = "star")
> ##D     # use `showCategory` to  select the displayed terms. It can be a number of a vector of terms.
> ##D     emapplot(x2, showCategory = 10)
> ##D     categorys <- c("pre-malignant neoplasm", "intestinal disease",
> ##D                    "breast ductal carcinoma")
> ##D     emapplot(x2, showCategory = categorys)
> ##D 
> ##D     # It can also graph compareClusterResult
> ##D     library(clusterProfiler)
> ##D     library(DOSE)
> ##D     library(org.Hs.eg.db)
> ##D     data(gcSample)
> ##D     xx <- compareCluster(gcSample, fun="enrichGO", OrgDb="org.Hs.eg.db")
> ##D     xx2 <- pairwise_termsim(xx)
> ##D     emapplot(xx2)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("goplot")
> ### * goplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: goplot
> ### Title: goplot
> ### Aliases: goplot goplot,enrichResult-method goplot,gseaResult-method
> ###   goplot.enrichResult
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 	library(clusterProfiler)
> ##D   data(geneList, package = "DOSE")
> ##D 	de <- names(geneList)[1:100]
> ##D 	yy <- enrichGO(de, 'org.Hs.eg.db', ont="BP", pvalueCutoff=0.01)
> ##D     goplot(yy)
> ##D     goplot(yy, showCategory = 5)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("gseaplot")
> ### * gseaplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gseaplot
> ### Title: gseaplot
> ### Aliases: gseaplot gseaplot,gseaResult-method gseaplot.gseaResult
> 
> ### ** Examples
> 
> library(DOSE)
DOSE v3.28.2  For help: https://yulab-smu.top/biomedical-knowledge-mining-book/

If you use DOSE in published research, please cite:
Guangchuang Yu, Li-Gen Wang, Guang-Rong Yan, Qing-Yu He. DOSE: an R/Bioconductor package for Disease Ontology Semantic and Enrichment analysis. Bioinformatics 2015, 31(4):608-609

> data(geneList)
> x <- gseDO(geneList)
preparing geneSet collections...
GSEA analysis...
Warning in fgseaMultilevel(pathways = pathways, stats = stats, minSize = minSize,  :
  For some pathways, in reality P-values are less than 1e-10. You can set the `eps` argument to zero for better estimation.
leading edge analysis...
done...
> gseaplot(x, geneSetID=1)
> 
> 
> 
> cleanEx()

detaching ‘package:DOSE’

> nameEx("heatplot")
> ### * heatplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: heatplot
> ### Title: heatplot
> ### Aliases: heatplot heatplot,enrichResult-method
> ###   heatplot,gseaResult-method heatplot.enrichResult
> 
> ### ** Examples
> 
> library(DOSE)
DOSE v3.28.2  For help: https://yulab-smu.top/biomedical-knowledge-mining-book/

If you use DOSE in published research, please cite:
Guangchuang Yu, Li-Gen Wang, Guang-Rong Yan, Qing-Yu He. DOSE: an R/Bioconductor package for Disease Ontology Semantic and Enrichment analysis. Bioinformatics 2015, 31(4):608-609

> data(geneList)
> de <- names(geneList)[1:100]
> x <- enrichDO(de)
> heatplot(x)
> 
> 
> 
> cleanEx()

detaching ‘package:DOSE’

> nameEx("pairwise_termsim")
> ### * pairwise_termsim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pairwise_termsim
> ### Title: pairwise_termsim
> ### Aliases: pairwise_termsim pairwise_termsim,enrichResult-method
> ###   pairwise_termsim,gseaResult-method
> ###   pairwise_termsim,compareClusterResult-method
> ###   pairwise_termsim.enrichResult pairwise_termsim.compareClusterResult
> 
> ### ** Examples
> 
> ## Not run: 
> ##D     library(clusterProfiler)
> ##D     library(org.Hs.eg.db)
> ##D     library(enrichplot)
> ##D     library(GOSemSim)
> ##D     library(DOSE)
> ##D     data(geneList)
> ##D     gene <- names(geneList)[abs(geneList) > 2]
> ##D     ego <- enrichGO(gene  = gene,
> ##D         universe      = names(geneList),
> ##D         OrgDb         = org.Hs.eg.db,
> ##D         ont           = "BP",
> ##D         pAdjustMethod = "BH",
> ##D         pvalueCutoff  = 0.01,
> ##D         qvalueCutoff  = 0.05,
> ##D         readable      = TRUE)
> ##D     d <- godata('org.Hs.eg.db', ont="BP")
> ##D     ego2 <- pairwise_termsim(ego, method="Wang", semData = d)
> ##D     emapplot(ego2)
> ##D     emapplot_cluster(ego2)
> ##D    
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("ridgeplot")
> ### * ridgeplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ridgeplot
> ### Title: ridgeplot
> ### Aliases: ridgeplot ridgeplot,gseaResult-method ridgeplot.gseaResult
> 
> ### ** Examples
> 
> library(DOSE)
DOSE v3.28.2  For help: https://yulab-smu.top/biomedical-knowledge-mining-book/

If you use DOSE in published research, please cite:
Guangchuang Yu, Li-Gen Wang, Guang-Rong Yan, Qing-Yu He. DOSE: an R/Bioconductor package for Disease Ontology Semantic and Enrichment analysis. Bioinformatics 2015, 31(4):608-609

> data(geneList)
> x <- gseDO(geneList)
preparing geneSet collections...
GSEA analysis...
Warning in fgseaMultilevel(pathways = pathways, stats = stats, minSize = minSize,  :
  For some pathways, in reality P-values are less than 1e-10. You can set the `eps` argument to zero for better estimation.
leading edge analysis...
done...
> ridgeplot(x)
Picking joint bandwidth of 0.23
> 
> 
> 
> cleanEx()

detaching ‘package:DOSE’

> nameEx("ssplot")
> ### * ssplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ssplot
> ### Title: ssplot
> ### Aliases: ssplot ssplot,enrichResult-method ssplot,gseaResult-method
> ###   ssplot,compareClusterResult-method ssplot.enrichResult
> ###   ssplot.compareClusterResult
> 
> ### ** Examples
> 
> ## Not run: 
> ##D     library(clusterProfiler)
> ##D     library(org.Hs.eg.db)
> ##D     library(enrichplot)
> ##D     library(GOSemSim)
> ##D     library(DOSE)
> ##D     data(geneList)
> ##D     gene <- names(geneList)[abs(geneList) > 2]
> ##D     ego <- enrichGO(gene  = gene,
> ##D         universe      = names(geneList),
> ##D         OrgDb         = org.Hs.eg.db,
> ##D         ont           = "BP",
> ##D         pAdjustMethod = "BH",
> ##D         pvalueCutoff  = 0.01,
> ##D         qvalueCutoff  = 0.05,
> ##D         readable      = TRUE)
> ##D     d <- godata('org.Hs.eg.db', ont="BP")
> ##D     ego2 <- pairwise_termsim(ego, method = "Wang", semData = d)
> ##D     ssplot(ego2)    
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("treeplot")
> ### * treeplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: treeplot
> ### Title: treeplot
> ### Aliases: treeplot treeplot,enrichResult-method
> ###   treeplot,gseaResult-method treeplot,compareClusterResult-method
> ###   treeplot.enrichResult treeplot.compareClusterResult
> 
> ### ** Examples
> 
> ## Not run: 
> ##D     library(clusterProfiler)
> ##D     library(org.Hs.eg.db)
> ##D     library(enrichplot)
> ##D     library(GOSemSim)
> ##D     library(ggplot2)
> ##D     library(DOSE)
> ##D     data(geneList)
> ##D     gene <- names(geneList)[abs(geneList) > 2]
> ##D     ego <- enrichGO(gene  = gene,
> ##D         universe      = names(geneList),
> ##D         OrgDb         = org.Hs.eg.db,
> ##D         ont           = "BP",
> ##D         pAdjustMethod = "BH",
> ##D         pvalueCutoff  = 0.01,
> ##D         qvalueCutoff  = 0.05,
> ##D         readable      = TRUE)
> ##D     d <- godata('org.Hs.eg.db', ont="BP")
> ##D     ego2 <- pairwise_termsim(ego, method = "Wang", semData = d)
> ##D     treeplot(ego2, showCategory = 30)
> ##D     # use `hilight = FALSE` to remove ggtree::geom_hilight() layer.
> ##D     treeplot(ego2, showCategory = 30, hilight = FALSE)
> ##D     # use `offset` parameter to adjust the distance of bar and tree.
> ##D     treeplot(ego2, showCategory = 30, hilight = FALSE, offset = rel(1.5))
> ##D     # use `offset_tiplab` parameter to adjust the distance of nodes and branches.
> ##D     treeplot(ego2, showCategory = 30, hilight = FALSE, offset_tiplab = rel(1.5))
> ##D     keep <- rownames(ego2@termsim)[c(1:10, 16:20)]
> ##D     keep
> ##D     treeplot(ego2, showCategory = keep)
> ##D     treeplot(ego2, showCategory = 20, 
> ##D         group_color = c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442"))
> ##D     # It can also graph compareClusterResult
> ##D     data(gcSample)
> ##D     xx <- compareCluster(gcSample, fun="enrichKEGG",
> ##D                          organism="hsa", pvalueCutoff=0.05)
> ##D     xx <- pairwise_termsim(xx)                     
> ##D     treeplot(xx)                     
> ##D     
> ##D     # use `geneClusterPanel` to change the gene cluster panel.
> ##D     treeplot(xx, geneClusterPanel = "dotplot")  
> ##D     
> ##D     treeplot(xx, geneClusterPanel = "pie")  
> ##D    
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("upsetplot-methods")
> ### * upsetplot-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: upsetplot
> ### Title: upsetplot method
> ### Aliases: upsetplot upsetplot,enrichResult-method
> ###   upsetplot,enrichResult,ANY-method upsetplot,gseaResult-method
> ###   upsetplot,gseaResult
> 
> ### ** Examples
> 
> require(DOSE)
Loading required package: DOSE
DOSE v3.28.2  For help: https://yulab-smu.top/biomedical-knowledge-mining-book/

If you use DOSE in published research, please cite:
Guangchuang Yu, Li-Gen Wang, Guang-Rong Yan, Qing-Yu He. DOSE: an R/Bioconductor package for Disease Ontology Semantic and Enrichment analysis. Bioinformatics 2015, 31(4):608-609

> data(geneList)
> de=names(geneList)[1:100]
> x <- enrichDO(de)
> upsetplot(x, 8)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:DOSE’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  9.787 0.528 14.659 19.066 0.459 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
