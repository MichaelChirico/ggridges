
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "nullranges"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('nullranges')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("MatchedDataFrame")
> ### * MatchedDataFrame
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MatchedDataFrame-class
> ### Title: MatchedDataFrame objects
> ### Aliases: MatchedDataFrame-class MatchedDataFrame
> 
> ### ** Examples
> 
> ## Constructing MatchedDataFrame with matchRanges
> ## data.frame
> set.seed(123)
> x <- makeExampleMatchedDataSet(type = "data.frame")
> mx <- matchRanges(
+   focal = x[x$feature1, ],
+   pool = x[!x$feature1, ],
+   covar = ~ feature2 + feature3,
+   method = "rejection",
+   replace = FALSE
+ )
> class(mx)
[1] "MatchedDataFrame"
attr(,"package")
[1] "nullranges"
> 
> ## data.table
> set.seed(123)
> x <- makeExampleMatchedDataSet(type = "data.table")
> mx <- matchRanges(
+   focal = x[x$feature1],
+   pool = x[!x$feature1],
+   covar = ~ feature2 + feature3,
+   method = "rejection",
+   replace = FALSE
+ )
> class(mx)
[1] "MatchedDataFrame"
attr(,"package")
[1] "nullranges"
> 
> ## DataFrame
> set.seed(123)
> x <- makeExampleMatchedDataSet(type = "DataFrame")
> mx <- matchRanges(
+   focal = x[x$feature1, ],
+   pool = x[!x$feature1, ],
+   covar = ~ feature2 + feature3,
+   method = "rejection",
+   replace = FALSE
+ )
> class(mx)
[1] "MatchedDataFrame"
attr(,"package")
[1] "nullranges"
> 
> ## Make MatchedDataFrame example
> set.seed(123)
> x <- makeExampleMatchedDataSet(type = "DataFrame", matched = TRUE)
> ## Accessor functions for Matched class
> matchedData(x)
       id feature2 feature3         ps       set
    1:  1 2.879049        c 0.21095908     focal
    2:  1 3.539645        c 0.19210984     focal
    3:  1 7.117417        c 0.11193396     focal
    4:  1 4.141017        a 0.01771986     focal
    5:  1 4.258575        c 0.17308581     focal
   ---                                          
20496:  0 1.235781        b 0.08945367 unmatched
20497:  0 1.696712        a 0.02707977 unmatched
20498:  0 6.111404        a 0.01255772 unmatched
20499:  0 2.216575        d 0.07578989 unmatched
20500:  0 5.330029        b 0.04535856 unmatched
> covariates(x)
[1] "feature2" "feature3"
> method(x)
[1] "rejection"
> withReplacement(x)
[1] FALSE
> head(indices(x, set = 'matched'))
[1] 6100 5198 9886 3619 9077 6763
> 
> ## Accessor functions for Matched subclasses
> focal(x)
DataFrame with 500 rows and 3 columns
     feature1  feature2    feature3
    <logical> <numeric> <character>
1        TRUE   2.87905           c
2        TRUE   3.53965           c
3        TRUE   7.11742           c
4        TRUE   4.14102           a
5        TRUE   4.25858           c
...       ...       ...         ...
496      TRUE   1.28384           d
497      TRUE   4.36369           a
498      TRUE   4.32968           b
499      TRUE   4.72823           b
500      TRUE   5.10432           b
> pool(x)
DataFrame with 10000 rows and 3 columns
       feature1  feature2    feature3
      <logical> <numeric> <character>
1         FALSE   3.28347           e
2         FALSE   7.12640           a
3         FALSE   1.92222           b
4         FALSE  10.24116           a
5         FALSE  10.17287           c
...         ...       ...         ...
9996      FALSE   1.23578           b
9997      FALSE   1.69671           a
9998      FALSE   6.11140           a
9999      FALSE   2.21657           d
10000     FALSE   5.33003           b
> matched(x)
DataFrame with 500 rows and 3 columns
     feature1  feature2    feature3
    <logical> <numeric> <character>
1       FALSE  2.108420           c
2       FALSE  5.991699           b
3       FALSE  5.696525           b
4       FALSE  0.409923           a
5       FALSE  9.330107           b
...       ...       ...         ...
496     FALSE   3.27301           b
497     FALSE   8.05522           c
498     FALSE   2.01576           a
499     FALSE   6.60221           b
500     FALSE   7.79926           c
> unmatched(x)
DataFrame with 9500 rows and 3 columns
      feature1  feature2    feature3
     <logical> <numeric> <character>
1        FALSE   3.28347           e
2        FALSE   7.12640           a
3        FALSE   1.92222           b
4        FALSE  10.24116           a
5        FALSE  10.17287           c
...        ...       ...         ...
9496     FALSE   1.23578           b
9497     FALSE   1.69671           a
9498     FALSE   6.11140           a
9499     FALSE   2.21657           d
9500     FALSE   5.33003           b
> 
> 
> 
> 
> cleanEx()
> nameEx("MatchedGInteractions")
> ### * MatchedGInteractions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MatchedGInteractions-class
> ### Title: MatchedGInteractions objects
> ### Aliases: MatchedGInteractions-class MatchedGInteractions
> 
> ### ** Examples
> 
> ## Constructing MatchedGInteractions with matchRanges
> set.seed(123)
> gi <- makeExampleMatchedDataSet(type = "GInteractions")
> mgi <- matchRanges(
+   focal = gi[gi$feature1, ],
+   pool = gi[!gi$feature1, ],
+   covar = ~ feature2 + feature3,
+   method = "rejection",
+   replace = FALSE
+ )
> class(mgi)
[1] "MatchedGInteractions"
attr(,"package")
[1] "nullranges"
> 
> ## Make MatchedGInteractions example
> set.seed(123)
> x <- makeExampleMatchedDataSet(type = "GInteractions", matched = TRUE)
> ## Accessor functions for Matched class
> matchedData(x)
       id feature2 feature3         ps       set
    1:  1 2.879049        c 0.21095908     focal
    2:  1 3.539645        c 0.19210984     focal
    3:  1 7.117417        c 0.11193396     focal
    4:  1 4.141017        a 0.01771986     focal
    5:  1 4.258575        c 0.17308581     focal
   ---                                          
20496:  0 1.235781        b 0.08945367 unmatched
20497:  0 1.696712        a 0.02707977 unmatched
20498:  0 6.111404        a 0.01255772 unmatched
20499:  0 2.216575        d 0.07578989 unmatched
20500:  0 5.330029        b 0.04535856 unmatched
> covariates(x)
[1] "feature2" "feature3"
> method(x)
[1] "rejection"
> withReplacement(x)
[1] FALSE
> head(indices(x, set = 'matched'))
[1] 6100 5198 9886 3619 9077 6763
> 
> ## Accessor functions for Matched subclasses
> focal(x)
GInteractions object with 500 interactions and 3 metadata columns:
        seqnames1   ranges1     seqnames2   ranges2 |  feature1  feature2
            <Rle> <IRanges>         <Rle> <IRanges> | <logical> <numeric>
    [1]      chr1     1-100 ---      chr1     1-100 |      TRUE   2.87905
    [2]      chr1     2-101 ---      chr1     2-101 |      TRUE   3.53965
    [3]      chr1     3-102 ---      chr1     3-102 |      TRUE   7.11742
    [4]      chr1     4-103 ---      chr1     4-103 |      TRUE   4.14102
    [5]      chr1     5-104 ---      chr1     5-104 |      TRUE   4.25858
    ...       ...       ... ...       ...       ... .       ...       ...
  [496]      chr1   496-595 ---      chr1   496-595 |      TRUE   1.28384
  [497]      chr1   497-596 ---      chr1   497-596 |      TRUE   4.36369
  [498]      chr1   498-597 ---      chr1   498-597 |      TRUE   4.32968
  [499]      chr1   499-598 ---      chr1   499-598 |      TRUE   4.72823
  [500]      chr1   500-599 ---      chr1   500-599 |      TRUE   5.10432
           feature3
        <character>
    [1]           c
    [2]           c
    [3]           c
    [4]           a
    [5]           c
    ...         ...
  [496]           d
  [497]           a
  [498]           b
  [499]           b
  [500]           b
  -------
  regions: 10500 ranges and 0 metadata columns
  seqinfo: 1 sequence from an unspecified genome; no seqlengths
> pool(x)
GInteractions object with 10000 interactions and 3 metadata columns:
          seqnames1     ranges1     seqnames2     ranges2 |  feature1  feature2
              <Rle>   <IRanges>         <Rle>   <IRanges> | <logical> <numeric>
      [1]      chr1     501-600 ---      chr1     501-600 |     FALSE   3.28347
      [2]      chr1     502-601 ---      chr1     502-601 |     FALSE   7.12640
      [3]      chr1     503-602 ---      chr1     503-602 |     FALSE   1.92222
      [4]      chr1     504-603 ---      chr1     504-603 |     FALSE  10.24116
      [5]      chr1     505-604 ---      chr1     505-604 |     FALSE  10.17287
      ...       ...         ... ...       ...         ... .       ...       ...
   [9996]      chr1 10496-10595 ---      chr1 10496-10595 |     FALSE   1.23578
   [9997]      chr1 10497-10596 ---      chr1 10497-10596 |     FALSE   1.69671
   [9998]      chr1 10498-10597 ---      chr1 10498-10597 |     FALSE   6.11140
   [9999]      chr1 10499-10598 ---      chr1 10499-10598 |     FALSE   2.21657
  [10000]      chr1 10500-10599 ---      chr1 10500-10599 |     FALSE   5.33003
             feature3
          <character>
      [1]           e
      [2]           a
      [3]           b
      [4]           a
      [5]           c
      ...         ...
   [9996]           b
   [9997]           a
   [9998]           a
   [9999]           d
  [10000]           b
  -------
  regions: 10500 ranges and 0 metadata columns
  seqinfo: 1 sequence from an unspecified genome; no seqlengths
> matched(x)
GInteractions object with 500 interactions and 3 metadata columns:
        seqnames1     ranges1     seqnames2     ranges2 |  feature1  feature2
            <Rle>   <IRanges>         <Rle>   <IRanges> | <logical> <numeric>
    [1]      chr1   6600-6699 ---      chr1   6600-6699 |     FALSE  2.108420
    [2]      chr1   5698-5797 ---      chr1   5698-5797 |     FALSE  5.991699
    [3]      chr1 10386-10485 ---      chr1 10386-10485 |     FALSE  5.696525
    [4]      chr1   4119-4218 ---      chr1   4119-4218 |     FALSE  0.409923
    [5]      chr1   9577-9676 ---      chr1   9577-9676 |     FALSE  9.330107
    ...       ...         ... ...       ...         ... .       ...       ...
  [496]      chr1   1275-1374 ---      chr1   1275-1374 |     FALSE   3.27301
  [497]      chr1   4976-5075 ---      chr1   4976-5075 |     FALSE   8.05522
  [498]      chr1   3917-4016 ---      chr1   3917-4016 |     FALSE   2.01576
  [499]      chr1 10205-10304 ---      chr1 10205-10304 |     FALSE   6.60221
  [500]      chr1   1841-1940 ---      chr1   1841-1940 |     FALSE   7.79926
           feature3
        <character>
    [1]           c
    [2]           b
    [3]           b
    [4]           a
    [5]           b
    ...         ...
  [496]           b
  [497]           c
  [498]           a
  [499]           b
  [500]           c
  -------
  regions: 10500 ranges and 0 metadata columns
  seqinfo: 1 sequence from an unspecified genome; no seqlengths
> unmatched(x)
GInteractions object with 9500 interactions and 3 metadata columns:
         seqnames1     ranges1     seqnames2     ranges2 |  feature1  feature2
             <Rle>   <IRanges>         <Rle>   <IRanges> | <logical> <numeric>
     [1]      chr1     501-600 ---      chr1     501-600 |     FALSE   3.28347
     [2]      chr1     502-601 ---      chr1     502-601 |     FALSE   7.12640
     [3]      chr1     503-602 ---      chr1     503-602 |     FALSE   1.92222
     [4]      chr1     504-603 ---      chr1     504-603 |     FALSE  10.24116
     [5]      chr1     505-604 ---      chr1     505-604 |     FALSE  10.17287
     ...       ...         ... ...       ...         ... .       ...       ...
  [9496]      chr1 10496-10595 ---      chr1 10496-10595 |     FALSE   1.23578
  [9497]      chr1 10497-10596 ---      chr1 10497-10596 |     FALSE   1.69671
  [9498]      chr1 10498-10597 ---      chr1 10498-10597 |     FALSE   6.11140
  [9499]      chr1 10499-10598 ---      chr1 10499-10598 |     FALSE   2.21657
  [9500]      chr1 10500-10599 ---      chr1 10500-10599 |     FALSE   5.33003
            feature3
         <character>
     [1]           e
     [2]           a
     [3]           b
     [4]           a
     [5]           c
     ...         ...
  [9496]           b
  [9497]           a
  [9498]           a
  [9499]           d
  [9500]           b
  -------
  regions: 10500 ranges and 0 metadata columns
  seqinfo: 1 sequence from an unspecified genome; no seqlengths
> 
> 
> 
> 
> cleanEx()
> nameEx("MatchedGRanges")
> ### * MatchedGRanges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MatchedGRanges-class
> ### Title: MatchedGRanges objects
> ### Aliases: MatchedGRanges-class MatchedGRanges
> 
> ### ** Examples
> 
> ## Contructing MatchedGRanges with matchRanges
> set.seed(123)
> gr <- makeExampleMatchedDataSet(type = "GRanges")
> mgr <- matchRanges(
+   focal = gr[gr$feature1, ],
+   pool = gr[!gr$feature1, ],
+   covar = ~ feature2 + feature3,
+   method = "rejection",
+   replace = FALSE
+ )
> class(mgr)
[1] "MatchedGRanges"
attr(,"package")
[1] "nullranges"
> 
> ## Make MatchedGRanges example
> set.seed(123)
> x <- makeExampleMatchedDataSet(type = "GRanges", matched = TRUE)
> ## Accessor functions for Matched class
> matchedData(x)
       id feature2 feature3         ps       set
    1:  1 2.879049        c 0.21095908     focal
    2:  1 3.539645        c 0.19210984     focal
    3:  1 7.117417        c 0.11193396     focal
    4:  1 4.141017        a 0.01771986     focal
    5:  1 4.258575        c 0.17308581     focal
   ---                                          
20496:  0 1.235781        b 0.08945367 unmatched
20497:  0 1.696712        a 0.02707977 unmatched
20498:  0 6.111404        a 0.01255772 unmatched
20499:  0 2.216575        d 0.07578989 unmatched
20500:  0 5.330029        b 0.04535856 unmatched
> covariates(x)
[1] "feature2" "feature3"
> method(x)
[1] "rejection"
> withReplacement(x)
[1] FALSE
> head(indices(x, set = 'matched'))
[1] 6100 5198 9886 3619 9077 6763
> 
> ## Accessor functions for Matched subclasses
> focal(x)
GRanges object with 500 ranges and 3 metadata columns:
        seqnames    ranges strand |  feature1  feature2    feature3
           <Rle> <IRanges>  <Rle> | <logical> <numeric> <character>
    [1]     chr1     1-100      * |      TRUE   2.87905           c
    [2]     chr1     2-101      * |      TRUE   3.53965           c
    [3]     chr1     3-102      * |      TRUE   7.11742           c
    [4]     chr1     4-103      * |      TRUE   4.14102           a
    [5]     chr1     5-104      * |      TRUE   4.25858           c
    ...      ...       ...    ... .       ...       ...         ...
  [496]     chr1   496-595      * |      TRUE   1.28384           d
  [497]     chr1   497-596      * |      TRUE   4.36369           a
  [498]     chr1   498-597      * |      TRUE   4.32968           b
  [499]     chr1   499-598      * |      TRUE   4.72823           b
  [500]     chr1   500-599      * |      TRUE   5.10432           b
  -------
  seqinfo: 1 sequence from an unspecified genome; no seqlengths
> pool(x)
GRanges object with 10000 ranges and 3 metadata columns:
          seqnames      ranges strand |  feature1  feature2    feature3
             <Rle>   <IRanges>  <Rle> | <logical> <numeric> <character>
      [1]     chr1     501-600      * |     FALSE   3.28347           e
      [2]     chr1     502-601      * |     FALSE   7.12640           a
      [3]     chr1     503-602      * |     FALSE   1.92222           b
      [4]     chr1     504-603      * |     FALSE  10.24116           a
      [5]     chr1     505-604      * |     FALSE  10.17287           c
      ...      ...         ...    ... .       ...       ...         ...
   [9996]     chr1 10496-10595      * |     FALSE   1.23578           b
   [9997]     chr1 10497-10596      * |     FALSE   1.69671           a
   [9998]     chr1 10498-10597      * |     FALSE   6.11140           a
   [9999]     chr1 10499-10598      * |     FALSE   2.21657           d
  [10000]     chr1 10500-10599      * |     FALSE   5.33003           b
  -------
  seqinfo: 1 sequence from an unspecified genome; no seqlengths
> matched(x)
GRanges object with 500 ranges and 3 metadata columns:
        seqnames      ranges strand |  feature1  feature2    feature3
           <Rle>   <IRanges>  <Rle> | <logical> <numeric> <character>
    [1]     chr1   6600-6699      * |     FALSE  2.108420           c
    [2]     chr1   5698-5797      * |     FALSE  5.991699           b
    [3]     chr1 10386-10485      * |     FALSE  5.696525           b
    [4]     chr1   4119-4218      * |     FALSE  0.409923           a
    [5]     chr1   9577-9676      * |     FALSE  9.330107           b
    ...      ...         ...    ... .       ...       ...         ...
  [496]     chr1   1275-1374      * |     FALSE   3.27301           b
  [497]     chr1   4976-5075      * |     FALSE   8.05522           c
  [498]     chr1   3917-4016      * |     FALSE   2.01576           a
  [499]     chr1 10205-10304      * |     FALSE   6.60221           b
  [500]     chr1   1841-1940      * |     FALSE   7.79926           c
  -------
  seqinfo: 1 sequence from an unspecified genome; no seqlengths
> unmatched(x)
GRanges object with 9500 ranges and 3 metadata columns:
         seqnames      ranges strand |  feature1  feature2    feature3
            <Rle>   <IRanges>  <Rle> | <logical> <numeric> <character>
     [1]     chr1     501-600      * |     FALSE   3.28347           e
     [2]     chr1     502-601      * |     FALSE   7.12640           a
     [3]     chr1     503-602      * |     FALSE   1.92222           b
     [4]     chr1     504-603      * |     FALSE  10.24116           a
     [5]     chr1     505-604      * |     FALSE  10.17287           c
     ...      ...         ...    ... .       ...       ...         ...
  [9496]     chr1 10496-10595      * |     FALSE   1.23578           b
  [9497]     chr1 10497-10596      * |     FALSE   1.69671           a
  [9498]     chr1 10498-10597      * |     FALSE   6.11140           a
  [9499]     chr1 10499-10598      * |     FALSE   2.21657           d
  [9500]     chr1 10500-10599      * |     FALSE   5.33003           b
  -------
  seqinfo: 1 sequence from an unspecified genome; no seqlengths
> 
> 
> 
> 
> cleanEx()
> nameEx("bootRanges")
> ### * bootRanges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bootRanges
> ### Title: Block bootstrap for genomic ranges
> ### Aliases: bootRanges
> 
> ### ** Examples
> 
> 
> set.seed(1)
> library(GenomicRanges)
Loading required package: stats4
Loading required package: BiocGenerics

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append,
    as.data.frame, basename, cbind, colnames, dirname, do.call,
    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,
    lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin,
    pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table,
    tapply, union, unique, unsplit, which.max, which.min

Loading required package: S4Vectors
Warning: package ‘S4Vectors’ was built under R version 4.3.2

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:utils’:

    findMatches

The following objects are masked from ‘package:base’:

    I, expand.grid, unname

Loading required package: IRanges
Loading required package: GenomeInfoDb
Warning: package ‘GenomeInfoDb’ was built under R version 4.3.2
> gr <- GRanges("chr1", IRanges(0:4 * 10 + 1, width=5),
+               seqlengths=c(chr1=50))
> br <- bootRanges(gr, blockLength=10)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:GenomicRanges’, ‘package:GenomeInfoDb’,
  ‘package:IRanges’, ‘package:S4Vectors’, ‘package:BiocGenerics’,
  ‘package:stats4’

> nameEx("combnCov")
> ### * combnCov
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: combnCov
> ### Title: Function for creating combinations of covariates
> ### Aliases: combnCov combnCov,character-method
> 
> ### ** Examples
> 
> combnCov(x = c('a', 'b', 'c'))
[1] "~a+b+c" "~b+c"   "~a+c"   "~c"     "~a+b"   "~b"     "~a"    
> 
> 
> 
> 
> cleanEx()
> nameEx("covariates")
> ### * covariates
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: covariates
> ### Title: Get covariates from a Matched object
> ### Aliases: covariates covariates,Matched-method
> 
> ### ** Examples
> 
> set.seed(123)
> mdf <- makeExampleMatchedDataSet(matched = TRUE)
> covariates(mdf)
[1] "feature2" "feature3"
> 
> 
> 
> 
> cleanEx()
> nameEx("focal")
> ### * focal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: focal
> ### Title: Get focal set from a Matched object
> ### Aliases: focal focal,MDF_OR_MGR_OR_MGI-method
> 
> ### ** Examples
> 
> set.seed(123)
> x <- makeExampleMatchedDataSet(matched = TRUE)
> focal(x)
DataFrame with 500 rows and 3 columns
     feature1  feature2    feature3
    <logical> <numeric> <character>
1        TRUE   2.87905           c
2        TRUE   3.53965           c
3        TRUE   7.11742           c
4        TRUE   4.14102           a
5        TRUE   4.25858           c
...       ...       ...         ...
496      TRUE   1.28384           d
497      TRUE   4.36369           a
498      TRUE   4.32968           b
499      TRUE   4.72823           b
500      TRUE   5.10432           b
> 
> 
> 
> 
> cleanEx()
> nameEx("indices")
> ### * indices
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: indices
> ### Title: Get indices of matched set
> ### Aliases: indices indices,Matched-method
> 
> ### ** Examples
> 
> set.seed(123)
> mdf <- makeExampleMatchedDataSet(matched = TRUE)
> head(indices(mdf))
[1] 6100 5198 9886 3619 9077 6763
> 
> head(indices(mdf, set = 'focal'))
[1] 1 2 3 4 5 6
> head(indices(mdf, set = 'pool'))
[1] 1 2 3 4 5 6
> head(indices(mdf, set = 'matched'))
[1] 6100 5198 9886 3619 9077 6763
> head(indices(mdf, set = 'unmatched'))
[1] 1 2 3 4 5 6
> 
> 
> 
> 
> cleanEx()
> nameEx("makeExampleMatchedDataSet")
> ### * makeExampleMatchedDataSet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: makeExampleMatchedDataSet
> ### Title: Function for generating an example matchRanges or Matched
> ###   dataset
> ### Aliases: makeExampleMatchedDataSet
> ###   makeExampleMatchedDataSet,character_OR_missing,logical_OR_missing,character_OR_missing,logical_OR_missing-method
> 
> ### ** Examples
> 
> ## Make examples for matchRanges() (i.e matched = FALSE)
> set.seed(123)
> makeExampleMatchedDataSet()
DataFrame with 10500 rows and 3 columns
       feature1  feature2    feature3
      <logical> <numeric> <character>
1          TRUE   2.87905           c
2          TRUE   3.53965           c
3          TRUE   7.11742           c
4          TRUE   4.14102           a
5          TRUE   4.25858           c
...         ...       ...         ...
10496     FALSE   1.23578           b
10497     FALSE   1.69671           a
10498     FALSE   6.11140           a
10499     FALSE   2.21657           d
10500     FALSE   5.33003           b
> head(makeExampleMatchedDataSet(type = 'data.frame', matched = FALSE))
  feature1 feature2 feature3
1     TRUE 3.636514        c
2     TRUE 1.330261        c
3     TRUE 4.236877        c
4     TRUE 4.042873        b
5     TRUE 3.081029        b
6     TRUE 6.058335        c
> makeExampleMatchedDataSet(type = 'data.table', matched = FALSE)
       feature1  feature2 feature3
    1:     TRUE 0.2032325        c
    2:     TRUE 7.4856837        d
    3:     TRUE 1.8105119        b
    4:     TRUE 4.3514990        c
    5:     TRUE 8.1239122        b
   ---                            
10496:    FALSE 2.2574409        a
10497:    FALSE 7.0427986        b
10498:    FALSE 9.5341569        d
10499:    FALSE 5.0367807        a
10500:    FALSE 1.7628214        b
> makeExampleMatchedDataSet(type = 'DataFrame', matched = FALSE)
DataFrame with 10500 rows and 3 columns
       feature1  feature2    feature3
      <logical> <numeric> <character>
1          TRUE   2.17220           c
2          TRUE   4.15337           e
3          TRUE   4.12367           c
4          TRUE   3.43931           a
5          TRUE   7.77699           a
...         ...       ...         ...
10496     FALSE  1.046444           a
10497     FALSE  8.549075           a
10498     FALSE  0.454913           b
10499     FALSE  0.358426           e
10500     FALSE  4.262284           d
> makeExampleMatchedDataSet(type = 'GRanges', matched = FALSE)
GRanges object with 10500 ranges and 3 metadata columns:
          seqnames      ranges strand |  feature1  feature2    feature3
             <Rle>   <IRanges>  <Rle> | <logical> <numeric> <character>
      [1]     chr1       1-100      * |      TRUE   1.78381           c
      [2]     chr1       2-101      * |      TRUE   6.14991           c
      [3]     chr1       3-102      * |      TRUE   4.44694           d
      [4]     chr1       4-103      * |      TRUE   2.97590           c
      [5]     chr1       5-104      * |      TRUE   7.72256           b
      ...      ...         ...    ... .       ...       ...         ...
  [10496]     chr1 10496-10595      * |     FALSE   6.25657           a
  [10497]     chr1 10497-10596      * |     FALSE   8.40767           b
  [10498]     chr1 10498-10597      * |     FALSE   5.10310           b
  [10499]     chr1 10499-10598      * |     FALSE   2.21031           b
  [10500]     chr1 10500-10599      * |     FALSE   9.02046           c
  -------
  seqinfo: 1 sequence from an unspecified genome; no seqlengths
> makeExampleMatchedDataSet(type = 'GInteractions', matched = FALSE)
GInteractions object with 10500 interactions and 3 metadata columns:
          seqnames1     ranges1     seqnames2     ranges2 |  feature1  feature2
              <Rle>   <IRanges>         <Rle>   <IRanges> | <logical> <numeric>
      [1]      chr1       1-100 ---      chr1       1-100 |      TRUE   3.68136
      [2]      chr1       2-101 ---      chr1       2-101 |      TRUE   6.20206
      [3]      chr1       3-102 ---      chr1       3-102 |      TRUE   3.18163
      [4]      chr1       4-103 ---      chr1       4-103 |      TRUE   3.12921
      [5]      chr1       5-104 ---      chr1       5-104 |      TRUE   5.95224
      ...       ...         ... ...       ...         ... .       ...       ...
  [10496]      chr1 10496-10595 ---      chr1 10496-10595 |     FALSE   5.58682
  [10497]      chr1 10497-10596 ---      chr1 10497-10596 |     FALSE   6.65464
  [10498]      chr1 10498-10597 ---      chr1 10498-10597 |     FALSE   4.18161
  [10499]      chr1 10499-10598 ---      chr1 10499-10598 |     FALSE   4.87692
  [10500]      chr1 10500-10599 ---      chr1 10500-10599 |     FALSE   7.84910
             feature3
          <character>
      [1]           b
      [2]           a
      [3]           c
      [4]           c
      [5]           c
      ...         ...
  [10496]           a
  [10497]           b
  [10498]           d
  [10499]           d
  [10500]           a
  -------
  regions: 10500 ranges and 0 metadata columns
  seqinfo: 1 sequence from an unspecified genome; no seqlengths
> 
> ## Make Matched class examples (i.e. matched = TRUE)
> set.seed(123)
> makeExampleMatchedDataSet(matched = TRUE)
MatchedDataFrame with 500 rows and 3 columns
     feature1  feature2    feature3
    <logical> <numeric> <character>
1       FALSE  2.108420           c
2       FALSE  5.991699           b
3       FALSE  5.696525           b
4       FALSE  0.409923           a
5       FALSE  9.330107           b
...       ...       ...         ...
496     FALSE   3.27301           b
497     FALSE   8.05522           c
498     FALSE   2.01576           a
499     FALSE   6.60221           b
500     FALSE   7.79926           c
> makeExampleMatchedDataSet(type = 'DataFrame', matched = TRUE,
+                           method = 'rejection',
+                           replace = FALSE)
MatchedDataFrame with 500 rows and 3 columns
     feature1  feature2    feature3
    <logical> <numeric> <character>
1       FALSE   3.25187           c
2       FALSE   8.18426           b
3       FALSE   6.00364           c
4       FALSE   5.56505           b
5       FALSE   5.02590           b
...       ...       ...         ...
496     FALSE  1.887820           c
497     FALSE  0.259549           d
498     FALSE  2.567883           d
499     FALSE  4.346857           b
500     FALSE  0.056791           c
> makeExampleMatchedDataSet(type = 'GRanges', matched = TRUE,
+                           method = 'rejection',
+                           replace = FALSE)
MatchedGRanges object with 500 ranges and 3 metadata columns:
        seqnames    ranges strand |  feature1  feature2    feature3
           <Rle> <IRanges>  <Rle> | <logical> <numeric> <character>
    [1]     chr1 8001-8100      * |     FALSE  10.89607           d
    [2]     chr1 1710-1809      * |     FALSE   5.75671           c
    [3]     chr1 8659-8758      * |     FALSE   4.46443           c
    [4]     chr1 5458-5557      * |     FALSE   4.11386           a
    [5]     chr1 8661-8760      * |     FALSE   1.79914           b
    ...      ...       ...    ... .       ...       ...         ...
  [496]     chr1 6728-6827      * |     FALSE   6.20597           b
  [497]     chr1 1508-1607      * |     FALSE   7.09604           c
  [498]     chr1 7528-7627      * |     FALSE   2.43404           c
  [499]     chr1 3883-3982      * |     FALSE   5.03960           c
  [500]     chr1 1378-1477      * |     FALSE   3.08657           d
  -------
  seqinfo: 1 sequence from an unspecified genome; no seqlengths
> # throwing error (April 2023)
> #makeExampleMatchedDataSet(type = 'GInteractions', matched = TRUE,
> #                          method = 'rejection',
> #                          replace = FALSE)
> 
> 
> 
> 
> cleanEx()
> nameEx("matchRanges")
> ### * matchRanges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: matchRanges
> ### Title: Generate a covariate-matched control set of ranges
> ### Aliases: matchRanges
> ###   matchRanges,DF_OR_df_OR_dt,DF_OR_df_OR_dt,formula,character_OR_missing,logical_OR_missing-method
> ###   matchRanges,GRanges,GRanges,formula,character_OR_missing,logical_OR_missing-method
> ###   matchRanges,GInteractions,GInteractions,formula,character_OR_missing,logical_OR_missing-method
> 
> ### ** Examples
> 
> ## Match with DataFrame
> set.seed(123)
> x <- makeExampleMatchedDataSet(type = 'DataFrame')
> matchRanges(focal = x[x$feature1,],
+             pool = x[!x$feature1,],
+             covar = ~feature2 + feature3)
MatchedDataFrame with 500 rows and 3 columns
     feature1  feature2    feature3
    <logical> <numeric> <character>
1       FALSE   2.87088           c
2       FALSE   3.54290           c
3       FALSE   7.11436           c
4       FALSE  10.78965           b
5       FALSE   4.25960           c
...       ...       ...         ...
496     FALSE  0.173349           e
497     FALSE  4.362421           a
498     FALSE  3.182474           e
499     FALSE  4.688994           d
500     FALSE  5.068635           d
> 
> ## Match with GRanges
> set.seed(123)
> x <- makeExampleMatchedDataSet(type = "GRanges")
> matchRanges(focal = x[x$feature1,],
+             pool = x[!x$feature1,],
+             covar = ~feature2 + feature3)
MatchedGRanges object with 500 ranges and 3 metadata columns:
        seqnames    ranges strand |  feature1  feature2    feature3
           <Rle> <IRanges>  <Rle> | <logical> <numeric> <character>
    [1]     chr1 8696-8795      * |     FALSE   2.87088           c
    [2]     chr1 4386-4485      * |     FALSE   3.54290           c
    [3]     chr1 1094-1193      * |     FALSE   7.11436           c
    [4]     chr1 5705-5804      * |     FALSE  10.78965           b
    [5]     chr1 1643-1742      * |     FALSE   4.25960           c
    ...      ...       ...    ... .       ...       ...         ...
  [496]     chr1 7288-7387      * |     FALSE  0.173349           e
  [497]     chr1 5539-5638      * |     FALSE  4.362421           a
  [498]     chr1 8499-8598      * |     FALSE  3.182474           e
  [499]     chr1 6507-6606      * |     FALSE  4.688994           d
  [500]     chr1 1860-1959      * |     FALSE  5.068635           d
  -------
  seqinfo: 1 sequence from an unspecified genome; no seqlengths
> 
> ## Match with GInteractions
> set.seed(123)
> x <- makeExampleMatchedDataSet(type = "GInteractions")
> matchRanges(focal = x[x$feature1,],
+             pool = x[!x$feature1,],
+             covar = ~feature2 + feature3)
MatchedGInteractions object with 500 interactions and 3 metadata columns:
        seqnames1   ranges1     seqnames2   ranges2 |  feature1  feature2
            <Rle> <IRanges>         <Rle> <IRanges> | <logical> <numeric>
    [1]      chr1 8696-8795 ---      chr1 8696-8795 |     FALSE   2.87088
    [2]      chr1 4386-4485 ---      chr1 4386-4485 |     FALSE   3.54290
    [3]      chr1 1094-1193 ---      chr1 1094-1193 |     FALSE   7.11436
    [4]      chr1 5705-5804 ---      chr1 5705-5804 |     FALSE  10.78965
    [5]      chr1 1643-1742 ---      chr1 1643-1742 |     FALSE   4.25960
    ...       ...       ... ...       ...       ... .       ...       ...
  [496]      chr1 7288-7387 ---      chr1 7288-7387 |     FALSE  0.173349
  [497]      chr1 5539-5638 ---      chr1 5539-5638 |     FALSE  4.362421
  [498]      chr1 8499-8598 ---      chr1 8499-8598 |     FALSE  3.182474
  [499]      chr1 6507-6606 ---      chr1 6507-6606 |     FALSE  4.688994
  [500]      chr1 1860-1959 ---      chr1 1860-1959 |     FALSE  5.068635
           feature3
        <character>
    [1]           c
    [2]           c
    [3]           c
    [4]           b
    [5]           c
    ...         ...
  [496]           e
  [497]           a
  [498]           e
  [499]           d
  [500]           d
  -------
  regions: 10500 ranges and 0 metadata columns
  seqinfo: 1 sequence from an unspecified genome; no seqlengths
> 
> ## Nearest neighbor matching with replacement
> set.seed(123)
> x <- makeExampleMatchedDataSet(type = 'DataFrame')
> matchRanges(focal = x[x$feature1,],
+             pool = x[!x$feature1,],
+             covar = ~feature2 + feature3,
+             method = 'nearest',
+             replace = TRUE)
MatchedDataFrame with 500 rows and 3 columns
     feature1  feature2    feature3
    <logical> <numeric> <character>
1       FALSE   2.87088           c
2       FALSE   3.54290           c
3       FALSE   7.11436           c
4       FALSE  10.78965           b
5       FALSE   4.25960           c
...       ...       ...         ...
496     FALSE  0.173349           e
497     FALSE  4.362421           a
498     FALSE  3.182474           e
499     FALSE  4.688994           d
500     FALSE  5.068635           d
> 
> ## Rejection sampling without replacement
> set.seed(123)
> x <- makeExampleMatchedDataSet(type = 'DataFrame')
> matchRanges(focal = x[x$feature1,],
+             pool = x[!x$feature1,],
+             covar = ~feature2 + feature3,
+             method = 'rejection',
+             replace = FALSE)
MatchedDataFrame with 500 rows and 3 columns
     feature1  feature2    feature3
    <logical> <numeric> <character>
1       FALSE  2.108420           c
2       FALSE  5.991699           b
3       FALSE  5.696525           b
4       FALSE  0.409923           a
5       FALSE  9.330107           b
...       ...       ...         ...
496     FALSE   3.27301           b
497     FALSE   8.05522           c
498     FALSE   2.01576           a
499     FALSE   6.60221           b
500     FALSE   7.79926           c
> 
> ## Stratified sampling without replacement
> set.seed(123)
> x <- makeExampleMatchedDataSet(type = 'DataFrame')
> matchRanges(focal = x[x$feature1,],
+             pool = x[!x$feature1,],
+             covar = ~feature2 + feature3,
+             method = 'stratified',
+             replace = FALSE)
MatchedDataFrame with 500 rows and 3 columns
     feature1  feature2    feature3
    <logical> <numeric> <character>
1       FALSE   2.87088           c
2       FALSE   3.54290           c
3       FALSE   7.11436           c
4       FALSE  10.78965           b
5       FALSE   4.25960           c
...       ...       ...         ...
496     FALSE   1.32077           b
497     FALSE  10.96586           d
498     FALSE   4.32895           b
499     FALSE   4.68899           d
500     FALSE   5.06864           d
> 
> 
> 
> 
> cleanEx()
> nameEx("matched")
> ### * matched
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: matched
> ### Title: Get matched set from a Matched object
> ### Aliases: matched matched,MDF_OR_MGR_OR_MGI-method
> 
> ### ** Examples
> 
> set.seed(123)
> x <- makeExampleMatchedDataSet(matched = TRUE)
> matched(x)
DataFrame with 500 rows and 3 columns
     feature1  feature2    feature3
    <logical> <numeric> <character>
1       FALSE  2.108420           c
2       FALSE  5.991699           b
3       FALSE  5.696525           b
4       FALSE  0.409923           a
5       FALSE  9.330107           b
...       ...       ...         ...
496     FALSE   3.27301           b
497     FALSE   8.05522           c
498     FALSE   2.01576           a
499     FALSE   6.60221           b
500     FALSE   7.79926           c
> 
> 
> 
> 
> cleanEx()
> nameEx("matchedClass")
> ### * matchedClass
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Matched-class
> ### Title: Matched objects
> ### Aliases: Matched-class Matched
> 
> ### ** Examples
> 
> ## Make Matched example
> set.seed(123)
> x <- makeExampleMatchedDataSet(matched = TRUE)
> ## Accessor functions for Matched class
> matchedData(x)
       id feature2 feature3         ps       set
    1:  1 2.879049        c 0.21095908     focal
    2:  1 3.539645        c 0.19210984     focal
    3:  1 7.117417        c 0.11193396     focal
    4:  1 4.141017        a 0.01771986     focal
    5:  1 4.258575        c 0.17308581     focal
   ---                                          
20496:  0 1.235781        b 0.08945367 unmatched
20497:  0 1.696712        a 0.02707977 unmatched
20498:  0 6.111404        a 0.01255772 unmatched
20499:  0 2.216575        d 0.07578989 unmatched
20500:  0 5.330029        b 0.04535856 unmatched
> covariates(x)
[1] "feature2" "feature3"
> method(x)
[1] "rejection"
> withReplacement(x)
[1] FALSE
> head(indices(x, set = 'matched'))
[1] 6100 5198 9886 3619 9077 6763
> 
> 
> 
> 
> cleanEx()
> nameEx("matchedData")
> ### * matchedData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: matchedData
> ### Title: Get matched data from a Matched object
> ### Aliases: matchedData matchedData,Matched-method
> 
> ### ** Examples
> 
> set.seed(123)
> mdf <- makeExampleMatchedDataSet(matched = TRUE)
> matchedData(mdf)
       id feature2 feature3         ps       set
    1:  1 2.879049        c 0.21095908     focal
    2:  1 3.539645        c 0.19210984     focal
    3:  1 7.117417        c 0.11193396     focal
    4:  1 4.141017        a 0.01771986     focal
    5:  1 4.258575        c 0.17308581     focal
   ---                                          
20496:  0 1.235781        b 0.08945367 unmatched
20497:  0 1.696712        a 0.02707977 unmatched
20498:  0 6.111404        a 0.01255772 unmatched
20499:  0 2.216575        d 0.07578989 unmatched
20500:  0 5.330029        b 0.04535856 unmatched
> 
> 
> 
> 
> cleanEx()
> nameEx("method")
> ### * method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: method
> ### Title: Get matching method used for Matched object
> ### Aliases: method method,Matched-method
> 
> ### ** Examples
> 
> set.seed(123)
> mdf <- makeExampleMatchedDataSet(matched = TRUE)
> method(mdf)
[1] "rejection"
> 
> 
> 
> 
> cleanEx()
> nameEx("oneRegionSegment")
> ### * oneRegionSegment
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: oneRegionSegment
> ### Title: Segmentation based on one region
> ### Aliases: oneRegionSegment
> 
> ### ** Examples
> 
> 
> library(GenomicRanges)
Loading required package: stats4
Loading required package: BiocGenerics

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append,
    as.data.frame, basename, cbind, colnames, dirname, do.call,
    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,
    lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin,
    pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table,
    tapply, union, unique, unsplit, which.max, which.min

Loading required package: S4Vectors
Warning: package ‘S4Vectors’ was built under R version 4.3.2

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:utils’:

    findMatches

The following objects are masked from ‘package:base’:

    I, expand.grid, unname

Loading required package: IRanges
Loading required package: GenomeInfoDb
Warning: package ‘GenomeInfoDb’ was built under R version 4.3.2
> library(GenomeInfoDb)
> x <- GRanges("chr1", IRanges(10e6+1,width=1e6))
> genome(x) <- "hg19"
> seg <- oneRegionSegment(x)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:GenomicRanges’, ‘package:GenomeInfoDb’,
  ‘package:IRanges’, ‘package:S4Vectors’, ‘package:BiocGenerics’,
  ‘package:stats4’

> nameEx("overview")
> ### * overview
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: overview
> ### Title: Overview of matching quality
> ### Aliases: overview overview,Matched,numeric_OR_missing-method
> 
> ### ** Examples
> 
> set.seed(123)
> mdf <- makeExampleMatchedDataSet(matched = TRUE)
> overview(mdf)
MatchedDataFrame object: 
       set     N feature2.mean feature2.sd feature3.a feature3.b feature3.c
     focal   500           4.1         1.9         66        157        206
   matched   500           4.6         2.8         59        148        225
      pool 10000           6.0         3.4       4248       3121       1117
 unmatched  9500           6.1         3.4       4189       2973        892
 feature3.d feature3.e ps.mean ps.sd
         49         22   0.100 0.076
         40         28   0.100 0.076
        992        522   0.045 0.051
        952        494   0.042 0.047
--------
focal - matched: 
 feature2.mean feature2.sd feature3.a feature3.b feature3.c feature3.d
         -0.48       -0.89          7          9        -19          9
 feature3.e ps.mean   ps.sd
         -6  0.0011 0.00049
> 
> 
> 
> 
> cleanEx()
> nameEx("plotCovariate")
> ### * plotCovariate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotCovariate
> ### Title: Covariate plotting for Matched objects
> ### Aliases: plotCovariate
> ###   plotCovariate,Matched,character_OR_missing,character_OR_missing,character_OR_missing,character_OR_missing-method
> 
> ### ** Examples
> 
> ## Matched example dataset
> set.seed(123)
> mdf <- makeExampleMatchedDataSet(matched = TRUE)
> 
> ## Visualize covariates
> plotCovariate(mdf)
> plotCovariate(mdf, covar = 'feature3')
> plotCovariate(mdf,
+               covar = 'feature2',
+               sets = c('focal', 'matched', 'pool'))
> plotCovariate(mdf,
+               covar = 'feature2',
+               sets = c('focal', 'matched', 'pool'),
+               type = 'ridges')
Picking joint bandwidth of 0.553
> plotCovariate(mdf,
+               covar = 'feature2',
+               sets = c('focal', 'matched', 'pool'),
+               type = 'jitter')
> 
> 
> 
> 
> cleanEx()
> nameEx("plotPropensity")
> ### * plotPropensity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotPropensity
> ### Title: Propensity score plotting for Matched objects
> ### Aliases: plotPropensity
> ###   plotPropensity,Matched,character_OR_missing,character_OR_missing,character_OR_missing-method
> 
> ### ** Examples
> 
> ## Matched example dataset
> set.seed(123)
> mdf <- makeExampleMatchedDataSet(matched = TRUE)
> 
> ## Visualize propensity scores
> plotPropensity(mdf)
> plotPropensity(mdf,
+               sets = c('focal', 'matched', 'pool'))
> plotPropensity(mdf,
+               sets = c('focal', 'matched', 'pool'),
+               type = 'ridges')
Picking joint bandwidth of 0.0146
> plotPropensity(mdf,
+               sets = c('focal', 'matched', 'pool'),
+               type = 'jitter')
> 
> 
> 
> 
> cleanEx()
> nameEx("plotSegment")
> ### * plotSegment
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotSegment
> ### Title: Plot genome segmentation
> ### Aliases: plotSegment
> 
> ### ** Examples
> 
> 
> example("segmentDensity")

sgmntD> n <- 10000

sgmntD> library(GenomicRanges)
Loading required package: stats4
Loading required package: BiocGenerics

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append,
    as.data.frame, basename, cbind, colnames, dirname, do.call,
    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,
    lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin,
    pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table,
    tapply, union, unique, unsplit, which.max, which.min

Loading required package: S4Vectors
Warning: package ‘S4Vectors’ was built under R version 4.3.2

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:utils’:

    findMatches

The following objects are masked from ‘package:base’:

    I, expand.grid, unname

Loading required package: IRanges
Loading required package: GenomeInfoDb
Warning: package ‘GenomeInfoDb’ was built under R version 4.3.2

sgmntD> gr <- GRanges("chr1", IRanges(round(
sgmntD+   c(runif(n/4,1,991), runif(n/4,1001,3991),
sgmntD+     runif(n/4,4001,4991), runif(n/4,7001,9991))),
sgmntD+   width=10), seqlengths=c(chr1=10000))

sgmntD> gr <- sort(gr)

sgmntD> exclude <- GRanges("chr1", IRanges(5001,6000), seqlengths=c(chr1=10000))

sgmntD> seg <- segmentDensity(gr, n=3, L_s=100, exclude=exclude, type="cbs")
Analyzing: Sample.1 
> plotSegment(seg, exclude, type = "ranges")
> plotSegment(seg, exclude, type = "barplot")
> plotSegment(seg, exclude, type = "boxplot")
> 
> 
> 
> cleanEx()

detaching ‘package:GenomicRanges’, ‘package:GenomeInfoDb’,
  ‘package:IRanges’, ‘package:S4Vectors’, ‘package:BiocGenerics’,
  ‘package:stats4’

> nameEx("pool")
> ### * pool
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pool
> ### Title: Get pool set from a Matched object
> ### Aliases: pool pool,MDF_OR_MGR_OR_MGI-method
> 
> ### ** Examples
> 
> set.seed(123)
> x <- makeExampleMatchedDataSet(matched = TRUE)
> pool(x)
DataFrame with 10000 rows and 3 columns
       feature1  feature2    feature3
      <logical> <numeric> <character>
1         FALSE   3.28347           e
2         FALSE   7.12640           a
3         FALSE   1.92222           b
4         FALSE  10.24116           a
5         FALSE  10.17287           c
...         ...       ...         ...
9996      FALSE   1.23578           b
9997      FALSE   1.69671           a
9998      FALSE   6.11140           a
9999      FALSE   2.21657           d
10000     FALSE   5.33003           b
> 
> 
> 
> 
> cleanEx()
> nameEx("reduceSegment")
> ### * reduceSegment
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reduceSegment
> ### Title: Combine nearby regions with same state
> ### Aliases: reduceSegment
> 
> ### ** Examples
> 
> 
> n <- 10000
> library(GenomicRanges)
Loading required package: stats4
Loading required package: BiocGenerics

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append,
    as.data.frame, basename, cbind, colnames, dirname, do.call,
    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,
    lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin,
    pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table,
    tapply, union, unique, unsplit, which.max, which.min

Loading required package: S4Vectors
Warning: package ‘S4Vectors’ was built under R version 4.3.2

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:utils’:

    findMatches

The following objects are masked from ‘package:base’:

    I, expand.grid, unname

Loading required package: IRanges
Loading required package: GenomeInfoDb
Warning: package ‘GenomeInfoDb’ was built under R version 4.3.2
> gr <- GRanges("chr1", IRanges(round(
+   c(runif(n/4,1,991), runif(n/4,1001,3991),
+     runif(n/4,4001,4991), runif(n/4,7001,9991))),
+   width=10), seqlengths=c(chr1=10000))
> gr$name <- rep(1:4,each=10)
> gr <- sort(gr)
> seg <- reduceSegment(gr, col="name")
> 
> 
> 
> 
> cleanEx()

detaching ‘package:GenomicRanges’, ‘package:GenomeInfoDb’,
  ‘package:IRanges’, ‘package:S4Vectors’, ‘package:BiocGenerics’,
  ‘package:stats4’

> nameEx("segmentDensity")
> ### * segmentDensity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: segmentDensity
> ### Title: Genome segmentation based on feature density
> ### Aliases: segmentDensity
> 
> ### ** Examples
> 
> 
> n <- 10000
> library(GenomicRanges)
Loading required package: stats4
Loading required package: BiocGenerics

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append,
    as.data.frame, basename, cbind, colnames, dirname, do.call,
    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,
    lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin,
    pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table,
    tapply, union, unique, unsplit, which.max, which.min

Loading required package: S4Vectors
Warning: package ‘S4Vectors’ was built under R version 4.3.2

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:utils’:

    findMatches

The following objects are masked from ‘package:base’:

    I, expand.grid, unname

Loading required package: IRanges
Loading required package: GenomeInfoDb
Warning: package ‘GenomeInfoDb’ was built under R version 4.3.2
> gr <- GRanges("chr1", IRanges(round(
+   c(runif(n/4,1,991), runif(n/4,1001,3991),
+     runif(n/4,4001,4991), runif(n/4,7001,9991))),
+   width=10), seqlengths=c(chr1=10000))
> gr <- sort(gr)
> exclude <- GRanges("chr1", IRanges(5001,6000), seqlengths=c(chr1=10000))
> seg <- segmentDensity(gr, n=3, L_s=100, exclude=exclude, type="cbs")
Analyzing: Sample.1 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:GenomicRanges’, ‘package:GenomeInfoDb’,
  ‘package:IRanges’, ‘package:S4Vectors’, ‘package:BiocGenerics’,
  ‘package:stats4’

> nameEx("unmatched")
> ### * unmatched
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: unmatched
> ### Title: Get unmatched set from a Matched object
> ### Aliases: unmatched unmatched,MDF_OR_MGR_OR_MGI-method
> 
> ### ** Examples
> 
> set.seed(123)
> x <- makeExampleMatchedDataSet(matched = TRUE)
> unmatched(x)
DataFrame with 9500 rows and 3 columns
      feature1  feature2    feature3
     <logical> <numeric> <character>
1        FALSE   3.28347           e
2        FALSE   7.12640           a
3        FALSE   1.92222           b
4        FALSE  10.24116           a
5        FALSE  10.17287           c
...        ...       ...         ...
9496     FALSE   1.23578           b
9497     FALSE   1.69671           a
9498     FALSE   6.11140           a
9499     FALSE   2.21657           d
9500     FALSE   5.33003           b
> 
> 
> 
> 
> cleanEx()
> nameEx("withReplacement")
> ### * withReplacement
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: withReplacement
> ### Title: Get replace method
> ### Aliases: withReplacement withReplacement,Matched-method
> 
> ### ** Examples
> 
> set.seed(123)
> mdf <- makeExampleMatchedDataSet(matched = TRUE)
> withReplacement(mdf)
[1] FALSE
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  13.078 0.481 14.192 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
