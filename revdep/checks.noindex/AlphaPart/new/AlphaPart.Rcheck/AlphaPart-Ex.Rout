
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "AlphaPart"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('AlphaPart')

Attaching package: ‘AlphaPart’

The following object is masked from ‘package:grDevices’:

    savePlot

The following objects are masked from ‘package:utils’:

    object.size, write.csv

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("AlphaPart")
> ### * AlphaPart
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: AlphaPart
> ### Title: AlphaPart.R
> ### Aliases: AlphaPart
> 
> ### ** Examples
> 
> ## Small pedigree with additive genetic (=breeding) values
> ped <- data.frame(  id=c(  1,   2,   3,   4,   5,   6),
+                    fid=c(  0,   0,   2,   0,   4,   0),
+                    mid=c(  0,   0,   1,   0,   3,   3),
+                    loc=c("A", "B", "A", "B", "A", "A"),
+                    gen=c(  1,   1,   2,   2,   3,   3),
+                   trt1=c(100, 120, 115, 130, 125, 125),
+                   trt2=c(100, 110, 105, 100,  85, 110))
> 
> ## Partition additive genetic values
> tmp <- AlphaPart(x=ped, colBV=c("trt1", "trt2"))

Size:
 - individuals: 6 
 - traits: 2 (trt1, trt2)
 - paths: 2 (A, B)
 - unknown (missing) values:
trt1 trt2 
   0    0 
> print(tmp)


 Partitions of breeding values 
   - individuals: 6 
   - paths: 2 (A, B)
   - traits: 2 (trt1, trt2)

 Trait: trt1 

  id fid mid loc gen trt1  trt1_pa     trt1_w trt1_A trt1_B
1  1   0   0   A   1  100 116.6667 -16.666667    100      0
2  2   0   0   B   1  120 116.6667   3.333333      0    120
3  3   2   1   A   2  115 110.0000   5.000000     55     60
4  4   0   0   B   2  130 116.6667  13.333333      0    130
5  5   4   3   A   3  125 122.5000   2.500000     30     95
6  6   0   3   A   3  125  57.5000  67.500000     95     30

 Trait: trt2 

  id fid mid loc gen trt2  trt2_pa     trt2_w trt2_A trt2_B
1  1   0   0   A   1  100 103.3333  -3.333333  100.0    0.0
2  2   0   0   B   1  110 103.3333   6.666667    0.0  110.0
3  3   2   1   A   2  105 105.0000   0.000000   50.0   55.0
4  4   0   0   B   2  100 103.3333  -3.333333    0.0  100.0
5  5   4   3   A   3   85 102.5000 -17.500000    7.5   77.5
6  6   0   3   A   3  110  52.5000  57.500000   82.5   27.5

> 
> ## Summarize by generation (genetic mean)
> summary(tmp, by="gen")


 Summary of partitions of breeding values 
   - paths: 2 (A, B)
   - traits: 2 (trt1, trt2)

 Trait: trt1 

  gen N   Sum    A    B
1   1 2 110.0 50.0 60.0
2   2 2 122.5 27.5 95.0
3   3 2 125.0 62.5 62.5

 Trait: trt2 

  gen N   Sum  A    B
1   1 2 105.0 50 55.0
2   2 2 102.5 25 77.5
3   3 2  97.5 45 52.5

> 
> ## Summarize by generation (genetic variance)
> summary(tmp, by="gen", FUN = var)


 Summary of partitions of breeding values 
   - paths: 2 (A, B, Sum.Cov)
   - traits: 2 (trt1, trt2)

 Trait: trt1 

  gen N   Sum      A      B Sum.Cov
1   1 2 200.0 5000.0 7200.0  -12000
2   2 2 112.5 1512.5 2450.0   -3850
3   3 2   0.0 2112.5 2112.5   -4225

 Trait: trt2 

  gen N   Sum      A      B Sum.Cov
1   1 2  50.0 5000.0 6050.0  -11000
2   2 2  12.5 1250.0 1012.5   -2250
3   3 2 312.5 2812.5 1250.0   -3750

> 
> 
> 
> 
> 
> cleanEx()
> nameEx("AlphaPartSubset")
> ### * AlphaPartSubset
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: AlphaPartSubset
> ### Title: AlphaPartSubset.R
> ### Aliases: AlphaPartSubset
> 
> ### ** Examples
> 
> ## Small pedigree with additive genetic (=breeding) values
> ped <- data.frame(  id=c(  1,   2,   3,   4,   5,   6),
+                   fid=c(  0,   0,   2,   0,   4,   0),
+                   mid=c(  0,   0,   1,   0,   3,   3),
+                   loc=c("A", "B", "A", "B", "A", "A"),
+                   gen=c(  1,   1,   2,   2,   3,   3),
+                  trt1=c(100, 120, 115, 130, 125, 125),
+                  trt2=c(100, 110, 105, 100,  85, 110))
> 
> ## Partition additive genetic values
> (tmp <- AlphaPart(x=ped, colBV=c("trt1", "trt2")))

Size:
 - individuals: 6 
 - traits: 2 (trt1, trt2)
 - paths: 2 (A, B)
 - unknown (missing) values:
trt1 trt2 
   0    0 


 Partitions of breeding values 
   - individuals: 6 
   - paths: 2 (A, B)
   - traits: 2 (trt1, trt2)

 Trait: trt1 

  id fid mid loc gen trt1  trt1_pa     trt1_w trt1_A trt1_B
1  1   0   0   A   1  100 116.6667 -16.666667    100      0
2  2   0   0   B   1  120 116.6667   3.333333      0    120
3  3   2   1   A   2  115 110.0000   5.000000     55     60
4  4   0   0   B   2  130 116.6667  13.333333      0    130
5  5   4   3   A   3  125 122.5000   2.500000     30     95
6  6   0   3   A   3  125  57.5000  67.500000     95     30

 Trait: trt2 

  id fid mid loc gen trt2  trt2_pa     trt2_w trt2_A trt2_B
1  1   0   0   A   1  100 103.3333  -3.333333  100.0    0.0
2  2   0   0   B   1  110 103.3333   6.666667    0.0  110.0
3  3   2   1   A   2  105 105.0000   0.000000   50.0   55.0
4  4   0   0   B   2  100 103.3333  -3.333333    0.0  100.0
5  5   4   3   A   3   85 102.5000 -17.500000    7.5   77.5
6  6   0   3   A   3  110  52.5000  57.500000   82.5   27.5

> 
> ## Keep some partitions (working on object of class AlphaPart)
> (tmp2 <- AlphaPartSubset(x=tmp, paths="A"))


 Partitions of breeding values 
   - individuals: 6 
   - paths: 1 (A)
   - traits: 2 (trt1, trt2)
   - warning: Consistency of the overall sum of partitions might not be correct due to the previous use of 'AlphaPartPathSubset'

 Trait: trt1 

  id fid mid loc gen trt1  trt1_pa     trt1_w trt1_A
1  1   0   0   A   1  100 116.6667 -16.666667    100
2  2   0   0   B   1  120 116.6667   3.333333      0
3  3   2   1   A   2  115 110.0000   5.000000     55
4  4   0   0   B   2  130 116.6667  13.333333      0
5  5   4   3   A   3  125 122.5000   2.500000     30
6  6   0   3   A   3  125  57.5000  67.500000     95

 Trait: trt2 

  id fid mid loc gen trt2  trt2_pa     trt2_w trt2_A
1  1   0   0   A   1  100 103.3333  -3.333333  100.0
2  2   0   0   B   1  110 103.3333   6.666667    0.0
3  3   2   1   A   2  105 105.0000   0.000000   50.0
4  4   0   0   B   2  100 103.3333  -3.333333    0.0
5  5   4   3   A   3   85 102.5000 -17.500000    7.5
6  6   0   3   A   3  110  52.5000  57.500000   82.5

> 
> ## Summarize by generation
> (tmpS <- summary(tmp, by="gen"))


 Summary of partitions of breeding values 
   - paths: 2 (A, B)
   - traits: 2 (trt1, trt2)

 Trait: trt1 

  gen N   Sum    A    B
1   1 2 110.0 50.0 60.0
2   2 2 122.5 27.5 95.0
3   3 2 125.0 62.5 62.5

 Trait: trt2 

  gen N   Sum  A    B
1   1 2 105.0 50 55.0
2   2 2 102.5 25 77.5
3   3 2  97.5 45 52.5

> 
> ## Keep some partitions (working on object of class summaryAlphaPart)
> (tmpS2 <- AlphaPartSubset(x=tmpS, paths="A"))


 Summary of partitions of breeding values 
   - paths: 1 (A)
   - traits: 2 (trt1, trt2)
   - warning: Consistency of the overall sum of partitions might not be correct due to the previous use of 'AlphaPartPathSubset'

 Trait: trt1 

  gen N   Sum    A
1   1 2 110.0 50.0
2   2 2 122.5 27.5
3   3 2 125.0 62.5

 Trait: trt2 

  gen N   Sum  A
1   1 2 105.0 50
2   2 2 102.5 25
3   3 2  97.5 45

> 
> ## ... must be equal to
> (tmpS3 <- summary(tmp2, by="gen"))


 Summary of partitions of breeding values 
   - paths: 1 (A)
   - traits: 2 (trt1, trt2)
   - warning: Consistency of the overall sum of partitions might not be correct due to the previous use of 'AlphaPartPathSubset'

 Trait: trt1 

  gen N   Sum    A
1   1 2 110.0 50.0
2   2 2 122.5 27.5
3   3 2 125.0 62.5

 Trait: trt2 

  gen N   Sum  A
1   1 2 105.0 50
2   2 2 102.5 25
3   3 2  97.5 45

> 
> 
> 
> cleanEx()
> nameEx("AlphaPartSum")
> ### * AlphaPartSum
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: AlphaPartSum
> ### Title: AlphaPartSum.R
> ### Aliases: AlphaPartSum
> 
> ### ** Examples
> 
> ## Small pedigree with additive genetic (=breeding) values
> ped <- data.frame(  id=c(  1,   2,   3,   4,   5,   6),
+                   fid=c(  0,   0,   2,   0,   4,   0),
+                   mid=c(  0,   0,   1,   0,   3,   3),
+                   loc=c("A", "B", "A", "B", "A", "A"),
+                   gen=c(  1,   1,   2,   2,   3,   3),
+                  trt1=c(100, 120, 115, 130, 125, 125),
+                  trt2=c(100, 110, 105,  140,  85, 110))
> 
> ## Partition additive genetic values
> (tmp <- AlphaPart(x=ped, colBV=c("trt1", "trt2")))

Size:
 - individuals: 6 
 - traits: 2 (trt1, trt2)
 - paths: 2 (A, B)
 - unknown (missing) values:
trt1 trt2 
   0    0 


 Partitions of breeding values 
   - individuals: 6 
   - paths: 2 (A, B)
   - traits: 2 (trt1, trt2)

 Trait: trt1 

  id fid mid loc gen trt1  trt1_pa     trt1_w trt1_A trt1_B
1  1   0   0   A   1  100 116.6667 -16.666667    100      0
2  2   0   0   B   1  120 116.6667   3.333333      0    120
3  3   2   1   A   2  115 110.0000   5.000000     55     60
4  4   0   0   B   2  130 116.6667  13.333333      0    130
5  5   4   3   A   3  125 122.5000   2.500000     30     95
6  6   0   3   A   3  125  57.5000  67.500000     95     30

 Trait: trt2 

  id fid mid loc gen trt2  trt2_pa     trt2_w trt2_A trt2_B
1  1   0   0   A   1  100 116.6667 -16.666667  100.0    0.0
2  2   0   0   B   1  110 116.6667  -6.666667    0.0  110.0
3  3   2   1   A   2  105 105.0000   0.000000   50.0   55.0
4  4   0   0   B   2  140 116.6667  23.333333    0.0  140.0
5  5   4   3   A   3   85 122.5000 -37.500000  -12.5   97.5
6  6   0   3   A   3  110  52.5000  57.500000   82.5   27.5

> 
> ## Sum some partitions (working on object of class AlphaPart)
> (tmp2 <- AlphaPartSum(x=tmp, map=list(c("X", "A", "B"), c("A", "B"))))


 Partitions of breeding values 
   - individuals: 6 
   - paths: 2 (A, X)
   - traits: 2 (trt1, trt2)
   - warning: Consistency of the overall sum of partitions might not be correct due to the previous use of 'AlphaPartSum'

 Trait: trt1 

  id fid mid loc gen trt1  trt1_pa     trt1_w trt1_A trt1_X
1  1   0   0   A   1  100 116.6667 -16.666667      0    100
2  2   0   0   B   1  120 116.6667   3.333333    120    120
3  3   2   1   A   2  115 110.0000   5.000000     60    115
4  4   0   0   B   2  130 116.6667  13.333333    130    130
5  5   4   3   A   3  125 122.5000   2.500000     95    125
6  6   0   3   A   3  125  57.5000  67.500000     30    125

 Trait: trt2 

  id fid mid loc gen trt2  trt2_pa     trt2_w trt2_A trt2_X
1  1   0   0   A   1  100 116.6667 -16.666667    0.0    100
2  2   0   0   B   1  110 116.6667  -6.666667  110.0    110
3  3   2   1   A   2  105 105.0000   0.000000   55.0    105
4  4   0   0   B   2  140 116.6667  23.333333  140.0    140
5  5   4   3   A   3   85 122.5000 -37.500000   97.5     85
6  6   0   3   A   3  110  52.5000  57.500000   27.5    110

> 
> ## Summarize by generation
> (tmpS <- summary(tmp, by="gen"))


 Summary of partitions of breeding values 
   - paths: 2 (A, B)
   - traits: 2 (trt1, trt2)

 Trait: trt1 

  gen N   Sum    A    B
1   1 2 110.0 50.0 60.0
2   2 2 122.5 27.5 95.0
3   3 2 125.0 62.5 62.5

 Trait: trt2 

  gen N   Sum  A    B
1   1 2 105.0 50 55.0
2   2 2 122.5 25 97.5
3   3 2  97.5 35 62.5

> 
> ## Sum some partitions (working on object of class summaryAlphaPart)
> (tmpS2 <- AlphaPartSum(x=tmpS, map=list(c("X", "A", "B"), c("A", "B"))))


 Summary of partitions of breeding values 
   - paths: 2 (A, X)
   - traits: 2 (trt1, trt2)
   - warning: Consistency of the overall sum of partitions might not be correct due to the previous use of 'AlphaPartSum'

 Trait: trt1 

  gen N   Sum    A     X
1   1 2 110.0 60.0 110.0
2   2 2 122.5 95.0 122.5
3   3 2 125.0 62.5 125.0

 Trait: trt2 

  gen N   Sum    A     X
1   1 2 105.0 55.0 105.0
2   2 2 122.5 97.5 122.5
3   3 2  97.5 62.5  97.5

> 
> ## ... must be equal to
> (tmpS3 <- summary(tmp2, by="gen"))


 Summary of partitions of breeding values 
   - paths: 2 (A, X)
   - traits: 2 (trt1, trt2)
   - warning: Consistency of the overall sum of partitions might not be correct due to the previous use of 'AlphaPartSum'

 Trait: trt1 

  gen N   Sum    A     X
1   1 2 110.0 60.0 110.0
2   2 2 122.5 95.0 122.5
3   3 2 125.0 62.5 125.0

 Trait: trt2 

  gen N   Sum    A     X
1   1 2 105.0 55.0 105.0
2   2 2 122.5 97.5 122.5
3   3 2  97.5 62.5  97.5

> 
> 
> 
> cleanEx()
> nameEx("pedFixBirthYear")
> ### * pedFixBirthYear
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pedFixBirthYear
> ### Title: pedFixBirthYear.R
> ### Aliases: pedFixBirthYear
> 
> ### ** Examples
> 
> ## Example pedigree with missing (unknown) birth year for some individuals
> ped0 <- data.frame(     id=c( 1, 2, 3,  4, 5, 6, 7,  8, 9, 10, 11, 12, 13, 14),
+                         fid=c( 0, 0, 0,  1, 1, 1, 3,  3, 3,  5,  4,  0,  0, 12),
+                         mid=c( 0, 0, 0,  2, 0, 2, 2,  2, 5,  0,  0,  0,  0, 13),
+                         birth_dt=c(NA, 0, 1, NA, 3, 3, 3, 3, 4, 4, 5, NA, 6, 6) + 2000)
> 
> ## First run - using information from children
> ped1 <- pedFixBirthYear(x=ped0, interval=1)
Summary:
 - initially: 3 
 - fixed: 3 
 - left: 0 
> 
> ## Second run - using information from parents
> ped2 <- pedFixBirthYear(x=ped1, interval=1, down=TRUE)
Summary:
 - initially: 0 
 - fixed: 0 
 - left: 0 
> 
> ## Third run - using information from children, but with no success
> ped3 <- pedFixBirthYear(x=ped2, interval=1)
Summary:
 - initially: 0 
 - fixed: 0 
 - left: 0 
> 
> 
> 
> cleanEx()
> nameEx("pedSetBase")
> ### * pedSetBase
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pedSetBase
> ### Title: pedSetBase.R
> ### Aliases: pedSetBase
> 
> ### ** Examples
> 
> ## Example pedigree
> ped <- data.frame(      id=1:10,
+                        fid=c(0, 0, 0, 1, 1, 1, 3, 3, 3, 5),
+                        mid=c(0, 0, 0, 2, 0, 2, 2, 2, 5, 0),
+                   birth_dt=c(0, 0, 1, 2, 3, 3, 3, 4, 4, 5) + 2000)
> 
> ## Set base population as those individuals that were born after year 2002
> pedSetBase(x=ped, keep=ped$birth_dt > 2002, unknown=0)
All individuals: 10 
Removing: 4, 40 %
Kept: 6 
   id fid mid birth_dt
5   5   0   0     2003
6   6   0   0     2003
7   7   0   0     2003
8   8   0   0     2004
9   9   0   5     2004
10 10   5   0     2005
> 
> 
> 
> 
> cleanEx()
> nameEx("plot.summaryAlphaPart")
> ### * plot.summaryAlphaPart
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.summaryAlphaPart
> ### Title: A function to plot summary of partitioned breeding values.
> ### Aliases: plot.summaryAlphaPart
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("print.AlphaPart")
> ### * print.AlphaPart
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.AlphaPart
> ### Title: Print method for the output of AlphaPart function.
> ### Aliases: print.AlphaPart
> 
> ### ** Examples
> 
> ## Small pedigree with additive genetic (=breeding) values
> ped <- data.frame(  id=c(  1,   2,   3,   4,   5,   6),
+                    fid=c(  0,   0,   2,   0,   4,   0),
+                    mid=c(  0,   0,   1,   0,   3,   3),
+                    loc=c("A", "B", "A", "B", "A", "A"),
+                    gen=c(  1,   1,   2,   2,   3,   3),
+                   trt1=c(100, 120, 115, 130, 125, 125),
+                   trt2=c(100, 110, 105, 100,  85, 110))
> 
> ## Partition additive genetic values
> tmp <- AlphaPart(x=ped, colBV=c("trt1", "trt2"))

Size:
 - individuals: 6 
 - traits: 2 (trt1, trt2)
 - paths: 2 (A, B)
 - unknown (missing) values:
trt1 trt2 
   0    0 
> print(tmp)


 Partitions of breeding values 
   - individuals: 6 
   - paths: 2 (A, B)
   - traits: 2 (trt1, trt2)

 Trait: trt1 

  id fid mid loc gen trt1  trt1_pa     trt1_w trt1_A trt1_B
1  1   0   0   A   1  100 116.6667 -16.666667    100      0
2  2   0   0   B   1  120 116.6667   3.333333      0    120
3  3   2   1   A   2  115 110.0000   5.000000     55     60
4  4   0   0   B   2  130 116.6667  13.333333      0    130
5  5   4   3   A   3  125 122.5000   2.500000     30     95
6  6   0   3   A   3  125  57.5000  67.500000     95     30

 Trait: trt2 

  id fid mid loc gen trt2  trt2_pa     trt2_w trt2_A trt2_B
1  1   0   0   A   1  100 103.3333  -3.333333  100.0    0.0
2  2   0   0   B   1  110 103.3333   6.666667    0.0  110.0
3  3   2   1   A   2  105 105.0000   0.000000   50.0   55.0
4  4   0   0   B   2  100 103.3333  -3.333333    0.0  100.0
5  5   4   3   A   3   85 102.5000 -17.500000    7.5   77.5
6  6   0   3   A   3  110  52.5000  57.500000   82.5   27.5

> 
> ## Summarize by generation (genetic mean)
> summary(tmp, by="gen")


 Summary of partitions of breeding values 
   - paths: 2 (A, B)
   - traits: 2 (trt1, trt2)

 Trait: trt1 

  gen N   Sum    A    B
1   1 2 110.0 50.0 60.0
2   2 2 122.5 27.5 95.0
3   3 2 125.0 62.5 62.5

 Trait: trt2 

  gen N   Sum  A    B
1   1 2 105.0 50 55.0
2   2 2 102.5 25 77.5
3   3 2  97.5 45 52.5

> 
> ## Summarize by generation (genetic variance)
> summary(tmp, by="gen", FUN = var)


 Summary of partitions of breeding values 
   - paths: 2 (A, B, Sum.Cov)
   - traits: 2 (trt1, trt2)

 Trait: trt1 

  gen N   Sum      A      B Sum.Cov
1   1 2 200.0 5000.0 7200.0  -12000
2   2 2 112.5 1512.5 2450.0   -3850
3   3 2   0.0 2112.5 2112.5   -4225

 Trait: trt2 

  gen N   Sum      A      B Sum.Cov
1   1 2  50.0 5000.0 6050.0  -11000
2   2 2  12.5 1250.0 1012.5   -2250
3   3 2 312.5 2812.5 1250.0   -3750

> 
> 
> 
> 
> 
> cleanEx()
> nameEx("print.plotSummaryAlphaPart")
> ### * print.plotSummaryAlphaPart
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.plotSummaryAlphaPart
> ### Title: Print a plot generate by the function 'plotSummaryAlphaPart'
> ### Aliases: print.plotSummaryAlphaPart
> 
> ### ** Examples
> 
> ## Partition additive genetic values
> (res <- AlphaPart(x=AlphaPart.ped, colPath="country", colBV=c("bv1", "bv2")))

Size:
 - individuals: 8 
 - traits: 2 (bv1, bv2)
 - paths: 2 (domestic, import)
 - unknown (missing) values:
bv1 bv2 
  0   0 


 Partitions of breeding values 
   - individuals: 8 
   - paths: 2 (domestic, import)
   - traits: 2 (bv1, bv2)

 Trait: bv1 

  IId FId MId gen  country gender bv1   bv1_pa      bv1_w bv1_domestic
1   A           1 domestic      F 100 104.3333 -4.3333333      100.000
2   B           1   import      M 105 104.3333  0.6666667        0.000
3   C   B   A   2 domestic      F 104 102.5000  1.5000000       51.500
4   T   B       2   import      F 102  52.5000 49.5000000        0.000
5   D           2   import      M 108 104.3333  3.6666667        0.000
6   E   D   C   3 domestic      M 107 106.0000  1.0000000       26.750
7   U   D       3   import      F 107  54.0000 53.0000000        0.000
8   V   E       4 domestic      F 109  53.5000 55.5000000       68.875
  bv1_import
1      0.000
2    105.000
3     52.500
4    102.000
5    108.000
6     80.250
7    107.000
8     40.125

 Trait: bv2 

  IId FId MId gen  country gender bv2    bv2_pa      bv2_w bv2_domestic
1   A           1 domestic      F  88  99.66667 -11.666667           88
2   B           1   import      M 110  99.66667  10.333333            0
3   C   B   A   2 domestic      F 100  99.00000   1.000000           45
4   T   B       2   import      F  97  55.00000  42.000000            0
5   D           2   import      M 101  99.66667   1.333333            0
6   E   D   C   3 domestic      M  80 100.50000 -20.500000            2
7   U   D       3   import      F 102  50.50000  51.500000            0
8   V   E       4 domestic      F 105  40.00000  65.000000           66
  bv2_import
1          0
2        110
3         55
4         97
5        101
6         78
7        102
8         39

> 
> ## Summarize population by generation (=trend)
> (ret <- summary(res, by="gen"))


 Summary of partitions of breeding values 
   - paths: 2 (domestic, import)
   - traits: 2 (bv1, bv2)

 Trait: bv1 

  gen N      Sum domestic import
1   1 2 102.5000 50.00000 52.500
2   2 3 104.6667 17.16667 87.500
3   3 2 107.0000 13.37500 93.625
4   4 1 109.0000 68.87500 40.125

 Trait: bv2 

  gen N       Sum domestic   import
1   1 2  99.00000       44 55.00000
2   2 3  99.33333       15 84.33333
3   3 2  91.00000        1 90.00000
4   4 1 105.00000       66 39.00000

> 
> ## Plot the partitions
> p <- plot(ret, ylab=c("BV for trait 1", "BV for trait 2"), xlab="Generation")
> print(p[[1]])
> print(p[[2]])
> #print(p)
> 
> 
> 
> cleanEx()
> nameEx("print.summaryAlphaPart")
> ### * print.summaryAlphaPart
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.summaryAlphaPart
> ### Title: Print method for objects of the class summaryAlphaPart.
> ### Aliases: print.summaryAlphaPart
> 
> ### ** Examples
> 
> ## --- Partition additive genetic values by loc ---
> res <- AlphaPart(x=AlphaPart.ped, colPath="country", colBV=c("bv1", "bv2"))

Size:
 - individuals: 8 
 - traits: 2 (bv1, bv2)
 - paths: 2 (domestic, import)
 - unknown (missing) values:
bv1 bv2 
  0   0 
> 
> ## Summarize whole population
> ret <- summary(res)
> 
> ## Summarize population by generation (=trend)
> ret <- summary(res, by="gen")
> 
> ## Summarize population by generation (=trend) but only for domestic location
> ret <- summary(res, by="gen", subset=res[[1]]$country == "domestic")
> 
> ## --- Partition additive genetic values by loc and gender ---
> 
> AlphaPart.ped$country.gender <- with(AlphaPart.ped, paste(country, gender, sep="-"))
> res <- AlphaPart(x=AlphaPart.ped, colPath="country.gender", colBV=c("bv1", "bv2"))

Size:
 - individuals: 8 
 - traits: 2 (bv1, bv2)
 - paths: 4 (domestic-F, domestic-M, import-F, import-M)
 - unknown (missing) values:
bv1 bv2 
  0   0 
> 
> ## Summarize population by generation (=trend)
> ret <- summary(res, by="gen")
> 
> ## Summarize population by generation (=trend) but only for domestic location
> ret <- summary(res, by="gen", subset=res[[1]]$country == "domestic")
> 
> 
> 
> cleanEx()
> nameEx("savePlot.plotSummaryAlphaPart")
> ### * savePlot.plotSummaryAlphaPart
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: savePlot.plotSummaryAlphaPart
> ### Title: Save plot objects on the disk for permanent storage. Function
> ###   'savePlot' from the 'grDevices' package works for current page on
> ###   graphical device. This is an attempt to make this function generic so
> ###   that one can define 'savePlot' methods for particular needs.
> ### Aliases: savePlot.plotSummaryAlphaPart savePlot.default
> 
> ### ** Examples
> 
> ## Partition additive genetic values
> res <- AlphaPart(x=AlphaPart.ped, colPath="country", colBV=c("bv1", "bv2"))

Size:
 - individuals: 8 
 - traits: 2 (bv1, bv2)
 - paths: 2 (domestic, import)
 - unknown (missing) values:
bv1 bv2 
  0   0 
> 
> ## Summarize population by generation (=trend)
> ret <- summary(res, by="gen")
> 
> ## Plot the partitions
> p <- plot(ret, ylab=c("BV for trait 1", "BV for trait 2"), xlab="Generation")
> 
> ## Save the plots
> tmp <- savePlot(x = p, filename="test", type="png")
test_bv1.png 
$file
[1] "test_bv1.png"

test_bv2.png 
$file
[1] "test_bv2.png"

> 
> ## Remove the files
> unlink(tmp)
> 
> 
> 
> 
> cleanEx()
> nameEx("summary.AlphaPart")
> ### * summary.AlphaPart
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.AlphaPart
> ### Title: A function to summarize AlphaPart object.
> ### Aliases: summary.AlphaPart
> 
> ### ** Examples
> 
> ## --- Partition additive genetic values by loc ---
> res <- AlphaPart(x=AlphaPart.ped, colPath="country", colBV=c("bv1", "bv2"))

Size:
 - individuals: 8 
 - traits: 2 (bv1, bv2)
 - paths: 2 (domestic, import)
 - unknown (missing) values:
bv1 bv2 
  0   0 
> 
> ## Summarize whole population
> ret <- summary(res)
> 
> ## Summarize population by generation (=trend)
> ret <- summary(res, by="gen")
> 
> ## Summarize population by generation (=trend) but only for domestic location
> ret <- summary(res, by="gen", subset=res[[1]]$country == "domestic")
> 
> ## --- Partition additive genetic values by loc and gender ---
> 
> AlphaPart.ped$country.gender <- with(AlphaPart.ped, paste(country, gender, sep="-"))
> res <- AlphaPart(x=AlphaPart.ped, colPath="country.gender", colBV=c("bv1", "bv2"))

Size:
 - individuals: 8 
 - traits: 2 (bv1, bv2)
 - paths: 4 (domestic-F, domestic-M, import-F, import-M)
 - unknown (missing) values:
bv1 bv2 
  0   0 
> 
> ## Summarize population by generation (=trend)
> ret <- summary(res, by="gen")
> 
> ## Summarize population by generation (=trend) but only for domestic location
> ret <- summary(res, by="gen", subset=res[[1]]$country == "domestic")
> 
> 
> 
> cleanEx()
> nameEx("write.csv")
> ### * write.csv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: write.csv
> ### Title: write.csv.R
> ### Aliases: write.csv write.csv.default write.csv.AlphaPart
> ###   write.csv.summaryAlphaPart
> 
> ### ** Examples
> 
> ## Partition additive genetic values
> res <- AlphaPart(x=AlphaPart.ped, colPath="country", colBV=c("bv1", "bv2"))

Size:
 - individuals: 8 
 - traits: 2 (bv1, bv2)
 - paths: 2 (domestic, import)
 - unknown (missing) values:
bv1 bv2 
  0   0 
> 
> ## Write summary on the disk and collect saved file names
> fileName <- file.path(tempdir(), "AlphaPart")
> ret <- write.csv(x=res, file=fileName)
/var/folders/l4/yqkcxkkj07jccl06ptwvsnfh0000gn/T//RtmpiCNgHt/AlphaPart_bv1.csv 
/var/folders/l4/yqkcxkkj07jccl06ptwvsnfh0000gn/T//RtmpiCNgHt/AlphaPart_bv2.csv 
> print(ret)
[1] "/var/folders/l4/yqkcxkkj07jccl06ptwvsnfh0000gn/T//RtmpiCNgHt/AlphaPart_bv1.csv"
[2] "/var/folders/l4/yqkcxkkj07jccl06ptwvsnfh0000gn/T//RtmpiCNgHt/AlphaPart_bv2.csv"
> file.show(ret[1])
"IId";"FId";"MId";"gen";"country";"gender";"bv1";"bv1_pa";"bv1_w";"bv1_domestic";"bv1_import"
"A";"";"";1;"domestic";"F";100;104,333333333333;-4,33333333333333;100;0
"B";"";"";1;"import";"M";105;104,333333333333;0,666666666666671;0;105
"C";"B";"A";2;"domestic";"F";104;102,5;1,5;51,5;52,5
"T";"B";"";2;"import";"F";102;52,5;49,5;0;102
"D";"";"";2;"import";"M";108;104,333333333333;3,66666666666667;0;108
"E";"D";"C";3;"domestic";"M";107;106;1;26,75;80,25
"U";"D";"";3;"import";"F";107;54;53;0;107
"V";"E";"";4;"domestic";"F";109;53,5;55,5;68,875;40,125

> 
> ## Clean up
> files <- dir(path=tempdir(), pattern="AlphaPart*")
> unlink(x=files)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.181 0.058 1.259 0.002 0.003 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
